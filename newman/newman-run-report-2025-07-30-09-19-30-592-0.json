{
  "collection": {
    "_": {
      "postman_id": "c0f5ed21-5766-4852-b735-d3ef0c5e72a1",
      "exporter_id": "46788380",
      "collection_link": "https://marcinpniewski-4033129.postman.co/workspace/Marcin-Pniewski's-Workspace~dcdb66fd-756b-45b7-83cd-4d50fb8723ef/collection/46788380-c0f5ed21-5766-4852-b735-d3ef0c5e72a1?action=share&source=collection_link&creator=46788380"
    },
    "item": [
      {
        "id": "314c38a3-fcde-4f50-9c21-eebcba228b5d",
        "name": "Aplikacja testowa",
        "description": {
          "content": "TestSuite generated for REST Service [Aplikacja testowa]",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "18982353-7bba-4236-a064-197147069843",
            "name": "statusZadania",
            "description": {
              "content": "TestCase generated for REST Resource [statusZadania] located at [/statusZadania]",
              "type": "text/plain"
            },
            "item": [
              {
                "id": "a96c8136-f56e-4c0a-b6ce-56b642bf4d58",
                "name": "Test Steps",
                "item": [
                  {
                    "id": "e1c974ec-065f-4041-a31f-061a1f7c7395",
                    "name": "Odpowiedź-OK",
                    "request": {
                      "url": {
                        "path": [
                          "statusZadania"
                        ],
                        "host": [
                          "{{BaseURL}}"
                        ],
                        "query": [
                          {
                            "key": "kod",
                            "value": "zadanie_1"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5822a058-c62f-4899-84cf-94858c4322b2",
                          "type": "text/javascript",
                          "packages": {},
                          "exec": [
                            "const body = pm.response.text().trim();",
                            "const kod = pm.request.url.query",
                            "    .find(p => p.key === \"kod\")?.value?.trim() || \"\";",
                            "",
                            "pm.test(\"Valid HTTP Status Codes\", () => pm.response.to.have.status(200));",
                            "pm.test(\"Pierwsza linia\", () => pm.expect(body).to.include(\"Task summary Generated At\"));",
                            "pm.test(\"Naglowek\", () => pm.expect(body).to.include(\"|Kod                                                   |Status   |Cron                          |Start               |Koniec              |Ostatnie OK         |\"));",
                            "pm.test(\"Kod zadania\", () => pm.expect(body).to.include(\"|\" + kod));",
                            "pm.test(\"Podsumowanie\", () => pm.expect(body).to.include(\"Podsumowanie\"));",
                            "",
                            "// Ogólne asercje nieprzerywające dalszej logiki",
                            "if (body.includes(\"FAILED\")) {",
                            "    console.error(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                            "    pm.test(\"Brak \\\"FAILED\\\"\", () => {",
                            "        pm.expect.fail(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                            "    });",
                            "} else {",
                            "    pm.test(\"Brak \\\"FAILED\\\"\", () => pm.expect(true).to.be.true);",
                            "}",
                            "",
                            "if (body.includes(\"Failures\")) {",
                            "    console.error(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                            "    pm.test(\"Brak \\\"Failures\\\"\", () => {",
                            "        pm.expect.fail(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                            "    });",
                            "} else {",
                            "    pm.test(\"Brak \\\"Failures\\\"\", () => pm.expect(true).to.be.true);",
                            "}",
                            "",
                            "if (!body) {",
                            "    console.error(\"Odpowiedź serwera jest pusta. Przerywam wykonanie.\");",
                            "    pm.test(\"Brak treści w odpowiedzi serwera\", () => {",
                            "        pm.expect.fail(\"Brak treści w odpowiedzi serwera.\");",
                            "    });",
                            "    return;",
                            "}",
                            "",
                            "const linieOdpowiedzi = body.split('\\n');",
                            "",
                            "// Sprawdzenie linii z kodem zadania",
                            "const liniaZKodem = linieOdpowiedzi.find(linia => linia.includes(\"|\" + kod));",
                            "if (!liniaZKodem) {",
                            "    console.error(`Nie znaleziono linii zawierającej kod zadania: ${kod}`);",
                            "    pm.test(\"Linia z kodem zadania istnieje\", () => {",
                            "        pm.expect.fail(`Brak linii z kodem zadania: ${kod}`);",
                            "    });",
                            "    return;",
                            "}",
                            "",
                            "// Szczegółowe filtrowanie linii zgodnie z Groovy (SoapUI)",
                            "const liniaZsoon = linieOdpowiedzi.filter(linia => linia.includes('No information yet. Please try again soon!'));",
                            "const linieZFailed = linieOdpowiedzi.filter(linia => linia.includes('FAILED') && !linia.includes(kod));",
                            "const linieZFailures = linieOdpowiedzi.filter(linia => linia.includes('Failures'));",
                            "const linieZRunNew = linieOdpowiedzi.filter(linia => linia.includes('|RUNNING') || linia.includes('|NEW'));",
                            "",
                            "// Szczegóły błędów specjalnych",
                            "let linieZFailuresSpecjalne = [];",
                            "if (linieZFailures.length > 0) {",
                            "    linieZFailuresSpecjalne = linieOdpowiedzi.filter(linia =>",
                            "        linia.includes('#') ||",
                            "        linia.includes('MAIN:') ||",
                            "        linia.includes('READER:') ||",
                            "        linia.includes('Caused by:') ||",
                            "        linia.includes('WRITER:')",
                            "    );",
                            "}",
                            "",
                            "// Główna logika 1:1 zgodna z Groovy (SoapUI)",
                            "if (liniaZsoon.length === 1) {",
                            "    console.warn(`Należy ponowić sprawdzenie statusu zadania ${kod}`);",
                            "    pm.test(\"Brak komunikatu 'try again soon'\", () => {",
                            "        pm.expect.fail(`Znaleziono 'try again soon' dla zadania ${kod}`);",
                            "    });",
                            "",
                            "} else if (linieZRunNew.length > 0) {",
                            "    console.warn(`Nie wszystkie kroki zostały zakończone dla zadania ${kod}`);",
                            "    pm.test(\"Wszystkie kroki zakończone\", () => {",
                            "        pm.expect.fail(`Znaleziono kroki RUNNING/NEW dla zadania ${kod}`);",
                            "    });",
                            "",
                            "} else if (linieZFailed.length > 0) {",
                            "    if (linieZFailed.length === 1) {",
                            "        console.error(`Wystąpił błąd 'FAILED' dla zadania ${kod}:`);",
                            "        console.error(`      ${linieZFailed[0]}`);",
                            "    } else {",
                            "        console.error(`Wystąpiły błędy 'FAILED' dla zadania ${kod}:`);",
                            "        linieZFailed.forEach(linia => console.error(`      ${linia}`));",
                            "    }",
                            "",
                            "    // Szczegóły  (Failures)",
                            "    if (linieZFailuresSpecjalne.length > 0) {",
                            "        console.error(\"Szczegóły:\");",
                            "        linieZFailuresSpecjalne.forEach(linia => console.error(`      ${linia}`));",
                            "    }",
                            "",
                            "    // Zgłoszenie szczegółowego błędu jako failed test",
                            "    pm.test(\"Brak błędów FAILED\", () => {",
                            "        pm.expect.fail(`Znaleziono linie FAILED dla zadania ${kod}`);",
                            "    });",
                            "",
                            "} else {",
                            "    console.log(`Nie wystąpił błąd 'FAILED' dla zadania ${kod}`);",
                            "    pm.test(\"Brak błędów FAILED\", () => {",
                            "        pm.expect(true).to.be.true;",
                            "    });",
                            "}"
                          ],
                          "_lastExecutionId": "ac67f8ac-e3da-411a-bfec-228509dfcac8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e93e4f3e-18b8-44fe-bd5b-fea9e0c846ad",
                    "name": "Odpowiedź-BŁĄD",
                    "request": {
                      "url": {
                        "path": [
                          "statusZadania"
                        ],
                        "host": [
                          "{{BaseURL}}"
                        ],
                        "query": [
                          {
                            "key": "kod",
                            "value": "zadanie_2"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60b88e7c-b62b-420a-8cc5-23626d08d919",
                          "type": "text/javascript",
                          "packages": {},
                          "exec": [
                            "const body = pm.response.text().trim();",
                            "const kod = pm.request.url.query",
                            "    .find(p => p.key === \"kod\")?.value?.trim() || \"\";",
                            "",
                            "pm.test(\"Valid HTTP Status Codes\", () => pm.response.to.have.status(200));",
                            "pm.test(\"Pierwsza linia\", () => pm.expect(body).to.include(\"Task summary Generated At\"));",
                            "pm.test(\"Naglowek\", () => pm.expect(body).to.include(\"|Kod                                                   |Status   |Cron                          |Start               |Koniec              |Ostatnie OK         |\"));",
                            "pm.test(\"Kod zadania\", () => pm.expect(body).to.include(\"|\" + kod));",
                            "pm.test(\"Podsumowanie\", () => pm.expect(body).to.include(\"Podsumowanie\"));",
                            "",
                            "// Ogólne asercje nieprzerywające dalszej logiki",
                            "if (body.includes(\"FAILED\")) {",
                            "    console.error(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                            "    pm.test(\"Brak \\\"FAILED\\\"\", () => {",
                            "        pm.expect.fail(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                            "    });",
                            "} else {",
                            "    pm.test(\"Brak \\\"FAILED\\\"\", () => pm.expect(true).to.be.true);",
                            "}",
                            "",
                            "if (body.includes(\"Failures\")) {",
                            "    console.error(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                            "    pm.test(\"Brak \\\"Failures\\\"\", () => {",
                            "        pm.expect.fail(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                            "    });",
                            "} else {",
                            "    pm.test(\"Brak \\\"Failures\\\"\", () => pm.expect(true).to.be.true);",
                            "}",
                            "",
                            "if (!body) {",
                            "    console.error(\"Odpowiedź serwera jest pusta. Przerywam wykonanie.\");",
                            "    pm.test(\"Brak treści w odpowiedzi serwera\", () => {",
                            "        pm.expect.fail(\"Brak treści w odpowiedzi serwera.\");",
                            "    });",
                            "    return;",
                            "}",
                            "",
                            "const linieOdpowiedzi = body.split('\\n');",
                            "",
                            "// Sprawdzenie linii z kodem zadania",
                            "const liniaZKodem = linieOdpowiedzi.find(linia => linia.includes(\"|\" + kod));",
                            "if (!liniaZKodem) {",
                            "    console.error(`Nie znaleziono linii zawierającej kod zadania: ${kod}`);",
                            "    pm.test(\"Linia z kodem zadania istnieje\", () => {",
                            "        pm.expect.fail(`Brak linii z kodem zadania: ${kod}`);",
                            "    });",
                            "    return;",
                            "}",
                            "",
                            "// Szczegółowe filtrowanie linii zgodnie z Groovy (SoapUI)",
                            "const liniaZsoon = linieOdpowiedzi.filter(linia => linia.includes('No information yet. Please try again soon!'));",
                            "const linieZFailed = linieOdpowiedzi.filter(linia => linia.includes('FAILED') && !linia.includes(kod));",
                            "const linieZFailures = linieOdpowiedzi.filter(linia => linia.includes('Failures'));",
                            "const linieZRunNew = linieOdpowiedzi.filter(linia => linia.includes('|RUNNING') || linia.includes('|NEW'));",
                            "",
                            "// Szczegóły błędów specjalnych",
                            "let linieZFailuresSpecjalne = [];",
                            "if (linieZFailures.length > 0) {",
                            "    linieZFailuresSpecjalne = linieOdpowiedzi.filter(linia =>",
                            "        linia.includes('#') ||",
                            "        linia.includes('MAIN:') ||",
                            "        linia.includes('READER:') ||",
                            "        linia.includes('Caused by:') ||",
                            "        linia.includes('WRITER:')",
                            "    );",
                            "}",
                            "",
                            "// Główna logika 1:1 zgodna z Groovy (SoapUI)",
                            "if (liniaZsoon.length === 1) {",
                            "    console.warn(`Należy ponowić sprawdzenie statusu zadania ${kod}`);",
                            "    pm.test(\"Brak komunikatu 'try again soon'\", () => {",
                            "        pm.expect.fail(`Znaleziono 'try again soon' dla zadania ${kod}`);",
                            "    });",
                            "",
                            "} else if (linieZRunNew.length > 0) {",
                            "    console.warn(`Nie wszystkie kroki zostały zakończone dla zadania ${kod}`);",
                            "    pm.test(\"Wszystkie kroki zakończone\", () => {",
                            "        pm.expect.fail(`Znaleziono kroki RUNNING/NEW dla zadania ${kod}`);",
                            "    });",
                            "",
                            "} else if (linieZFailed.length > 0) {",
                            "    if (linieZFailed.length === 1) {",
                            "        console.error(`Wystąpił błąd 'FAILED' dla zadania ${kod}:`);",
                            "        console.error(`      ${linieZFailed[0]}`);",
                            "    } else {",
                            "        console.error(`Wystąpiły błędy 'FAILED' dla zadania ${kod}:`);",
                            "        linieZFailed.forEach(linia => console.error(`      ${linia}`));",
                            "    }",
                            "",
                            "    // Szczegóły  (Failures)",
                            "    if (linieZFailuresSpecjalne.length > 0) {",
                            "        console.error(\"Szczegóły:\");",
                            "        linieZFailuresSpecjalne.forEach(linia => console.error(`      ${linia}`));",
                            "    }",
                            "",
                            "    // Zgłoszenie szczegółowego błędu jako failed test",
                            "    pm.test(\"Brak błędów FAILED\", () => {",
                            "        pm.expect.fail(`Znaleziono linie FAILED dla zadania ${kod}`);",
                            "    });",
                            "",
                            "} else {",
                            "    console.log(`Nie wystąpił błąd 'FAILED' dla zadania ${kod}`);",
                            "    pm.test(\"Brak błędów FAILED\", () => {",
                            "        pm.expect(true).to.be.true;",
                            "    });",
                            "}"
                          ],
                          "_lastExecutionId": "08a014d5-2d49-4142-8016-2f8752fbf889"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a02a0fe7-872f-4ae9-afb8-bceec80e8418",
                    "name": "Odpowiedź-BRAK",
                    "request": {
                      "url": {
                        "path": [
                          "statusZadania"
                        ],
                        "host": [
                          "{{BaseURL}}"
                        ],
                        "query": [
                          {
                            "key": "kod",
                            "value": "zadanie_3"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d789b2ea-582f-4219-8ae2-00fd41f9709e",
                          "type": "text/javascript",
                          "packages": {},
                          "exec": [
                            "const body = pm.response.text().trim();",
                            "const kod = pm.request.url.query",
                            "    .find(p => p.key === \"kod\")?.value?.trim() || \"\";",
                            "",
                            "pm.test(\"Valid HTTP Status Codes\", () => pm.response.to.have.status(200));",
                            "pm.test(\"Pierwsza linia\", () => pm.expect(body).to.include(\"Task summary Generated At\"));",
                            "pm.test(\"Naglowek\", () => pm.expect(body).to.include(\"|Kod                                                   |Status   |Cron                          |Start               |Koniec              |Ostatnie OK         |\"));",
                            "pm.test(\"Kod zadania\", () => pm.expect(body).to.include(\"|\" + kod));",
                            "pm.test(\"Podsumowanie\", () => pm.expect(body).to.include(\"Podsumowanie\"));",
                            "",
                            "// Ogólne asercje nieprzerywające dalszej logiki",
                            "if (body.includes(\"FAILED\")) {",
                            "    console.error(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                            "    pm.test(\"Brak \\\"FAILED\\\"\", () => {",
                            "        pm.expect.fail(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                            "    });",
                            "} else {",
                            "    pm.test(\"Brak \\\"FAILED\\\"\", () => pm.expect(true).to.be.true);",
                            "}",
                            "",
                            "if (body.includes(\"Failures\")) {",
                            "    console.error(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                            "    pm.test(\"Brak \\\"Failures\\\"\", () => {",
                            "        pm.expect.fail(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                            "    });",
                            "} else {",
                            "    pm.test(\"Brak \\\"Failures\\\"\", () => pm.expect(true).to.be.true);",
                            "}",
                            "",
                            "if (!body) {",
                            "    console.error(\"Odpowiedź serwera jest pusta. Przerywam wykonanie.\");",
                            "    pm.test(\"Brak treści w odpowiedzi serwera\", () => {",
                            "        pm.expect.fail(\"Brak treści w odpowiedzi serwera.\");",
                            "    });",
                            "    return;",
                            "}",
                            "",
                            "const linieOdpowiedzi = body.split('\\n');",
                            "",
                            "// Sprawdzenie linii z kodem zadania",
                            "const liniaZKodem = linieOdpowiedzi.find(linia => linia.includes(\"|\" + kod));",
                            "if (!liniaZKodem) {",
                            "    console.error(`Nie znaleziono linii zawierającej kod zadania: ${kod}`);",
                            "    pm.test(\"Linia z kodem zadania istnieje\", () => {",
                            "        pm.expect.fail(`Brak linii z kodem zadania: ${kod}`);",
                            "    });",
                            "    return;",
                            "}",
                            "",
                            "// Szczegółowe filtrowanie linii zgodnie z Groovy (SoapUI)",
                            "const liniaZsoon = linieOdpowiedzi.filter(linia => linia.includes('No information yet. Please try again soon!'));",
                            "const linieZFailed = linieOdpowiedzi.filter(linia => linia.includes('FAILED') && !linia.includes(kod));",
                            "const linieZFailures = linieOdpowiedzi.filter(linia => linia.includes('Failures'));",
                            "const linieZRunNew = linieOdpowiedzi.filter(linia => linia.includes('|RUNNING') || linia.includes('|NEW'));",
                            "",
                            "// Szczegóły błędów specjalnych",
                            "let linieZFailuresSpecjalne = [];",
                            "if (linieZFailures.length > 0) {",
                            "    linieZFailuresSpecjalne = linieOdpowiedzi.filter(linia =>",
                            "        linia.includes('#') ||",
                            "        linia.includes('MAIN:') ||",
                            "        linia.includes('READER:') ||",
                            "        linia.includes('Caused by:') ||",
                            "        linia.includes('WRITER:')",
                            "    );",
                            "}",
                            "",
                            "// Główna logika 1:1 zgodna z Groovy (SoapUI)",
                            "if (liniaZsoon.length === 1) {",
                            "    console.warn(`Należy ponowić sprawdzenie statusu zadania ${kod}`);",
                            "    pm.test(\"Brak komunikatu 'try again soon'\", () => {",
                            "        pm.expect.fail(`Znaleziono 'try again soon' dla zadania ${kod}`);",
                            "    });",
                            "",
                            "} else if (linieZRunNew.length > 0) {",
                            "    console.warn(`Nie wszystkie kroki zostały zakończone dla zadania ${kod}`);",
                            "    pm.test(\"Wszystkie kroki zakończone\", () => {",
                            "        pm.expect.fail(`Znaleziono kroki RUNNING/NEW dla zadania ${kod}`);",
                            "    });",
                            "",
                            "} else if (linieZFailed.length > 0) {",
                            "    if (linieZFailed.length === 1) {",
                            "        console.error(`Wystąpił błąd 'FAILED' dla zadania ${kod}:`);",
                            "        console.error(`      ${linieZFailed[0]}`);",
                            "    } else {",
                            "        console.error(`Wystąpiły błędy 'FAILED' dla zadania ${kod}:`);",
                            "        linieZFailed.forEach(linia => console.error(`      ${linia}`));",
                            "    }",
                            "",
                            "    // Szczegóły  (Failures)",
                            "    if (linieZFailuresSpecjalne.length > 0) {",
                            "        console.error(\"Szczegóły:\");",
                            "        linieZFailuresSpecjalne.forEach(linia => console.error(`      ${linia}`));",
                            "    }",
                            "",
                            "    // Zgłoszenie szczegółowego błędu jako failed test",
                            "    pm.test(\"Brak błędów FAILED\", () => {",
                            "        pm.expect.fail(`Znaleziono linie FAILED dla zadania ${kod}`);",
                            "    });",
                            "",
                            "} else {",
                            "    console.log(`Nie wystąpił błąd 'FAILED' dla zadania ${kod}`);",
                            "    pm.test(\"Brak błędów FAILED\", () => {",
                            "        pm.expect(true).to.be.true;",
                            "    });",
                            "}"
                          ],
                          "_lastExecutionId": "c5932503-417c-4bd8-873b-339df675fd01"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          }
        ],
        "event": []
      }
    ],
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "2d3025d9-6255-4596-9df9-748edc29e0f0",
          "type": "text/javascript",
          "packages": {},
          "exec": [
            ""
          ],
          "_lastExecutionId": "1a0b585b-0a1f-4a6e-b518-aa34359e3782"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "904443de-0398-4cb3-ac1c-33d9366f6e01",
          "type": "text/javascript",
          "packages": {},
          "exec": [
            ""
          ],
          "_lastExecutionId": "0c3fd2ac-69a6-40d1-93da-5ae256fc159b"
        }
      }
    ],
    "variable": [
      {
        "type": "any",
        "value": "http://localhost:8089",
        "key": "BaseURL"
      }
    ],
    "info": {
      "_postman_id": "c0f5ed21-5766-4852-b735-d3ef0c5e72a1",
      "name": "Testy aplikacji testowej",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment",
      "postman_exported_at": "2025-07-21T15:36:58.659Z",
      "postman_exported_using": "Postman/11.55.0"
    },
    "id": "f3f8e34f-b201-4031-88b7-9c33048fa114",
    "name": "Testy aplikacji testowej",
    "values": [
      {
        "type": "any",
        "value": "http://localhost:8089",
        "key": "BaseURL"
      }
    ]
  },
  "globals": {
    "id": "17c1a247-c009-4222-81cf-551e47e26595",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 9,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 24,
        "pending": 0,
        "failed": 9
      },
      "testScripts": {
        "total": 6,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 3,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 12.666666666666666,
      "responseMin": 5,
      "responseMax": 27,
      "responseSd": 10.143416036468626,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1753867170431,
      "completed": 1753867170563
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 3,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "9bc63794-8451-4850-acb2-5e04c2b98069",
          "httpRequestId": "00696161-c090-4f92-a000-468d8a9bd895"
        },
        "item": {
          "id": "e1c974ec-065f-4041-a31f-061a1f7c7395",
          "name": "Odpowiedź-OK",
          "request": {
            "url": {
              "path": [
                "statusZadania"
              ],
              "host": [
                "{{BaseURL}}"
              ],
              "query": [
                {
                  "key": "kod",
                  "value": "zadanie_1"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5822a058-c62f-4899-84cf-94858c4322b2",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const body = pm.response.text().trim();",
                  "const kod = pm.request.url.query",
                  "    .find(p => p.key === \"kod\")?.value?.trim() || \"\";",
                  "",
                  "pm.test(\"Valid HTTP Status Codes\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Pierwsza linia\", () => pm.expect(body).to.include(\"Task summary Generated At\"));",
                  "pm.test(\"Naglowek\", () => pm.expect(body).to.include(\"|Kod                                                   |Status   |Cron                          |Start               |Koniec              |Ostatnie OK         |\"));",
                  "pm.test(\"Kod zadania\", () => pm.expect(body).to.include(\"|\" + kod));",
                  "pm.test(\"Podsumowanie\", () => pm.expect(body).to.include(\"Podsumowanie\"));",
                  "",
                  "// Ogólne asercje nieprzerywające dalszej logiki",
                  "if (body.includes(\"FAILED\")) {",
                  "    console.error(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                  "    pm.test(\"Brak \\\"FAILED\\\"\", () => {",
                  "        pm.expect.fail(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                  "    });",
                  "} else {",
                  "    pm.test(\"Brak \\\"FAILED\\\"\", () => pm.expect(true).to.be.true);",
                  "}",
                  "",
                  "if (body.includes(\"Failures\")) {",
                  "    console.error(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                  "    pm.test(\"Brak \\\"Failures\\\"\", () => {",
                  "        pm.expect.fail(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                  "    });",
                  "} else {",
                  "    pm.test(\"Brak \\\"Failures\\\"\", () => pm.expect(true).to.be.true);",
                  "}",
                  "",
                  "if (!body) {",
                  "    console.error(\"Odpowiedź serwera jest pusta. Przerywam wykonanie.\");",
                  "    pm.test(\"Brak treści w odpowiedzi serwera\", () => {",
                  "        pm.expect.fail(\"Brak treści w odpowiedzi serwera.\");",
                  "    });",
                  "    return;",
                  "}",
                  "",
                  "const linieOdpowiedzi = body.split('\\n');",
                  "",
                  "// Sprawdzenie linii z kodem zadania",
                  "const liniaZKodem = linieOdpowiedzi.find(linia => linia.includes(\"|\" + kod));",
                  "if (!liniaZKodem) {",
                  "    console.error(`Nie znaleziono linii zawierającej kod zadania: ${kod}`);",
                  "    pm.test(\"Linia z kodem zadania istnieje\", () => {",
                  "        pm.expect.fail(`Brak linii z kodem zadania: ${kod}`);",
                  "    });",
                  "    return;",
                  "}",
                  "",
                  "// Szczegółowe filtrowanie linii zgodnie z Groovy (SoapUI)",
                  "const liniaZsoon = linieOdpowiedzi.filter(linia => linia.includes('No information yet. Please try again soon!'));",
                  "const linieZFailed = linieOdpowiedzi.filter(linia => linia.includes('FAILED') && !linia.includes(kod));",
                  "const linieZFailures = linieOdpowiedzi.filter(linia => linia.includes('Failures'));",
                  "const linieZRunNew = linieOdpowiedzi.filter(linia => linia.includes('|RUNNING') || linia.includes('|NEW'));",
                  "",
                  "// Szczegóły błędów specjalnych",
                  "let linieZFailuresSpecjalne = [];",
                  "if (linieZFailures.length > 0) {",
                  "    linieZFailuresSpecjalne = linieOdpowiedzi.filter(linia =>",
                  "        linia.includes('#') ||",
                  "        linia.includes('MAIN:') ||",
                  "        linia.includes('READER:') ||",
                  "        linia.includes('Caused by:') ||",
                  "        linia.includes('WRITER:')",
                  "    );",
                  "}",
                  "",
                  "// Główna logika 1:1 zgodna z Groovy (SoapUI)",
                  "if (liniaZsoon.length === 1) {",
                  "    console.warn(`Należy ponowić sprawdzenie statusu zadania ${kod}`);",
                  "    pm.test(\"Brak komunikatu 'try again soon'\", () => {",
                  "        pm.expect.fail(`Znaleziono 'try again soon' dla zadania ${kod}`);",
                  "    });",
                  "",
                  "} else if (linieZRunNew.length > 0) {",
                  "    console.warn(`Nie wszystkie kroki zostały zakończone dla zadania ${kod}`);",
                  "    pm.test(\"Wszystkie kroki zakończone\", () => {",
                  "        pm.expect.fail(`Znaleziono kroki RUNNING/NEW dla zadania ${kod}`);",
                  "    });",
                  "",
                  "} else if (linieZFailed.length > 0) {",
                  "    if (linieZFailed.length === 1) {",
                  "        console.error(`Wystąpił błąd 'FAILED' dla zadania ${kod}:`);",
                  "        console.error(`      ${linieZFailed[0]}`);",
                  "    } else {",
                  "        console.error(`Wystąpiły błędy 'FAILED' dla zadania ${kod}:`);",
                  "        linieZFailed.forEach(linia => console.error(`      ${linia}`));",
                  "    }",
                  "",
                  "    // Szczegóły  (Failures)",
                  "    if (linieZFailuresSpecjalne.length > 0) {",
                  "        console.error(\"Szczegóły:\");",
                  "        linieZFailuresSpecjalne.forEach(linia => console.error(`      ${linia}`));",
                  "    }",
                  "",
                  "    // Zgłoszenie szczegółowego błędu jako failed test",
                  "    pm.test(\"Brak błędów FAILED\", () => {",
                  "        pm.expect.fail(`Znaleziono linie FAILED dla zadania ${kod}`);",
                  "    });",
                  "",
                  "} else {",
                  "    console.log(`Nie wystąpił błąd 'FAILED' dla zadania ${kod}`);",
                  "    pm.test(\"Brak błędów FAILED\", () => {",
                  "        pm.expect(true).to.be.true;",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "ac67f8ac-e3da-411a-bfec-228509dfcac8"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8089",
            "path": [
              "statusZadania"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "kod",
                "value": "zadanie_1"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d9453393-592c-4a21-92f2-e64c8b9e306a",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8089",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "c745df69-c7ed-4caf-bd11-4e3852a96d23",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "Werkzeug/3.1.3 Python/3.11.13"
            },
            {
              "key": "Date",
              "value": "Wed, 30 Jul 2025 09:19:30 GMT"
            },
            {
              "key": "Content-Type",
              "value": "text/plain; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "2088"
            },
            {
              "key": "Connection",
              "value": "close"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              117,
              115,
              101,
              114,
              64,
              112,
              109,
              97,
              115,
              122,
              121,
              110,
              97,
              58,
              126,
              32,
              62,
              32,
              99,
              117,
              114,
              108,
              32,
              39,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              97,
              112,
              108,
              105,
              107,
              97,
              99,
              106,
              97,
              58,
              56,
              48,
              56,
              57,
              47,
              115,
              116,
              97,
              116,
              117,
              115,
              90,
              97,
              100,
              97,
              110,
              105,
              97,
              63,
              107,
              111,
              100,
              61,
              122,
              97,
              100,
              97,
              110,
              105,
              101,
              95,
              49,
              39,
              10,
              84,
              97,
              115,
              107,
              32,
              115,
              117,
              109,
              109,
              97,
              114,
              121,
              32,
              71,
              101,
              110,
              101,
              114,
              97,
              116,
              101,
              100,
              32,
              65,
              116,
              58,
              32,
              70,
              114,
              105,
              32,
              74,
              117,
              110,
              32,
              50,
              55,
              32,
              48,
              56,
              58,
              50,
              50,
              58,
              52,
              49,
              32,
              67,
              69,
              83,
              84,
              32,
              50,
              48,
              50,
              53,
              10,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              10,
              124,
              75,
              111,
              100,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              124,
              83,
              116,
              97,
              116,
              117,
              115,
              32,
              32,
              32,
              124,
              67,
              114,
              111,
              110,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              124,
              83,
              116,
              97,
              114,
              116,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              124,
              75,
              111,
              110,
              105,
              101,
              99,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              124,
              79,
              115,
              116,
              97,
              116,
              110,
              105,
              101,
              32,
              79,
              75,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              124,
              10,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              10,
              124,
              122,
              97,
              100,
              97,
              110,
              105,
              101,
              95,
              49,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              124,
              70,
              73,
              78,
              73,
              83,
              72,
              69,
              68,
              32,
              124,
              48,
              32,
              42,
              47,
              53,
              32,
              42,
              32,
              42,
              32,
              42,
              32,
              42,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              124,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              50,
              55,
              32,
              49,
              50,
              58,
              52,
              53,
              58,
              48,
              48,
              32,
              124,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              50,
              55,
              32,
              49,
              50,
              58,
              52,
              53,
              58,
              48,
              49,
              32,
              124,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              50,
              55,
              32,
              49,
              50,
              58,
              52,
              53,
              58,
              48,
              48,
              32,
              124,
              10,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              10,
              10,
              10,
              80,
              111,
              100,
              115,
              117,
              109,
              111,
              119,
              97,
              110,
              105,
              101,
              10,
              43,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              10,
              124,
              32,
              108,
              112,
              124,
              75,
              108,
              97,
              115,
              97,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              124,
              90,
              97,
              119,
              97,
              114,
              116,
              111,
              115,
              99,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              124,
              83,
              116,
              97,
              116,
              117,
              115,
              32,
              32,
              32,
              124,
              83,
              116,
              97,
              114,
              116,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              124,
              75,
              111,
              110,
              105,
              101,
              99,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              124,
              32,
              32,
              32,
              87,
              105,
              101,
              114,
              115,
              122,
              121,
              124,
              80,
              114,
              101,
              100,
              107,
              111,
              115,
              99,
              124,
              79,
              115,
              116,
              97,
              116,
              110,
              105,
              32,
              100,
              111,
              115,
              116,
              101,
              112,
              32,
              32,
              32,
              32,
              32,
              124,
              32,
              87,
              105,
              101,
              114,
              115,
              122,
              121,
              47,
              104,
              124,
              10,
              43,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              10,
              124,
              32,
              32,
              49,
              124,
              75,
              111,
              112,
              105,
              111,
              119,
              97,
              110,
              105,
              101,
              32,
              32,
              32,
              32,
              124,
              84,
              97,
              98,
              101,
              108,
              97,
              95,
              49,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              124,
              70,
              73,
              78,
              73,
              83,
              72,
              69,
              68,
              32,
              124,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              50,
              55,
              32,
              49,
              50,
              58,
              52,
              53,
              58,
              48,
              48,
              124,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              50,
              55,
              32,
              49,
              50,
              58,
              52,
              53,
              58,
              48,
              49,
              124,
              32,
              32,
              32,
              32,
              32,
              32,
              49,
              53,
              48,
              48,
              124,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              48,
              124,
              194,
              160,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              124,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              48,
              124,
              10,
              124,
              32,
              32,
              50,
              124,
              75,
              111,
              112,
              105,
              111,
              119,
              97,
              110,
              105,
              101,
              32,
              32,
              32,
              32,
              124,
              84,
              97,
              98,
              101,
              108,
              97,
              95,
              50,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              124,
              70,
              73,
              78,
              73,
              83,
              72,
              69,
              68,
              32,
              124,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              50,
              55,
              32,
              49,
              50,
              58,
              52,
              53,
              58,
              48,
              48,
              124,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              50,
              55,
              32,
              49,
              50,
              58,
              52,
              53,
              58,
              48,
              49,
              124,
              32,
              32,
              32,
              32,
              32,
              32,
              51,
              48,
              48,
              48,
              124,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              48,
              124,
              194,
              160,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              124,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              48,
              124,
              10,
              124,
              32,
              32,
              51,
              124,
              75,
              111,
              112,
              105,
              111,
              119,
              97,
              110,
              105,
              101,
              32,
              32,
              32,
              32,
              124,
              84,
              97,
              98,
              101,
              108,
              97,
              95,
              51,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              124,
              70,
              73,
              78,
              73,
              83,
              72,
              69,
              68,
              32,
              124,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              50,
              55,
              32,
              49,
              50,
              58,
              52,
              53,
              58,
              48,
              48,
              124,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              50,
              55,
              32,
              49,
              50,
              58,
              52,
              53,
              58,
              48,
              49,
              124,
              32,
              32,
              32,
              32,
              32,
              32,
              54,
              48,
              48,
              48,
              124,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              48,
              124,
              194,
              160,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              124,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              48,
              124,
              10,
              43,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43
            ]
          },
          "cookie": [],
          "responseTime": 27,
          "responseSize": 2088
        },
        "id": "e1c974ec-065f-4041-a31f-061a1f7c7395",
        "assertions": [
          {
            "assertion": "Valid HTTP Status Codes",
            "skipped": false
          },
          {
            "assertion": "Pierwsza linia",
            "skipped": false
          },
          {
            "assertion": "Naglowek",
            "skipped": false
          },
          {
            "assertion": "Kod zadania",
            "skipped": false
          },
          {
            "assertion": "Podsumowanie",
            "skipped": false
          },
          {
            "assertion": "Brak \"FAILED\"",
            "skipped": false
          },
          {
            "assertion": "Brak \"Failures\"",
            "skipped": false
          },
          {
            "assertion": "Brak błędów FAILED",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "523933b0-fd9c-4b30-a176-dcc7dd942479",
          "length": 3,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "579e2395-6079-46e1-9254-931877181cd9"
        },
        "item": {
          "id": "e93e4f3e-18b8-44fe-bd5b-fea9e0c846ad",
          "name": "Odpowiedź-BŁĄD",
          "request": {
            "url": {
              "path": [
                "statusZadania"
              ],
              "host": [
                "{{BaseURL}}"
              ],
              "query": [
                {
                  "key": "kod",
                  "value": "zadanie_2"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "60b88e7c-b62b-420a-8cc5-23626d08d919",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const body = pm.response.text().trim();",
                  "const kod = pm.request.url.query",
                  "    .find(p => p.key === \"kod\")?.value?.trim() || \"\";",
                  "",
                  "pm.test(\"Valid HTTP Status Codes\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Pierwsza linia\", () => pm.expect(body).to.include(\"Task summary Generated At\"));",
                  "pm.test(\"Naglowek\", () => pm.expect(body).to.include(\"|Kod                                                   |Status   |Cron                          |Start               |Koniec              |Ostatnie OK         |\"));",
                  "pm.test(\"Kod zadania\", () => pm.expect(body).to.include(\"|\" + kod));",
                  "pm.test(\"Podsumowanie\", () => pm.expect(body).to.include(\"Podsumowanie\"));",
                  "",
                  "// Ogólne asercje nieprzerywające dalszej logiki",
                  "if (body.includes(\"FAILED\")) {",
                  "    console.error(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                  "    pm.test(\"Brak \\\"FAILED\\\"\", () => {",
                  "        pm.expect.fail(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                  "    });",
                  "} else {",
                  "    pm.test(\"Brak \\\"FAILED\\\"\", () => pm.expect(true).to.be.true);",
                  "}",
                  "",
                  "if (body.includes(\"Failures\")) {",
                  "    console.error(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                  "    pm.test(\"Brak \\\"Failures\\\"\", () => {",
                  "        pm.expect.fail(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                  "    });",
                  "} else {",
                  "    pm.test(\"Brak \\\"Failures\\\"\", () => pm.expect(true).to.be.true);",
                  "}",
                  "",
                  "if (!body) {",
                  "    console.error(\"Odpowiedź serwera jest pusta. Przerywam wykonanie.\");",
                  "    pm.test(\"Brak treści w odpowiedzi serwera\", () => {",
                  "        pm.expect.fail(\"Brak treści w odpowiedzi serwera.\");",
                  "    });",
                  "    return;",
                  "}",
                  "",
                  "const linieOdpowiedzi = body.split('\\n');",
                  "",
                  "// Sprawdzenie linii z kodem zadania",
                  "const liniaZKodem = linieOdpowiedzi.find(linia => linia.includes(\"|\" + kod));",
                  "if (!liniaZKodem) {",
                  "    console.error(`Nie znaleziono linii zawierającej kod zadania: ${kod}`);",
                  "    pm.test(\"Linia z kodem zadania istnieje\", () => {",
                  "        pm.expect.fail(`Brak linii z kodem zadania: ${kod}`);",
                  "    });",
                  "    return;",
                  "}",
                  "",
                  "// Szczegółowe filtrowanie linii zgodnie z Groovy (SoapUI)",
                  "const liniaZsoon = linieOdpowiedzi.filter(linia => linia.includes('No information yet. Please try again soon!'));",
                  "const linieZFailed = linieOdpowiedzi.filter(linia => linia.includes('FAILED') && !linia.includes(kod));",
                  "const linieZFailures = linieOdpowiedzi.filter(linia => linia.includes('Failures'));",
                  "const linieZRunNew = linieOdpowiedzi.filter(linia => linia.includes('|RUNNING') || linia.includes('|NEW'));",
                  "",
                  "// Szczegóły błędów specjalnych",
                  "let linieZFailuresSpecjalne = [];",
                  "if (linieZFailures.length > 0) {",
                  "    linieZFailuresSpecjalne = linieOdpowiedzi.filter(linia =>",
                  "        linia.includes('#') ||",
                  "        linia.includes('MAIN:') ||",
                  "        linia.includes('READER:') ||",
                  "        linia.includes('Caused by:') ||",
                  "        linia.includes('WRITER:')",
                  "    );",
                  "}",
                  "",
                  "// Główna logika 1:1 zgodna z Groovy (SoapUI)",
                  "if (liniaZsoon.length === 1) {",
                  "    console.warn(`Należy ponowić sprawdzenie statusu zadania ${kod}`);",
                  "    pm.test(\"Brak komunikatu 'try again soon'\", () => {",
                  "        pm.expect.fail(`Znaleziono 'try again soon' dla zadania ${kod}`);",
                  "    });",
                  "",
                  "} else if (linieZRunNew.length > 0) {",
                  "    console.warn(`Nie wszystkie kroki zostały zakończone dla zadania ${kod}`);",
                  "    pm.test(\"Wszystkie kroki zakończone\", () => {",
                  "        pm.expect.fail(`Znaleziono kroki RUNNING/NEW dla zadania ${kod}`);",
                  "    });",
                  "",
                  "} else if (linieZFailed.length > 0) {",
                  "    if (linieZFailed.length === 1) {",
                  "        console.error(`Wystąpił błąd 'FAILED' dla zadania ${kod}:`);",
                  "        console.error(`      ${linieZFailed[0]}`);",
                  "    } else {",
                  "        console.error(`Wystąpiły błędy 'FAILED' dla zadania ${kod}:`);",
                  "        linieZFailed.forEach(linia => console.error(`      ${linia}`));",
                  "    }",
                  "",
                  "    // Szczegóły  (Failures)",
                  "    if (linieZFailuresSpecjalne.length > 0) {",
                  "        console.error(\"Szczegóły:\");",
                  "        linieZFailuresSpecjalne.forEach(linia => console.error(`      ${linia}`));",
                  "    }",
                  "",
                  "    // Zgłoszenie szczegółowego błędu jako failed test",
                  "    pm.test(\"Brak błędów FAILED\", () => {",
                  "        pm.expect.fail(`Znaleziono linie FAILED dla zadania ${kod}`);",
                  "    });",
                  "",
                  "} else {",
                  "    console.log(`Nie wystąpił błąd 'FAILED' dla zadania ${kod}`);",
                  "    pm.test(\"Brak błędów FAILED\", () => {",
                  "        pm.expect(true).to.be.true;",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "08a014d5-2d49-4142-8016-2f8752fbf889"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8089",
            "path": [
              "statusZadania"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "kod",
                "value": "zadanie_2"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a873cff3-8fe6-4578-9825-a34b5d46772a",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8089",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "8b68edc6-f327-4a1c-bb9e-bf06a089ae1d",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "Werkzeug/3.1.3 Python/3.11.13"
            },
            {
              "key": "Date",
              "value": "Wed, 30 Jul 2025 09:19:30 GMT"
            },
            {
              "key": "Content-Type",
              "value": "text/plain; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "8555"
            },
            {
              "key": "Connection",
              "value": "close"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              117,
              115,
              101,
              114,
              64,
              112,
              109,
              97,
              115,
              122,
              121,
              110,
              97,
              58,
              126,
              32,
              62,
              32,
              99,
              117,
              114,
              108,
              32,
              39,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              97,
              112,
              108,
              105,
              107,
              97,
              99,
              106,
              97,
              58,
              56,
              48,
              56,
              57,
              47,
              115,
              116,
              97,
              116,
              117,
              115,
              90,
              97,
              100,
              97,
              110,
              105,
              97,
              63,
              107,
              111,
              100,
              61,
              122,
              97,
              100,
              97,
              110,
              105,
              101,
              95,
              50,
              39,
              10,
              84,
              97,
              115,
              107,
              32,
              115,
              117,
              109,
              109,
              97,
              114,
              121,
              32,
              71,
              101,
              110,
              101,
              114,
              97,
              116,
              101,
              100,
              32,
              65,
              116,
              58,
              32,
              70,
              114,
              105,
              32,
              74,
              117,
              110,
              32,
              50,
              55,
              32,
              48,
              56,
              58,
              50,
              51,
              58,
              52,
              52,
              32,
              67,
              69,
              83,
              84,
              32,
              50,
              48,
              50,
              53,
              10,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              10,
              124,
              75,
              111,
              100,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              124,
              83,
              116,
              97,
              116,
              117,
              115,
              32,
              32,
              32,
              124,
              67,
              114,
              111,
              110,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              124,
              83,
              116,
              97,
              114,
              116,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              124,
              75,
              111,
              110,
              105,
              101,
              99,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              124,
              79,
              115,
              116,
              97,
              116,
              110,
              105,
              101,
              32,
              79,
              75,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              124,
              10,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              10,
              124,
              122,
              97,
              100,
              97,
              110,
              105,
              101,
              95,
              50,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              124,
              70,
              65,
              73,
              76,
              69,
              68,
              32,
              32,
              32,
              124,
              48,
              32,
              42,
              47,
              53,
              32,
              42,
              32,
              42,
              32,
              42,
              32,
              42,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              124,
              50,
              48,
              50,
              53,
              45,
              48,
              54,
              45,
              50,
              55,
              32,
              48,
              56,
              58,
              50,
              48,
              58,
              48,
              48,
              32,
              124,
              50,
              48,
              50,
              53,
              45,
              48,
              54,
              45,
              50,
              55,
              32,
              48,
              56,
              58,
              50,
              48,
              58,
              49,
              50,
              32,
              124,
              50,
              48,
              50,
              53,
              45,
              48,
              53,
              45,
              50,
              49,
              32,
              49,
              52,
              58,
              49,
              48,
              58,
              48,
              48,
              32,
              124,
              10,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              10,
              10,
              10,
              80,
              111,
              100,
              115,
              117,
              109,
              111,
              119,
              97,
              110,
              105,
              101,
              10,
              43,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              10,
              124,
              32,
              108,
              112,
              124,
              75,
              108,
              97,
              115,
              97,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              124,
              90,
              97,
              119,
              97,
              114,
              116,
              111,
              115,
              99,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              124,
              83,
              116,
              97,
              116,
              117,
              115,
              32,
              32,
              32,
              124,
              83,
              116,
              97,
              114,
              116,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              124,
              75,
              111,
              110,
              105,
              101,
              99,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              124,
              32,
              32,
              32,
              87,
              105,
              101,
              114,
              115,
              122,
              121,
              124,
              80,
              114,
              101,
              100,
              107,
              111,
              115,
              99,
              124,
              79,
              115,
              116,
              97,
              116,
              110,
              105,
              32,
              100,
              111,
              115,
              116,
              101,
              112,
              32,
              32,
              32,
              32,
              32,
              124,
              32,
              87,
              105,
              101,
              114,
              115,
              122,
              121,
              47,
              104,
              124,
              10,
              43,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              10,
              124,
              32,
              32,
              49,
              124,
              90,
              97,
              107,
              108,
              97,
              100,
              97,
              110,
              105,
              101,
              32,
              32,
              32,
              32,
              124,
              84,
              97,
              98,
              101,
              108,
              97,
              95,
              49,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              124,
              70,
              73,
              78,
              73,
              83,
              72,
              69,
              68,
              32,
              124,
              50,
              48,
              50,
              53,
              45,
              48,
              54,
              45,
              50,
              55,
              32,
              48,
              56,
              58,
              50,
              48,
              58,
              48,
              48,
              124,
              50,
              48,
              50,
              53,
              45,
              48,
              54,
              45,
              50,
              55,
              32,
              48,
              56,
              58,
              50,
              48,
              58,
              48,
              48,
              124,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              48,
              124,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              48,
              124,
              194,
              160,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              124,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              48,
              124,
              10,
              124,
              32,
              32,
              50,
              124,
              90,
              97,
              107,
              108,
              97,
              100,
              97,
              110,
              105,
              101,
              32,
              32,
              32,
              32,
              124,
              84,
              97,
              98,
              101,
              108,
              97,
              95,
              50,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              124,
              70,
              65,
              73,
              76,
              69,
              68,
              32,
              32,
              32,
              124,
              50,
              48,
              50,
              53,
              45,
              48,
              54,
              45,
              50,
              55,
              32,
              48,
              56,
              58,
              50,
              48,
              58,
              48,
              48,
              124,
              50,
              48,
              50,
              53,
              45,
              48,
              54,
              45,
              50,
              55,
              32,
              48,
              56,
              58,
              50,
              48,
              58,
              48,
              48,
              124,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              48,
              124,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              48,
              124,
              194,
              160,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              124,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              48,
              124,
              10,
              124,
              32,
              32,
              51,
              124,
              90,
              97,
              107,
              108,
              97,
              100,
              97,
              110,
              105,
              101,
              32,
              32,
              32,
              32,
              124,
              84,
              97,
              98,
              101,
              108,
              97,
              95,
              51,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              124,
              70,
              73,
              78,
              73,
              83,
              72,
              69,
              68,
              32,
              124,
              50,
              48,
              50,
              53,
              45,
              48,
              54,
              45,
              50,
              55,
              32,
              48,
              56,
              58,
              50,
              48,
              58,
              48,
              48,
              124,
              50,
              48,
              50,
              53,
              45,
              48,
              54,
              45,
              50,
              55,
              32,
              48,
              56,
              58,
              50,
              48,
              58,
              48,
              48,
              124,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              48,
              124,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              48,
              124,
              194,
              160,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              124,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              48,
              124,
              10,
              124,
              32,
              32,
              52,
              124,
              87,
              101,
              114,
              121,
              102,
              105,
              107,
              97,
              99,
              106,
              97,
              32,
              32,
              32,
              124,
              84,
              97,
              98,
              101,
              108,
              97,
              95,
              49,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              124,
              70,
              73,
              78,
              73,
              83,
              72,
              69,
              68,
              32,
              124,
              50,
              48,
              50,
              53,
              45,
              48,
              54,
              45,
              50,
              55,
              32,
              48,
              56,
              58,
              50,
              48,
              58,
              48,
              55,
              124,
              50,
              48,
              50,
              53,
              45,
              48,
              54,
              45,
              50,
              55,
              32,
              48,
              56,
              58,
              50,
              48,
              58,
              48,
              56,
              124,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              48,
              124,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              48,
              124,
              194,
              160,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              124,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              48,
              124,
              10,
              124,
              32,
              32,
              53,
              124,
              87,
              101,
              114,
              121,
              102,
              105,
              107,
              97,
              99,
              106,
              97,
              32,
              32,
              32,
              124,
              84,
              97,
              98,
              101,
              108,
              97,
              95,
              50,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              124,
              70,
              65,
              73,
              76,
              69,
              68,
              32,
              32,
              32,
              124,
              50,
              48,
              50,
              53,
              45,
              48,
              54,
              45,
              50,
              55,
              32,
              48,
              56,
              58,
              50,
              48,
              58,
              48,
              56,
              124,
              50,
              48,
              50,
              53,
              45,
              48,
              54,
              45,
              50,
              55,
              32,
              48,
              56,
              58,
              50,
              48,
              58,
              48,
              56,
              124,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              48,
              124,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              48,
              124,
              194,
              160,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              124,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              48,
              124,
              10,
              124,
              32,
              32,
              54,
              124,
              87,
              101,
              114,
              121,
              102,
              105,
              107,
              97,
              99,
              106,
              97,
              32,
              32,
              32,
              124,
              84,
              97,
              98,
              101,
              108,
              97,
              95,
              51,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              124,
              70,
              73,
              78,
              73,
              83,
              72,
              69,
              68,
              32,
              124,
              50,
              48,
              50,
              53,
              45,
              48,
              54,
              45,
              50,
              55,
              32,
              48,
              56,
              58,
              50,
              48,
              58,
              48,
              56,
              124,
              50,
              48,
              50,
              53,
              45,
              48,
              54,
              45,
              50,
              55,
              32,
              48,
              56,
              58,
              50,
              48,
              58,
              48,
              56,
              124,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              48,
              124,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              48,
              124,
              194,
              160,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              124,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              48,
              124,
              10,
              124,
              32,
              32,
              55,
              124,
              75,
              111,
              112,
              105,
              111,
              119,
              97,
              110,
              105,
              101,
              32,
              32,
              32,
              32,
              124,
              84,
              97,
              98,
              101,
              108,
              97,
              95,
              49,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              124,
              70,
              73,
              78,
              73,
              83,
              72,
              69,
              68,
              32,
              124,
              50,
              48,
              50,
              53,
              45,
              48,
              54,
              45,
              50,
              55,
              32,
              48,
              56,
              58,
              50,
              48,
              58,
              48,
              57,
              124,
              50,
              48,
              50,
              53,
              45,
              48,
              54,
              45,
              50,
              55,
              32,
              48,
              56,
              58,
              50,
              48,
              58,
              48,
              57,
              124,
              32,
              32,
              32,
              32,
              32,
              32,
              49,
              53,
              48,
              48,
              124,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              48,
              124,
              194,
              160,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              124,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              48,
              124,
              10,
              124,
              32,
              32,
              56,
              124,
              75,
              111,
              112,
              105,
              111,
              119,
              97,
              110,
              105,
              101,
              32,
              32,
              32,
              32,
              124,
              84,
              97,
              98,
              101,
              108,
              97,
              95,
              50,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              124,
              70,
              65,
              73,
              76,
              69,
              68,
              32,
              32,
              32,
              124,
              50,
              48,
              50,
              53,
              45,
              48,
              54,
              45,
              50,
              55,
              32,
              48,
              56,
              58,
              50,
              48,
              58,
              48,
              57,
              124,
              50,
              48,
              50,
              53,
              45,
              48,
              54,
              45,
              50,
              55,
              32,
              48,
              56,
              58,
              50,
              48,
              58,
              49,
              48,
              124,
              32,
              32,
              32,
              32,
              32,
              32,
              51,
              48,
              48,
              48,
              124,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              48,
              124,
              194,
              160,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              124,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              48,
              124,
              10,
              124,
              32,
              32,
              57,
              124,
              75,
              111,
              112,
              105,
              111,
              119,
              97,
              110,
              105,
              101,
              32,
              32,
              32,
              32,
              124,
              84,
              97,
              98,
              101,
              108,
              97,
              95,
              51,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              124,
              70,
              73,
              78,
              73,
              83,
              72,
              69,
              68,
              32,
              124,
              50,
              48,
              50,
              53,
              45,
              48,
              54,
              45,
              50,
              55,
              32,
              48,
              56,
              58,
              50,
              48,
              58,
              48,
              57,
              124,
              50,
              48,
              50,
              53,
              45,
              48,
              54,
              45,
              50,
              55,
              32,
              48,
              56,
              58,
              50,
              48,
              58,
              48,
              57,
              124,
              32,
              32,
              32,
              32,
              32,
              32,
              54,
              48,
              48,
              48,
              124,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              48,
              124,
              194,
              160,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              124,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              48,
              124,
              10,
              43,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              43,
              10,
              10,
              10,
              70,
              97,
              105,
              108,
              117,
              114,
              101,
              115,
              58,
              10,
              35,
              50,
              32,
              90,
              97,
              107,
              108,
              97,
              100,
              97,
              110,
              105,
              101,
              47,
              84,
              97,
              98,
              101,
              108,
              97,
              95,
              50,
              64,
              122,
              97,
              100,
              97,
              110,
              105,
              101,
              95,
              50,
              10,
              82,
              69,
              65,
              68,
              69,
              82,
              58,
              32,
              111,
              114,
              103,
              46,
              112,
              111,
              115,
              116,
              103,
              114,
              101,
              115,
              113,
              108,
              46,
              117,
              116,
              105,
              108,
              46,
              80,
              83,
              81,
              76,
              69,
              120,
              99,
              101,
              112,
              116,
              105,
              111,
              110,
              58,
              32,
              69,
              82,
              82,
              79,
              82,
              58,
              32,
              114,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              32,
              34,
              122,
              97,
              100,
              97,
              110,
              105,
              101,
              95,
              50,
              46,
              84,
              97,
              98,
              101,
              108,
              97,
              95,
              50,
              34,
              32,
              100,
              111,
              101,
              115,
              32,
              110,
              111,
              116,
              32,
              101,
              120,
              105,
              115,
              116,
              10,
              32,
              32,
              80,
              111,
              115,
              105,
              116,
              105,
              111,
              110,
              58,
              32,
              49,
              55,
              53,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              111,
              114,
              103,
              46,
              112,
              111,
              115,
              116,
              103,
              114,
              101,
              115,
              113,
              108,
              46,
              99,
              111,
              114,
              101,
              46,
              118,
              51,
              46,
              81,
              117,
              101,
              114,
              121,
              69,
              120,
              101,
              99,
              117,
              116,
              111,
              114,
              73,
              109,
              112,
              108,
              46,
              114,
              101,
              99,
              101,
              105,
              118,
              101,
              69,
              114,
              114,
              111,
              114,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              40,
              81,
              117,
              101,
              114,
              121,
              69,
              120,
              101,
              99,
              117,
              116,
              111,
              114,
              73,
              109,
              112,
              108,
              46,
              106,
              97,
              118,
              97,
              58,
              50,
              53,
              51,
              50,
              41,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              111,
              114,
              103,
              46,
              112,
              111,
              115,
              116,
              103,
              114,
              101,
              115,
              113,
              108,
              46,
              99,
              111,
              114,
              101,
              46,
              118,
              51,
              46,
              81,
              117,
              101,
              114,
              121,
              69,
              120,
              101,
              99,
              117,
              116,
              111,
              114,
              73,
              109,
              112,
              108,
              46,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              82,
              101,
              115,
              117,
              108,
              116,
              115,
              40,
              81,
              117,
              101,
              114,
              121,
              69,
              120,
              101,
              99,
              117,
              116,
              111,
              114,
              73,
              109,
              112,
              108,
              46,
              106,
              97,
              118,
              97,
              58,
              50,
              50,
              54,
              55,
              41,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              111,
              114,
              103,
              46,
              112,
              111,
              115,
              116,
              103,
              114,
              101,
              115,
              113,
              108,
              46,
              99,
              111,
              114,
              101,
              46,
              118,
              51,
              46,
              81,
              117,
              101,
              114,
              121,
              69,
              120,
              101,
              99,
              117,
              116,
              111,
              114,
              73,
              109,
              112,
              108,
              46,
              101,
              120,
              101,
              99,
              117,
              116,
              101,
              40,
              81,
              117,
              101,
              114,
              121,
              69,
              120,
              101,
              99,
              117,
              116,
              111,
              114,
              73,
              109,
              112,
              108,
              46,
              106,
              97,
              118,
              97,
              58,
              51,
              49,
              50,
              41,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              111,
              114,
              103,
              46,
              112,
              111,
              115,
              116,
              103,
              114,
              101,
              115,
              113,
              108,
              46,
              106,
              100,
              98,
              99,
              46,
              80,
              103,
              83,
              116,
              97,
              116,
              101,
              109,
              101,
              110,
              116,
              46,
              101,
              120,
              101,
              99,
              117,
              116,
              101,
              73,
              110,
              116,
              101,
              114,
              110,
              97,
              108,
              40,
              80,
              103,
              83,
              116,
              97,
              116,
              101,
              109,
              101,
              110,
              116,
              46,
              106,
              97,
              118,
              97,
              58,
              52,
              52,
              56,
              41,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              111,
              114,
              103,
              46,
              112,
              111,
              115,
              116,
              103,
              114,
              101,
              115,
              113,
              108,
              46,
              106,
              100,
              98,
              99,
              46,
              80,
              103,
              83,
              116,
              97,
              116,
              101,
              109,
              101,
              110,
              116,
              46,
              101,
              120,
              101,
              99,
              117,
              116,
              101,
              40,
              80,
              103,
              83,
              116,
              97,
              116,
              101,
              109,
              101,
              110,
              116,
              46,
              106,
              97,
              118,
              97,
              58,
              51,
              54,
              57,
              41,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              111,
              114,
              103,
              46,
              112,
              111,
              115,
              116,
              103,
              114,
              101,
              115,
              113,
              108,
              46,
              106,
              100,
              98,
              99,
              46,
              80,
              103,
              80,
              114,
              101,
              112,
              97,
              114,
              101,
              100,
              83,
              116,
              97,
              116,
              101,
              109,
              101,
              110,
              116,
              46,
              101,
              120,
              101,
              99,
              117,
              116,
              101,
              87,
              105,
              116,
              104,
              70,
              108,
              97,
              103,
              115,
              40,
              80,
              103,
              80,
              114,
              101,
              112,
              97,
              114,
              101,
              100,
              83,
              116,
              97,
              116,
              101,
              109,
              101,
              110,
              116,
              46,
              106,
              97,
              118,
              97,
              58,
              49,
              53,
              51,
              41,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              111,
              114,
              103,
              46,
              112,
              111,
              115,
              116,
              103,
              114,
              101,
              115,
              113,
              108,
              46,
              106,
              100,
              98,
              99,
              46,
              80,
              103,
              80,
              114,
              101,
              112,
              97,
              114,
              101,
              100,
              83,
              116,
              97,
              116,
              101,
              109,
              101,
              110,
              116,
              46,
              101,
              120,
              101,
              99,
              117,
              116,
              101,
              81,
              117,
              101,
              114,
              121,
              40,
              80,
              103,
              80,
              114,
              101,
              112,
              97,
              114,
              101,
              100,
              83,
              116,
              97,
              116,
              101,
              109,
              101,
              110,
              116,
              46,
              106,
              97,
              118,
              97,
              58,
              49,
              48,
              51,
              41,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              122,
              97,
              113,
              46,
              119,
              115,
              120,
              46,
              99,
              100,
              101,
              46,
              97,
              112,
              108,
              105,
              107,
              46,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              105,
              110,
              103,
              46,
              114,
              101,
              97,
              100,
              101,
              114,
              46,
              65,
              98,
              115,
              116,
              114,
              97,
              99,
              116,
              68,
              66,
              82,
              101,
              97,
              100,
              101,
              114,
              46,
              114,
              117,
              110,
              83,
              113,
              108,
              40,
              65,
              98,
              115,
              116,
              114,
              97,
              99,
              116,
              68,
              66,
              82,
              101,
              97,
              100,
              101,
              114,
              46,
              106,
              97,
              118,
              97,
              58,
              52,
              57,
              41,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              122,
              97,
              113,
              46,
              119,
              115,
              120,
              46,
              99,
              100,
              101,
              46,
              97,
              112,
              108,
              105,
              107,
              46,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              105,
              110,
              103,
              46,
              114,
              101,
              97,
              100,
              101,
              114,
              46,
              65,
              98,
              115,
              116,
              114,
              97,
              99,
              116,
              68,
              66,
              82,
              101,
              97,
              100,
              101,
              114,
              46,
              114,
              117,
              110,
              40,
              65,
              98,
              115,
              116,
              114,
              97,
              99,
              116,
              68,
              66,
              82,
              101,
              97,
              100,
              101,
              114,
              46,
              106,
              97,
              118,
              97,
              58,
              52,
              50,
              41,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              106,
              97,
              118,
              97,
              46,
              98,
              97,
              115,
              101,
              47,
              106,
              97,
              118,
              97,
              46,
              108,
              97,
              110,
              103,
              46,
              84,
              104,
              114,
              101,
              97,
              100,
              46,
              114,
              117,
              110,
              40,
              84,
              104,
              114,
              101,
              97,
              100,
              46,
              106,
              97,
              118,
              97,
              58,
              56,
              50,
              57,
              41,
              10,
              10,
              35,
              53,
              32,
              87,
              101,
              114,
              121,
              102,
              105,
              107,
              97,
              99,
              106,
              97,
              47,
              84,
              97,
              98,
              101,
              108,
              97,
              95,
              50,
              64,
              122,
              97,
              100,
              97,
              110,
              105,
              101,
              95,
              50,
              10,
              82,
              69,
              65,
              68,
              69,
              82,
              58,
              32,
              111,
              114,
              103,
              46,
              112,
              111,
              115,
              116,
              103,
              114,
              101,
              115,
              113,
              108,
              46,
              117,
              116,
              105,
              108,
              46,
              80,
              83,
              81,
              76,
              69,
              120,
              99,
              101,
              112,
              116,
              105,
              111,
              110,
              58,
              32,
              69,
              82,
              82,
              79,
              82,
              58,
              32,
              114,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              32,
              34,
              122,
              97,
              100,
              97,
              110,
              105,
              101,
              95,
              50,
              46,
              84,
              97,
              98,
              101,
              108,
              97,
              95,
              50,
              34,
              32,
              100,
              111,
              101,
              115,
              32,
              110,
              111,
              116,
              32,
              101,
              120,
              105,
              115,
              116,
              10,
              32,
              32,
              80,
              111,
              115,
              105,
              116,
              105,
              111,
              110,
              58,
              32,
              49,
              55,
              53,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              111,
              114,
              103,
              46,
              112,
              111,
              115,
              116,
              103,
              114,
              101,
              115,
              113,
              108,
              46,
              99,
              111,
              114,
              101,
              46,
              118,
              51,
              46,
              81,
              117,
              101,
              114,
              121,
              69,
              120,
              101,
              99,
              117,
              116,
              111,
              114,
              73,
              109,
              112,
              108,
              46,
              114,
              101,
              99,
              101,
              105,
              118,
              101,
              69,
              114,
              114,
              111,
              114,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              40,
              81,
              117,
              101,
              114,
              121,
              69,
              120,
              101,
              99,
              117,
              116,
              111,
              114,
              73,
              109,
              112,
              108,
              46,
              106,
              97,
              118,
              97,
              58,
              50,
              53,
              51,
              50,
              41,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              111,
              114,
              103,
              46,
              112,
              111,
              115,
              116,
              103,
              114,
              101,
              115,
              113,
              108,
              46,
              99,
              111,
              114,
              101,
              46,
              118,
              51,
              46,
              81,
              117,
              101,
              114,
              121,
              69,
              120,
              101,
              99,
              117,
              116,
              111,
              114,
              73,
              109,
              112,
              108,
              46,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              82,
              101,
              115,
              117,
              108,
              116,
              115,
              40,
              81,
              117,
              101,
              114,
              121,
              69,
              120,
              101,
              99,
              117,
              116,
              111,
              114,
              73,
              109,
              112,
              108,
              46,
              106,
              97,
              118,
              97,
              58,
              50,
              50,
              54,
              55,
              41,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              111,
              114,
              103,
              46,
              112,
              111,
              115,
              116,
              103,
              114,
              101,
              115,
              113,
              108,
              46,
              99,
              111,
              114,
              101,
              46,
              118,
              51,
              46,
              81,
              117,
              101,
              114,
              121,
              69,
              120,
              101,
              99,
              117,
              116,
              111,
              114,
              73,
              109,
              112,
              108,
              46,
              101,
              120,
              101,
              99,
              117,
              116,
              101,
              40,
              81,
              117,
              101,
              114,
              121,
              69,
              120,
              101,
              99,
              117,
              116,
              111,
              114,
              73,
              109,
              112,
              108,
              46,
              106,
              97,
              118,
              97,
              58,
              51,
              49,
              50,
              41,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              111,
              114,
              103,
              46,
              112,
              111,
              115,
              116,
              103,
              114,
              101,
              115,
              113,
              108,
              46,
              106,
              100,
              98,
              99,
              46,
              80,
              103,
              83,
              116,
              97,
              116,
              101,
              109,
              101,
              110,
              116,
              46,
              101,
              120,
              101,
              99,
              117,
              116,
              101,
              73,
              110,
              116,
              101,
              114,
              110,
              97,
              108,
              40,
              80,
              103,
              83,
              116,
              97,
              116,
              101,
              109,
              101,
              110,
              116,
              46,
              106,
              97,
              118,
              97,
              58,
              52,
              52,
              56,
              41,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              111,
              114,
              103,
              46,
              112,
              111,
              115,
              116,
              103,
              114,
              101,
              115,
              113,
              108,
              46,
              106,
              100,
              98,
              99,
              46,
              80,
              103,
              83,
              116,
              97,
              116,
              101,
              109,
              101,
              110,
              116,
              46,
              101,
              120,
              101,
              99,
              117,
              116,
              101,
              40,
              80,
              103,
              83,
              116,
              97,
              116,
              101,
              109,
              101,
              110,
              116,
              46,
              106,
              97,
              118,
              97,
              58,
              51,
              54,
              57,
              41,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              111,
              114,
              103,
              46,
              112,
              111,
              115,
              116,
              103,
              114,
              101,
              115,
              113,
              108,
              46,
              106,
              100,
              98,
              99,
              46,
              80,
              103,
              80,
              114,
              101,
              112,
              97,
              114,
              101,
              100,
              83,
              116,
              97,
              116,
              101,
              109,
              101,
              110,
              116,
              46,
              101,
              120,
              101,
              99,
              117,
              116,
              101,
              87,
              105,
              116,
              104,
              70,
              108,
              97,
              103,
              115,
              40,
              80,
              103,
              80,
              114,
              101,
              112,
              97,
              114,
              101,
              100,
              83,
              116,
              97,
              116,
              101,
              109,
              101,
              110,
              116,
              46,
              106,
              97,
              118,
              97,
              58,
              49,
              53,
              51,
              41,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              111,
              114,
              103,
              46,
              112,
              111,
              115,
              116,
              103,
              114,
              101,
              115,
              113,
              108,
              46,
              106,
              100,
              98,
              99,
              46,
              80,
              103,
              80,
              114,
              101,
              112,
              97,
              114,
              101,
              100,
              83,
              116,
              97,
              116,
              101,
              109,
              101,
              110,
              116,
              46,
              101,
              120,
              101,
              99,
              117,
              116,
              101,
              81,
              117,
              101,
              114,
              121,
              40,
              80,
              103,
              80,
              114,
              101,
              112,
              97,
              114,
              101,
              100,
              83,
              116,
              97,
              116,
              101,
              109,
              101,
              110,
              116,
              46,
              106,
              97,
              118,
              97,
              58,
              49,
              48,
              51,
              41,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              122,
              97,
              113,
              46,
              119,
              115,
              120,
              46,
              99,
              100,
              101,
              46,
              97,
              112,
              108,
              105,
              107,
              46,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              105,
              110,
              103,
              46,
              114,
              101,
              97,
              100,
              101,
              114,
              46,
              65,
              98,
              115,
              116,
              114,
              97,
              99,
              116,
              68,
              66,
              82,
              101,
              97,
              100,
              101,
              114,
              46,
              114,
              117,
              110,
              83,
              113,
              108,
              40,
              65,
              98,
              115,
              116,
              114,
              97,
              99,
              116,
              68,
              66,
              82,
              101,
              97,
              100,
              101,
              114,
              46,
              106,
              97,
              118,
              97,
              58,
              52,
              57,
              41,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              122,
              97,
              113,
              46,
              119,
              115,
              120,
              46,
              99,
              100,
              101,
              46,
              97,
              112,
              108,
              105,
              107,
              46,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              105,
              110,
              103,
              46,
              114,
              101,
              97,
              100,
              101,
              114,
              46,
              65,
              98,
              115,
              116,
              114,
              97,
              99,
              116,
              68,
              66,
              82,
              101,
              97,
              100,
              101,
              114,
              46,
              114,
              117,
              110,
              40,
              65,
              98,
              115,
              116,
              114,
              97,
              99,
              116,
              68,
              66,
              82,
              101,
              97,
              100,
              101,
              114,
              46,
              106,
              97,
              118,
              97,
              58,
              52,
              50,
              41,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              106,
              97,
              118,
              97,
              46,
              98,
              97,
              115,
              101,
              47,
              106,
              97,
              118,
              97,
              46,
              108,
              97,
              110,
              103,
              46,
              84,
              104,
              114,
              101,
              97,
              100,
              46,
              114,
              117,
              110,
              40,
              84,
              104,
              114,
              101,
              97,
              100,
              46,
              106,
              97,
              118,
              97,
              58,
              56,
              50,
              57,
              41,
              10,
              10,
              35,
              56,
              32,
              75,
              111,
              112,
              105,
              111,
              119,
              97,
              110,
              105,
              101,
              47,
              84,
              97,
              98,
              101,
              108,
              97,
              95,
              50,
              64,
              122,
              97,
              100,
              97,
              110,
              105,
              101,
              95,
              50,
              10,
              87,
              82,
              73,
              84,
              69,
              82,
              58,
              32,
              106,
              97,
              118,
              97,
              46,
              108,
              97,
              110,
              103,
              46,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              69,
              120,
              99,
              101,
              112,
              116,
              105,
              111,
              110,
              58,
              32,
              77,
              111,
              118,
              101,
              65,
              110,
              100,
              67,
              111,
              109,
              109,
              105,
              116,
              32,
              99,
              97,
              108,
              108,
              40,
              41,
              32,
              102,
              97,
              105,
              108,
              101,
              100,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              122,
              97,
              113,
              46,
              119,
              115,
              120,
              46,
              99,
              100,
              101,
              46,
              97,
              112,
              108,
              105,
              107,
              46,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              105,
              110,
              103,
              46,
              119,
              114,
              105,
              116,
              101,
              114,
              46,
              109,
              117,
              108,
              116,
              105,
              46,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              46,
              65,
              98,
              115,
              116,
              114,
              97,
              99,
              116,
              77,
              117,
              108,
              116,
              105,
              80,
              71,
              87,
              114,
              105,
              116,
              101,
              114,
              46,
              101,
              120,
              101,
              99,
              117,
              116,
              101,
              77,
              111,
              118,
              101,
              65,
              110,
              100,
              67,
              111,
              109,
              109,
              105,
              116,
              40,
              65,
              98,
              115,
              116,
              114,
              97,
              99,
              116,
              77,
              117,
              108,
              116,
              105,
              80,
              71,
              87,
              114,
              105,
              116,
              101,
              114,
              46,
              106,
              97,
              118,
              97,
              58,
              51,
              50,
              55,
              41,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              122,
              97,
              113,
              46,
              119,
              115,
              120,
              46,
              99,
              100,
              101,
              46,
              97,
              112,
              108,
              105,
              107,
              46,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              105,
              110,
              103,
              46,
              119,
              114,
              105,
              116,
              101,
              114,
              46,
              109,
              117,
              108,
              116,
              105,
              46,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              46,
              87,
              114,
              105,
              116,
              101,
              114,
              77,
              117,
              108,
              116,
              105,
              80,
              71,
              67,
              111,
              112,
              121,
              46,
              105,
              110,
              115,
              101,
              114,
              116,
              66,
              97,
              116,
              99,
              104,
              40,
              87,
              114,
              105,
              116,
              101,
              114,
              77,
              117,
              108,
              116,
              105,
              80,
              71,
              67,
              111,
              112,
              121,
              46,
              106,
              97,
              118,
              97,
              58,
              49,
              53,
              51,
              41,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              122,
              97,
              113,
              46,
              119,
              115,
              120,
              46,
              99,
              100,
              101,
              46,
              97,
              112,
              108,
              105,
              107,
              46,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              105,
              110,
              103,
              46,
              119,
              114,
              105,
              116,
              101,
              114,
              46,
              109,
              117,
              108,
              116,
              105,
              46,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              46,
              65,
              98,
              115,
              116,
              114,
              97,
              99,
              116,
              77,
              117,
              108,
              116,
              105,
              80,
              71,
              87,
              114,
              105,
              116,
              101,
              114,
              46,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              82,
              111,
              119,
              115,
              40,
              65,
              98,
              115,
              116,
              114,
              97,
              99,
              116,
              77,
              117,
              108,
              116,
              105,
              80,
              71,
              87,
              114,
              105,
              116,
              101,
              114,
              46,
              106,
              97,
              118,
              97,
              58,
              49,
              56,
              56,
              41,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              122,
              97,
              113,
              46,
              119,
              115,
              120,
              46,
              99,
              100,
              101,
              46,
              97,
              112,
              108,
              105,
              107,
              46,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              105,
              110,
              103,
              46,
              119,
              114,
              105,
              116,
              101,
              114,
              46,
              109,
              117,
              108,
              116,
              105,
              46,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              46,
              87,
              114,
              105,
              116,
              101,
              114,
              77,
              117,
              108,
              116,
              105,
              80,
              71,
              67,
              111,
              112,
              121,
              46,
              114,
              117,
              110,
              40,
              87,
              114,
              105,
              116,
              101,
              114,
              77,
              117,
              108,
              116,
              105,
              80,
              71,
              67,
              111,
              112,
              121,
              46,
              106,
              97,
              118,
              97,
              58,
              49,
              51,
              48,
              41,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              106,
              97,
              118,
              97,
              46,
              98,
              97,
              115,
              101,
              47,
              106,
              97,
              118,
              97,
              46,
              108,
              97,
              110,
              103,
              46,
              84,
              104,
              114,
              101,
              97,
              100,
              46,
              114,
              117,
              110,
              40,
              84,
              104,
              114,
              101,
              97,
              100,
              46,
              106,
              97,
              118,
              97,
              58,
              56,
              50,
              57,
              41,
              10,
              67,
              97,
              117,
              115,
              101,
              100,
              32,
              98,
              121,
              58,
              32,
              106,
              97,
              118,
              97,
              46,
              108,
              97,
              110,
              103,
              46,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              69,
              120,
              99,
              101,
              112,
              116,
              105,
              111,
              110,
              58,
              32,
              77,
              111,
              118,
              101,
              65,
              110,
              100,
              67,
              111,
              109,
              109,
              105,
              116,
              32,
              102,
              97,
              105,
              108,
              101,
              100,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              122,
              97,
              113,
              46,
              119,
              115,
              120,
              46,
              99,
              100,
              101,
              46,
              97,
              112,
              108,
              105,
              107,
              46,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              105,
              110,
              103,
              46,
              119,
              114,
              105,
              116,
              101,
              114,
              46,
              109,
              117,
              108,
              116,
              105,
              46,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              46,
              65,
              98,
              115,
              116,
              114,
              97,
              99,
              116,
              77,
              117,
              108,
              116,
              105,
              80,
              71,
              87,
              114,
              105,
              116,
              101,
              114,
              46,
              101,
              120,
              101,
              99,
              117,
              116,
              101,
              77,
              111,
              118,
              101,
              65,
              110,
              100,
              67,
              111,
              109,
              109,
              105,
              116,
              40,
              65,
              98,
              115,
              116,
              114,
              97,
              99,
              116,
              77,
              117,
              108,
              116,
              105,
              80,
              71,
              87,
              114,
              105,
              116,
              101,
              114,
              46,
              106,
              97,
              118,
              97,
              58,
              51,
              50,
              51,
              41,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              46,
              46,
              46,
              32,
              52,
              32,
              109,
              111,
              114,
              101,
              10,
              67,
              97,
              117,
              115,
              101,
              100,
              32,
              98,
              121,
              58,
              32,
              111,
              114,
              103,
              46,
              112,
              111,
              115,
              116,
              103,
              114,
              101,
              115,
              113,
              108,
              46,
              117,
              116,
              105,
              108,
              46,
              80,
              83,
              81,
              76,
              69,
              120,
              99,
              101,
              112,
              116,
              105,
              111,
              110,
              58,
              32,
              69,
              82,
              82,
              79,
              82,
              58,
              32,
              110,
              117,
              108,
              108,
              32,
              118,
              97,
              108,
              117,
              101,
              32,
              105,
              110,
              32,
              99,
              111,
              108,
              117,
              109,
              110,
              32,
              34,
              99,
              111,
              108,
              117,
              109,
              110,
              95,
              54,
              34,
              32,
              111,
              102,
              32,
              114,
              101,
              108,
              97,
              116,
              105,
              111,
              110,
              32,
              34,
              99,
              111,
              108,
              117,
              109,
              110,
              95,
              51,
              34,
              32,
              118,
              105,
              111,
              108,
              97,
              116,
              101,
              115,
              32,
              110,
              111,
              116,
              45,
              110,
              117,
              108,
              108,
              32,
              99,
              111,
              110,
              115,
              116,
              114,
              97,
              105,
              110,
              116,
              10,
              32,
              32,
              68,
              101,
              116,
              97,
              105,
              108,
              58,
              32,
              70,
              97,
              105,
              108,
              105,
              110,
              103,
              32,
              114,
              111,
              119,
              32,
              99,
              111,
              110,
              116,
              97,
              105,
              110,
              115,
              32,
              40,
              49,
              51,
              57,
              49,
              57,
              55,
              44,
              32,
              50,
              48,
              50,
              53,
              45,
              48,
              54,
              45,
              50,
              54,
              32,
              49,
              57,
              58,
              51,
              50,
              58,
              50,
              53,
              46,
              57,
              56,
              57,
              50,
              49,
              53,
              44,
              32,
              50,
              53,
              48,
              48,
              56,
              54,
              44,
              32,
              50,
              53,
              52,
              54,
              53,
              53,
              44,
              32,
              53,
              44,
              32,
              110,
              117,
              108,
              108,
              44,
              32,
              50,
              48,
              50,
              53,
              45,
              48,
              54,
              45,
              50,
              54,
              32,
              49,
              57,
              58,
              51,
              50,
              58,
              51,
              53,
              46,
              48,
              56,
              55,
              44,
              32,
              50,
              46,
              49,
              54,
              46,
              56,
              52,
              48,
              46,
              49,
              46,
              49,
              49,
              51,
              56,
              56,
              51,
              46,
              51,
              46,
              52,
              52,
              50,
              52,
              46,
              55,
              46,
              50,
              54,
              46,
              49,
              44,
              32,
              55,
              50,
              50,
              48,
              44,
              32,
              49,
              44,
              32,
              49,
              54,
              52,
              49,
              49,
              57,
              49,
              44,
              32,
              50,
              55,
              52,
              50,
              49,
              57,
              44,
              32,
              50,
              48,
              50,
              53,
              45,
              48,
              54,
              45,
              50,
              55,
              32,
              48,
              56,
              58,
              50,
              48,
              58,
              48,
              57,
              46,
              55,
              54,
              56,
              55,
              51,
              56,
              44,
              32,
              50,
              48,
              50,
              53,
              45,
              48,
              54,
              45,
              50,
              55,
              32,
              48,
              56,
              58,
              50,
              48,
              58,
              48,
              57,
              46,
              55,
              54,
              56,
              55,
              51,
              56,
              44,
              32,
              83,
              89,
              83,
              95,
              90,
              69,
              87,
              78,
              44,
              32,
              110,
              117,
              108,
              108,
              41,
              46,
              10,
              32,
              32,
              87,
              104,
              101,
              114,
              101,
              58,
              32,
              83,
              81,
              76,
              32,
              115,
              116,
              97,
              116,
              101,
              109,
              101,
              110,
              116,
              32,
              34,
              73,
              78,
              83,
              69,
              82,
              84,
              32,
              73,
              78,
              84,
              79,
              32,
              115,
              99,
              104,
              101,
              109,
              97,
              95,
              110,
              97,
              109,
              101,
              46,
              116,
              97,
              98,
              101,
              108,
              97,
              95,
              50,
              40,
              99,
              111,
              108,
              117,
              109,
              110,
              95,
              49,
              44,
              32,
              99,
              111,
              108,
              117,
              109,
              110,
              95,
              50,
              44,
              32,
              99,
              111,
              108,
              117,
              109,
              110,
              95,
              51,
              44,
              32,
              99,
              111,
              108,
              117,
              109,
              110,
              95,
              52,
              44,
              32,
              99,
              111,
              108,
              117,
              109,
              110,
              95,
              53,
              44,
              32,
              99,
              111,
              108,
              117,
              109,
              110,
              95,
              54,
              44,
              32,
              99,
              111,
              108,
              117,
              109,
              110,
              95,
              55,
              44,
              32,
              99,
              111,
              108,
              117,
              109,
              110,
              95,
              56,
              44,
              32,
              99,
              111,
              108,
              117,
              109,
              110,
              95,
              57,
              44,
              32,
              99,
              111,
              108,
              117,
              109,
              110,
              95,
              49,
              48,
              44,
              32,
              99,
              111,
              108,
              117,
              109,
              110,
              95,
              49,
              49,
              44,
              32,
              99,
              111,
              108,
              117,
              109,
              110,
              95,
              49,
              50,
              44,
              32,
              99,
              111,
              108,
              117,
              109,
              110,
              95,
              49,
              51,
              41,
              32,
              83,
              69,
              76,
              69,
              67,
              84,
              32,
              99,
              111,
              108,
              117,
              109,
              110,
              95,
              49,
              44,
              32,
              99,
              111,
              108,
              117,
              109,
              110,
              95,
              50,
              44,
              32,
              99,
              111,
              108,
              117,
              109,
              110,
              95,
              51,
              44,
              32,
              99,
              111,
              108,
              117,
              109,
              110,
              95,
              52,
              44,
              32,
              99,
              111,
              108,
              117,
              109,
              110,
              95,
              53,
              44,
              32,
              99,
              111,
              108,
              117,
              109,
              110,
              95,
              54,
              44,
              32,
              99,
              111,
              108,
              117,
              109,
              110,
              95,
              55,
              44,
              32,
              99,
              111,
              108,
              117,
              109,
              110,
              95,
              56,
              44,
              32,
              99,
              111,
              108,
              117,
              109,
              110,
              95,
              57,
              44,
              32,
              99,
              111,
              108,
              117,
              109,
              110,
              95,
              49,
              48,
              44,
              32,
              99,
              111,
              108,
              117,
              109,
              110,
              95,
              49,
              49,
              44,
              32,
              99,
              111,
              108,
              117,
              109,
              110,
              95,
              49,
              50,
              44,
              32,
              99,
              111,
              108,
              117,
              109,
              110,
              95,
              49,
              51,
              32,
              70,
              82,
              79,
              77,
              32,
              116,
              101,
              109,
              112,
              95,
              116,
              97,
              98,
              108,
              101,
              95,
              110,
              97,
              109,
              101,
              32,
              79,
              78,
              32,
              67,
              79,
              78,
              70,
              76,
              73,
              67,
              84,
              40,
              99,
              111,
              108,
              117,
              109,
              110,
              95,
              49,
              41,
              32,
              68,
              79,
              32,
              85,
              80,
              68,
              65,
              84,
              69,
              32,
              83,
              69,
              84,
              32,
              99,
              111,
              108,
              117,
              109,
              110,
              95,
              54,
              32,
              32,
              61,
              32,
              69,
              88,
              67,
              76,
              85,
              68,
              69,
              68,
              46,
              99,
              111,
              108,
              117,
              109,
              110,
              95,
              54,
              44,
              32,
              99,
              111,
              108,
              117,
              109,
              110,
              95,
              51,
              32,
              32,
              61,
              32,
              69,
              88,
              67,
              76,
              85,
              68,
              69,
              68,
              46,
              99,
              111,
              108,
              117,
              109,
              110,
              95,
              51,
              44,
              32,
              99,
              111,
              108,
              117,
              109,
              110,
              95,
              52,
              32,
              32,
              61,
              32,
              69,
              88,
              67,
              76,
              85,
              68,
              69,
              68,
              46,
              99,
              111,
              108,
              117,
              109,
              110,
              95,
              52,
              44,
              32,
              99,
              111,
              108,
              117,
              109,
              110,
              95,
              49,
              50,
              32,
              61,
              32,
              69,
              88,
              67,
              76,
              85,
              68,
              69,
              68,
              46,
              99,
              111,
              108,
              117,
              109,
              110,
              95,
              49,
              50,
              44,
              32,
              99,
              111,
              108,
              117,
              109,
              110,
              95,
              49,
              49,
              32,
              61,
              32,
              69,
              88,
              67,
              76,
              85,
              68,
              69,
              68,
              46,
              99,
              111,
              108,
              117,
              109,
              110,
              95,
              49,
              49,
              44,
              32,
              99,
              111,
              108,
              117,
              109,
              110,
              95,
              49,
              51,
              32,
              61,
              32,
              69,
              88,
              67,
              76,
              85,
              68,
              69,
              68,
              46,
              99,
              111,
              108,
              117,
              109,
              110,
              95,
              49,
              51,
              44,
              32,
              99,
              111,
              108,
              117,
              109,
              110,
              95,
              57,
              32,
              32,
              61,
              32,
              69,
              88,
              67,
              76,
              85,
              68,
              69,
              68,
              46,
              99,
              111,
              108,
              117,
              109,
              110,
              95,
              57,
              44,
              32,
              99,
              111,
              108,
              117,
              109,
              110,
              95,
              49,
              48,
              32,
              61,
              32,
              69,
              88,
              67,
              76,
              85,
              68,
              69,
              68,
              46,
              99,
              111,
              108,
              117,
              109,
              110,
              95,
              49,
              48,
              44,
              32,
              99,
              111,
              108,
              117,
              109,
              110,
              95,
              53,
              32,
              32,
              61,
              32,
              69,
              88,
              67,
              76,
              85,
              68,
              69,
              68,
              46,
              99,
              111,
              108,
              117,
              109,
              110,
              95,
              53,
              44,
              32,
              99,
              111,
              108,
              117,
              109,
              110,
              95,
              50,
              32,
              32,
              61,
              32,
              69,
              88,
              67,
              76,
              85,
              68,
              69,
              68,
              46,
              99,
              111,
              108,
              117,
              109,
              110,
              95,
              50,
              44,
              32,
              99,
              111,
              108,
              117,
              109,
              110,
              95,
              56,
              32,
              32,
              61,
              32,
              69,
              88,
              67,
              76,
              85,
              68,
              69,
              68,
              46,
              99,
              111,
              108,
              117,
              109,
              110,
              95,
              56,
              44,
              32,
              99,
              111,
              108,
              117,
              109,
              110,
              95,
              55,
              32,
              32,
              61,
              32,
              69,
              88,
              67,
              76,
              85,
              68,
              69,
              68,
              46,
              99,
              111,
              108,
              117,
              109,
              110,
              95,
              55,
              34,
              10,
              80,
              76,
              47,
              112,
              103,
              83,
              81,
              76,
              32,
              102,
              117,
              110,
              99,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              108,
              105,
              110,
              101,
              95,
              99,
              111,
              100,
              101,
              95,
              98,
              108,
              111,
              99,
              107,
              32,
              108,
              105,
              110,
              101,
              32,
              52,
              32,
              97,
              116,
              32,
              83,
              81,
              76,
              32,
              115,
              116,
              97,
              116,
              101,
              109,
              101,
              110,
              116,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              111,
              114,
              103,
              46,
              112,
              111,
              115,
              116,
              103,
              114,
              101,
              115,
              113,
              108,
              46,
              99,
              111,
              114,
              101,
              46,
              118,
              51,
              46,
              81,
              117,
              101,
              114,
              121,
              69,
              120,
              101,
              99,
              117,
              116,
              111,
              114,
              73,
              109,
              112,
              108,
              46,
              114,
              101,
              99,
              101,
              105,
              118,
              101,
              69,
              114,
              114,
              111,
              114,
              82,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              40,
              81,
              117,
              101,
              114,
              121,
              69,
              120,
              101,
              99,
              117,
              116,
              111,
              114,
              73,
              109,
              112,
              108,
              46,
              106,
              97,
              118,
              97,
              58,
              50,
              53,
              51,
              50,
              41,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              111,
              114,
              103,
              46,
              112,
              111,
              115,
              116,
              103,
              114,
              101,
              115,
              113,
              108,
              46,
              99,
              111,
              114,
              101,
              46,
              118,
              51,
              46,
              81,
              117,
              101,
              114,
              121,
              69,
              120,
              101,
              99,
              117,
              116,
              111,
              114,
              73,
              109,
              112,
              108,
              46,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              82,
              101,
              115,
              117,
              108,
              116,
              115,
              40,
              81,
              117,
              101,
              114,
              121,
              69,
              120,
              101,
              99,
              117,
              116,
              111,
              114,
              73,
              109,
              112,
              108,
              46,
              106,
              97,
              118,
              97,
              58,
              50,
              50,
              54,
              55,
              41,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              111,
              114,
              103,
              46,
              112,
              111,
              115,
              116,
              103,
              114,
              101,
              115,
              113,
              108,
              46,
              99,
              111,
              114,
              101,
              46,
              118,
              51,
              46,
              81,
              117,
              101,
              114,
              121,
              69,
              120,
              101,
              99,
              117,
              116,
              111,
              114,
              73,
              109,
              112,
              108,
              46,
              101,
              120,
              101,
              99,
              117,
              116,
              101,
              40,
              81,
              117,
              101,
              114,
              121,
              69,
              120,
              101,
              99,
              117,
              116,
              111,
              114,
              73,
              109,
              112,
              108,
              46,
              106,
              97,
              118,
              97,
              58,
              51,
              49,
              50,
              41,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              111,
              114,
              103,
              46,
              112,
              111,
              115,
              116,
              103,
              114,
              101,
              115,
              113,
              108,
              46,
              106,
              100,
              98,
              99,
              46,
              80,
              103,
              83,
              116,
              97,
              116,
              101,
              109,
              101,
              110,
              116,
              46,
              101,
              120,
              101,
              99,
              117,
              116,
              101,
              73,
              110,
              116,
              101,
              114,
              110,
              97,
              108,
              40,
              80,
              103,
              83,
              116,
              97,
              116,
              101,
              109,
              101,
              110,
              116,
              46,
              106,
              97,
              118,
              97,
              58,
              52,
              52,
              56,
              41,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              111,
              114,
              103,
              46,
              112,
              111,
              115,
              116,
              103,
              114,
              101,
              115,
              113,
              108,
              46,
              106,
              100,
              98,
              99,
              46,
              80,
              103,
              83,
              116,
              97,
              116,
              101,
              109,
              101,
              110,
              116,
              46,
              101,
              120,
              101,
              99,
              117,
              116,
              101,
              40,
              80,
              103,
              83,
              116,
              97,
              116,
              101,
              109,
              101,
              110,
              116,
              46,
              106,
              97,
              118,
              97,
              58,
              51,
              54,
              57,
              41,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              111,
              114,
              103,
              46,
              112,
              111,
              115,
              116,
              103,
              114,
              101,
              115,
              113,
              108,
              46,
              106,
              100,
              98,
              99,
              46,
              80,
              103,
              83,
              116,
              97,
              116,
              101,
              109,
              101,
              110,
              116,
              46,
              101,
              120,
              101,
              99,
              117,
              116,
              101,
              87,
              105,
              116,
              104,
              70,
              108,
              97,
              103,
              115,
              40,
              80,
              103,
              83,
              116,
              97,
              116,
              101,
              109,
              101,
              110,
              116,
              46,
              106,
              97,
              118,
              97,
              58,
              51,
              49,
              48,
              41,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              111,
              114,
              103,
              46,
              112,
              111,
              115,
              116,
              103,
              114,
              101,
              115,
              113,
              108,
              46,
              106,
              100,
              98,
              99,
              46,
              80,
              103,
              83,
              116,
              97,
              116,
              101,
              109,
              101,
              110,
              116,
              46,
              101,
              120,
              101,
              99,
              117,
              116,
              101,
              67,
              97,
              99,
              104,
              101,
              100,
              83,
              113,
              108,
              40,
              80,
              103,
              83,
              116,
              97,
              116,
              101,
              109,
              101,
              110,
              116,
              46,
              106,
              97,
              118,
              97,
              58,
              50,
              57,
              54,
              41,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              111,
              114,
              103,
              46,
              112,
              111,
              115,
              116,
              103,
              114,
              101,
              115,
              113,
              108,
              46,
              106,
              100,
              98,
              99,
              46,
              80,
              103,
              83,
              116,
              97,
              116,
              101,
              109,
              101,
              110,
              116,
              46,
              101,
              120,
              101,
              99,
              117,
              116,
              101,
              87,
              105,
              116,
              104,
              70,
              108,
              97,
              103,
              115,
              40,
              80,
              103,
              83,
              116,
              97,
              116,
              101,
              109,
              101,
              110,
              116,
              46,
              106,
              97,
              118,
              97,
              58,
              50,
              55,
              51,
              41,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              111,
              114,
              103,
              46,
              112,
              111,
              115,
              116,
              103,
              114,
              101,
              115,
              113,
              108,
              46,
              106,
              100,
              98,
              99,
              46,
              80,
              103,
              83,
              116,
              97,
              116,
              101,
              109,
              101,
              110,
              116,
              46,
              101,
              120,
              101,
              99,
              117,
              116,
              101,
              40,
              80,
              103,
              83,
              116,
              97,
              116,
              101,
              109,
              101,
              110,
              116,
              46,
              106,
              97,
              118,
              97,
              58,
              50,
              54,
              56,
              41,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              122,
              97,
              113,
              46,
              119,
              115,
              120,
              46,
              99,
              100,
              101,
              46,
              97,
              112,
              108,
              105,
              107,
              46,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              105,
              110,
              103,
              46,
              119,
              114,
              105,
              116,
              101,
              114,
              46,
              109,
              117,
              108,
              116,
              105,
              46,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              46,
              65,
              98,
              115,
              116,
              114,
              97,
              99,
              116,
              77,
              117,
              108,
              116,
              105,
              80,
              71,
              87,
              114,
              105,
              116,
              101,
              114,
              46,
              109,
              111,
              118,
              101,
              68,
              97,
              116,
              97,
              70,
              114,
              111,
              109,
              71,
              116,
              116,
              40,
              65,
              98,
              115,
              116,
              114,
              97,
              99,
              116,
              77,
              117,
              108,
              116,
              105,
              80,
              71,
              87,
              114,
              105,
              116,
              101,
              114,
              46,
              106,
              97,
              118,
              97,
              58,
              49,
              52,
              55,
              41,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              122,
              97,
              113,
              46,
              119,
              115,
              120,
              46,
              99,
              100,
              101,
              46,
              97,
              112,
              108,
              105,
              107,
              46,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              105,
              110,
              103,
              46,
              119,
              114,
              105,
              116,
              101,
              114,
              46,
              109,
              117,
              108,
              116,
              105,
              46,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              46,
              65,
              98,
              115,
              116,
              114,
              97,
              99,
              116,
              77,
              117,
              108,
              116,
              105,
              80,
              71,
              87,
              114,
              105,
              116,
              101,
              114,
              46,
              109,
              111,
              118,
              101,
              65,
              110,
              100,
              67,
              111,
              109,
              109,
              105,
              116,
              84,
              111,
              80,
              71,
              40,
              65,
              98,
              115,
              116,
              114,
              97,
              99,
              116,
              77,
              117,
              108,
              116,
              105,
              80,
              71,
              87,
              114,
              105,
              116,
              101,
              114,
              46,
              106,
              97,
              118,
              97,
              58,
              50,
              57,
              54,
              41,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              122,
              97,
              113,
              46,
              119,
              115,
              120,
              46,
              99,
              100,
              101,
              46,
              97,
              112,
              108,
              105,
              107,
              46,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              105,
              110,
              103,
              46,
              119,
              114,
              105,
              116,
              101,
              114,
              46,
              109,
              117,
              108,
              116,
              105,
              46,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              46,
              65,
              98,
              115,
              116,
              114,
              97,
              99,
              116,
              77,
              117,
              108,
              116,
              105,
              80,
              71,
              87,
              114,
              105,
              116,
              101,
              114,
              36,
              77,
              111,
              118,
              101,
              65,
              110,
              100,
              67,
              111,
              109,
              109,
              105,
              116,
              67,
              97,
              108,
              108,
              97,
              98,
              108,
              101,
              46,
              99,
              97,
              108,
              108,
              40,
              65,
              98,
              115,
              116,
              114,
              97,
              99,
              116,
              77,
              117,
              108,
              116,
              105,
              80,
              71,
              87,
              114,
              105,
              116,
              101,
              114,
              46,
              106,
              97,
              118,
              97,
              58,
              52,
              49,
              53,
              41,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              116,
              32,
              122,
              97,
              113,
              46,
              119,
              115,
              120,
              46,
              99,
              100,
              101,
              46,
              97,
              112,
              108,
              105,
              107,
              46,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              105,
              110,
              103,
              46,
              119,
              114,
              105,
              116,
              101,
              114,
              46,
              109,
              117,
              108,
              116,
              105,
              46,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              46,
              65,
              98,
              115,
              116,
              114,
              97,
              99,
              116,
              77,
              117,
              108,
              116,
              105,
              80,
              71,
              87,
              114,
              105,
              116,
              101,
              114,
              46,
              101,
              120,
              101,
              99,
              117,
              116,
              101,
              77,
              111,
              118,
              101,
              65,
              110,
              100,
              67,
              111,
              109,
              109,
              105,
              116,
              40,
              65,
              98,
              115,
              116,
              114,
              97,
              99,
              116,
              77,
              117,
              108,
              116,
              105,
              80,
              71,
              87,
              114,
              105,
              116,
              101,
              114,
              46,
              106,
              97,
              118,
              97,
              58,
              51,
              50,
              49,
              41,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              46,
              46,
              46,
              32,
              52,
              32,
              109,
              111,
              114,
              101
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 8555
        },
        "id": "e93e4f3e-18b8-44fe-bd5b-fea9e0c846ad",
        "assertions": [
          {
            "assertion": "Valid HTTP Status Codes",
            "skipped": false
          },
          {
            "assertion": "Pierwsza linia",
            "skipped": false
          },
          {
            "assertion": "Naglowek",
            "skipped": false
          },
          {
            "assertion": "Kod zadania",
            "skipped": false
          },
          {
            "assertion": "Podsumowanie",
            "skipped": false
          },
          {
            "assertion": "Brak \"FAILED\"",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 5,
              "test": "Brak \"FAILED\"",
              "message": "Znaleziono słowo 'FAILED' w całej odpowiedzi.",
              "stack": "AssertionError: Znaleziono słowo 'FAILED' w całej odpowiedzi.\n   at Object.eval sandbox-script.js:6:2)"
            }
          },
          {
            "assertion": "Brak \"Failures\"",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 6,
              "test": "Brak \"Failures\"",
              "message": "Znaleziono słowo 'Failures' w całej odpowiedzi.",
              "stack": "AssertionError: Znaleziono słowo 'Failures' w całej odpowiedzi.\n   at Object.eval sandbox-script.js:7:2)"
            }
          },
          {
            "assertion": "Brak błędów FAILED",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 7,
              "test": "Brak błędów FAILED",
              "message": "Znaleziono linie FAILED dla zadania zadanie_2",
              "stack": "AssertionError: Znaleziono linie FAILED dla zadania zadanie_2\n   at Object.eval sandbox-script.js:8:2)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "9fc38d97-3ac6-4b25-b099-6eb147aabb3c",
          "length": 3,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "ea7a2df6-6f64-479f-ac0a-5ffda8c576f1"
        },
        "item": {
          "id": "a02a0fe7-872f-4ae9-afb8-bceec80e8418",
          "name": "Odpowiedź-BRAK",
          "request": {
            "url": {
              "path": [
                "statusZadania"
              ],
              "host": [
                "{{BaseURL}}"
              ],
              "query": [
                {
                  "key": "kod",
                  "value": "zadanie_3"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d789b2ea-582f-4219-8ae2-00fd41f9709e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const body = pm.response.text().trim();",
                  "const kod = pm.request.url.query",
                  "    .find(p => p.key === \"kod\")?.value?.trim() || \"\";",
                  "",
                  "pm.test(\"Valid HTTP Status Codes\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Pierwsza linia\", () => pm.expect(body).to.include(\"Task summary Generated At\"));",
                  "pm.test(\"Naglowek\", () => pm.expect(body).to.include(\"|Kod                                                   |Status   |Cron                          |Start               |Koniec              |Ostatnie OK         |\"));",
                  "pm.test(\"Kod zadania\", () => pm.expect(body).to.include(\"|\" + kod));",
                  "pm.test(\"Podsumowanie\", () => pm.expect(body).to.include(\"Podsumowanie\"));",
                  "",
                  "// Ogólne asercje nieprzerywające dalszej logiki",
                  "if (body.includes(\"FAILED\")) {",
                  "    console.error(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                  "    pm.test(\"Brak \\\"FAILED\\\"\", () => {",
                  "        pm.expect.fail(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                  "    });",
                  "} else {",
                  "    pm.test(\"Brak \\\"FAILED\\\"\", () => pm.expect(true).to.be.true);",
                  "}",
                  "",
                  "if (body.includes(\"Failures\")) {",
                  "    console.error(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                  "    pm.test(\"Brak \\\"Failures\\\"\", () => {",
                  "        pm.expect.fail(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                  "    });",
                  "} else {",
                  "    pm.test(\"Brak \\\"Failures\\\"\", () => pm.expect(true).to.be.true);",
                  "}",
                  "",
                  "if (!body) {",
                  "    console.error(\"Odpowiedź serwera jest pusta. Przerywam wykonanie.\");",
                  "    pm.test(\"Brak treści w odpowiedzi serwera\", () => {",
                  "        pm.expect.fail(\"Brak treści w odpowiedzi serwera.\");",
                  "    });",
                  "    return;",
                  "}",
                  "",
                  "const linieOdpowiedzi = body.split('\\n');",
                  "",
                  "// Sprawdzenie linii z kodem zadania",
                  "const liniaZKodem = linieOdpowiedzi.find(linia => linia.includes(\"|\" + kod));",
                  "if (!liniaZKodem) {",
                  "    console.error(`Nie znaleziono linii zawierającej kod zadania: ${kod}`);",
                  "    pm.test(\"Linia z kodem zadania istnieje\", () => {",
                  "        pm.expect.fail(`Brak linii z kodem zadania: ${kod}`);",
                  "    });",
                  "    return;",
                  "}",
                  "",
                  "// Szczegółowe filtrowanie linii zgodnie z Groovy (SoapUI)",
                  "const liniaZsoon = linieOdpowiedzi.filter(linia => linia.includes('No information yet. Please try again soon!'));",
                  "const linieZFailed = linieOdpowiedzi.filter(linia => linia.includes('FAILED') && !linia.includes(kod));",
                  "const linieZFailures = linieOdpowiedzi.filter(linia => linia.includes('Failures'));",
                  "const linieZRunNew = linieOdpowiedzi.filter(linia => linia.includes('|RUNNING') || linia.includes('|NEW'));",
                  "",
                  "// Szczegóły błędów specjalnych",
                  "let linieZFailuresSpecjalne = [];",
                  "if (linieZFailures.length > 0) {",
                  "    linieZFailuresSpecjalne = linieOdpowiedzi.filter(linia =>",
                  "        linia.includes('#') ||",
                  "        linia.includes('MAIN:') ||",
                  "        linia.includes('READER:') ||",
                  "        linia.includes('Caused by:') ||",
                  "        linia.includes('WRITER:')",
                  "    );",
                  "}",
                  "",
                  "// Główna logika 1:1 zgodna z Groovy (SoapUI)",
                  "if (liniaZsoon.length === 1) {",
                  "    console.warn(`Należy ponowić sprawdzenie statusu zadania ${kod}`);",
                  "    pm.test(\"Brak komunikatu 'try again soon'\", () => {",
                  "        pm.expect.fail(`Znaleziono 'try again soon' dla zadania ${kod}`);",
                  "    });",
                  "",
                  "} else if (linieZRunNew.length > 0) {",
                  "    console.warn(`Nie wszystkie kroki zostały zakończone dla zadania ${kod}`);",
                  "    pm.test(\"Wszystkie kroki zakończone\", () => {",
                  "        pm.expect.fail(`Znaleziono kroki RUNNING/NEW dla zadania ${kod}`);",
                  "    });",
                  "",
                  "} else if (linieZFailed.length > 0) {",
                  "    if (linieZFailed.length === 1) {",
                  "        console.error(`Wystąpił błąd 'FAILED' dla zadania ${kod}:`);",
                  "        console.error(`      ${linieZFailed[0]}`);",
                  "    } else {",
                  "        console.error(`Wystąpiły błędy 'FAILED' dla zadania ${kod}:`);",
                  "        linieZFailed.forEach(linia => console.error(`      ${linia}`));",
                  "    }",
                  "",
                  "    // Szczegóły  (Failures)",
                  "    if (linieZFailuresSpecjalne.length > 0) {",
                  "        console.error(\"Szczegóły:\");",
                  "        linieZFailuresSpecjalne.forEach(linia => console.error(`      ${linia}`));",
                  "    }",
                  "",
                  "    // Zgłoszenie szczegółowego błędu jako failed test",
                  "    pm.test(\"Brak błędów FAILED\", () => {",
                  "        pm.expect.fail(`Znaleziono linie FAILED dla zadania ${kod}`);",
                  "    });",
                  "",
                  "} else {",
                  "    console.log(`Nie wystąpił błąd 'FAILED' dla zadania ${kod}`);",
                  "    pm.test(\"Brak błędów FAILED\", () => {",
                  "        pm.expect(true).to.be.true;",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "c5932503-417c-4bd8-873b-339df675fd01"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8089",
            "path": [
              "statusZadania"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "kod",
                "value": "zadanie_3"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5bfe71f9-1f5e-4294-a7a0-3f4e6b134030",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8089",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "67394e4d-c31d-4666-b91a-8dce67a02f74",
          "status": "BAD REQUEST",
          "code": 400,
          "header": [
            {
              "key": "Server",
              "value": "Werkzeug/3.1.3 Python/3.11.13"
            },
            {
              "key": "Date",
              "value": "Wed, 30 Jul 2025 09:19:30 GMT"
            },
            {
              "key": "Content-Type",
              "value": "text/plain; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "104"
            },
            {
              "key": "Connection",
              "value": "close"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              117,
              115,
              101,
              114,
              64,
              112,
              109,
              97,
              115,
              122,
              121,
              110,
              97,
              58,
              126,
              32,
              62,
              32,
              99,
              117,
              114,
              108,
              32,
              39,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              97,
              112,
              108,
              105,
              107,
              97,
              99,
              106,
              97,
              58,
              56,
              48,
              56,
              57,
              47,
              115,
              116,
              97,
              116,
              117,
              115,
              90,
              97,
              100,
              97,
              110,
              105,
              97,
              63,
              107,
              111,
              100,
              61,
              122,
              97,
              100,
              97,
              110,
              105,
              101,
              95,
              51,
              39,
              10,
              66,
              82,
              65,
              75,
              32,
              90,
              65,
              68,
              65,
              78,
              73,
              65,
              32,
              79,
              32,
              80,
              79,
              68,
              65,
              78,
              89,
              77,
              32,
              75,
              79,
              68,
              90,
              73,
              69
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 104
        },
        "id": "a02a0fe7-872f-4ae9-afb8-bceec80e8418",
        "assertions": [
          {
            "assertion": "Valid HTTP Status Codes",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Valid HTTP Status Codes",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "Pierwsza linia",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Pierwsza linia",
              "message": "expected 'user@pmaszyna:~ > curl \\'http://aplik…' to include 'Task summary Generated At'",
              "stack": "AssertionError: expected 'user@pmaszyna:~ > curl \\'http://aplik…' to include 'Task summary Generated At'\n   at Object.eval sandbox-script.js:2:3)"
            }
          },
          {
            "assertion": "Naglowek",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Naglowek",
              "message": "expected 'user@pmaszyna:~ > curl \\'http://aplik…' to include '|Kod                                 …'",
              "stack": "AssertionError: expected 'user@pmaszyna:~ > curl \\'http://aplik…' to include '|Kod                                 …'\n   at Object.eval sandbox-script.js:3:3)"
            }
          },
          {
            "assertion": "Kod zadania",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "Kod zadania",
              "message": "expected 'user@pmaszyna:~ > curl \\'http://aplik…' to include '|zadanie_3'",
              "stack": "AssertionError: expected 'user@pmaszyna:~ > curl \\'http://aplik…' to include '|zadanie_3'\n   at Object.eval sandbox-script.js:4:3)"
            }
          },
          {
            "assertion": "Podsumowanie",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 4,
              "test": "Podsumowanie",
              "message": "expected 'user@pmaszyna:~ > curl \\'http://aplik…' to include 'Podsumowanie'",
              "stack": "AssertionError: expected 'user@pmaszyna:~ > curl \\'http://aplik…' to include 'Podsumowanie'\n   at Object.eval sandbox-script.js:5:3)"
            }
          },
          {
            "assertion": "Brak \"FAILED\"",
            "skipped": false
          },
          {
            "assertion": "Brak \"Failures\"",
            "skipped": false
          },
          {
            "assertion": "Linia z kodem zadania istnieje",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 7,
              "test": "Linia z kodem zadania istnieje",
              "message": "Brak linii z kodem zadania: zadanie_3",
              "stack": "AssertionError: Brak linii z kodem zadania: zadanie_3\n   at Object.eval sandbox-script.js:8:3)"
            }
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 10747
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 5,
          "test": "Brak \"FAILED\"",
          "message": "Znaleziono słowo 'FAILED' w całej odpowiedzi.",
          "stack": "AssertionError: Znaleziono słowo 'FAILED' w całej odpowiedzi.\n   at Object.eval sandbox-script.js:6:2)",
          "checksum": "3728c3db1e54305069e505a7091113f3",
          "id": "206e3ef8-7edb-4291-9f42-ea7e4a19a929",
          "timestamp": 1753867170524,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 6,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:5 in test-script",
        "source": {
          "id": "e93e4f3e-18b8-44fe-bd5b-fea9e0c846ad",
          "name": "Odpowiedź-BŁĄD",
          "request": {
            "url": {
              "path": [
                "statusZadania"
              ],
              "host": [
                "{{BaseURL}}"
              ],
              "query": [
                {
                  "key": "kod",
                  "value": "zadanie_2"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "60b88e7c-b62b-420a-8cc5-23626d08d919",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const body = pm.response.text().trim();",
                  "const kod = pm.request.url.query",
                  "    .find(p => p.key === \"kod\")?.value?.trim() || \"\";",
                  "",
                  "pm.test(\"Valid HTTP Status Codes\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Pierwsza linia\", () => pm.expect(body).to.include(\"Task summary Generated At\"));",
                  "pm.test(\"Naglowek\", () => pm.expect(body).to.include(\"|Kod                                                   |Status   |Cron                          |Start               |Koniec              |Ostatnie OK         |\"));",
                  "pm.test(\"Kod zadania\", () => pm.expect(body).to.include(\"|\" + kod));",
                  "pm.test(\"Podsumowanie\", () => pm.expect(body).to.include(\"Podsumowanie\"));",
                  "",
                  "// Ogólne asercje nieprzerywające dalszej logiki",
                  "if (body.includes(\"FAILED\")) {",
                  "    console.error(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                  "    pm.test(\"Brak \\\"FAILED\\\"\", () => {",
                  "        pm.expect.fail(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                  "    });",
                  "} else {",
                  "    pm.test(\"Brak \\\"FAILED\\\"\", () => pm.expect(true).to.be.true);",
                  "}",
                  "",
                  "if (body.includes(\"Failures\")) {",
                  "    console.error(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                  "    pm.test(\"Brak \\\"Failures\\\"\", () => {",
                  "        pm.expect.fail(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                  "    });",
                  "} else {",
                  "    pm.test(\"Brak \\\"Failures\\\"\", () => pm.expect(true).to.be.true);",
                  "}",
                  "",
                  "if (!body) {",
                  "    console.error(\"Odpowiedź serwera jest pusta. Przerywam wykonanie.\");",
                  "    pm.test(\"Brak treści w odpowiedzi serwera\", () => {",
                  "        pm.expect.fail(\"Brak treści w odpowiedzi serwera.\");",
                  "    });",
                  "    return;",
                  "}",
                  "",
                  "const linieOdpowiedzi = body.split('\\n');",
                  "",
                  "// Sprawdzenie linii z kodem zadania",
                  "const liniaZKodem = linieOdpowiedzi.find(linia => linia.includes(\"|\" + kod));",
                  "if (!liniaZKodem) {",
                  "    console.error(`Nie znaleziono linii zawierającej kod zadania: ${kod}`);",
                  "    pm.test(\"Linia z kodem zadania istnieje\", () => {",
                  "        pm.expect.fail(`Brak linii z kodem zadania: ${kod}`);",
                  "    });",
                  "    return;",
                  "}",
                  "",
                  "// Szczegółowe filtrowanie linii zgodnie z Groovy (SoapUI)",
                  "const liniaZsoon = linieOdpowiedzi.filter(linia => linia.includes('No information yet. Please try again soon!'));",
                  "const linieZFailed = linieOdpowiedzi.filter(linia => linia.includes('FAILED') && !linia.includes(kod));",
                  "const linieZFailures = linieOdpowiedzi.filter(linia => linia.includes('Failures'));",
                  "const linieZRunNew = linieOdpowiedzi.filter(linia => linia.includes('|RUNNING') || linia.includes('|NEW'));",
                  "",
                  "// Szczegóły błędów specjalnych",
                  "let linieZFailuresSpecjalne = [];",
                  "if (linieZFailures.length > 0) {",
                  "    linieZFailuresSpecjalne = linieOdpowiedzi.filter(linia =>",
                  "        linia.includes('#') ||",
                  "        linia.includes('MAIN:') ||",
                  "        linia.includes('READER:') ||",
                  "        linia.includes('Caused by:') ||",
                  "        linia.includes('WRITER:')",
                  "    );",
                  "}",
                  "",
                  "// Główna logika 1:1 zgodna z Groovy (SoapUI)",
                  "if (liniaZsoon.length === 1) {",
                  "    console.warn(`Należy ponowić sprawdzenie statusu zadania ${kod}`);",
                  "    pm.test(\"Brak komunikatu 'try again soon'\", () => {",
                  "        pm.expect.fail(`Znaleziono 'try again soon' dla zadania ${kod}`);",
                  "    });",
                  "",
                  "} else if (linieZRunNew.length > 0) {",
                  "    console.warn(`Nie wszystkie kroki zostały zakończone dla zadania ${kod}`);",
                  "    pm.test(\"Wszystkie kroki zakończone\", () => {",
                  "        pm.expect.fail(`Znaleziono kroki RUNNING/NEW dla zadania ${kod}`);",
                  "    });",
                  "",
                  "} else if (linieZFailed.length > 0) {",
                  "    if (linieZFailed.length === 1) {",
                  "        console.error(`Wystąpił błąd 'FAILED' dla zadania ${kod}:`);",
                  "        console.error(`      ${linieZFailed[0]}`);",
                  "    } else {",
                  "        console.error(`Wystąpiły błędy 'FAILED' dla zadania ${kod}:`);",
                  "        linieZFailed.forEach(linia => console.error(`      ${linia}`));",
                  "    }",
                  "",
                  "    // Szczegóły  (Failures)",
                  "    if (linieZFailuresSpecjalne.length > 0) {",
                  "        console.error(\"Szczegóły:\");",
                  "        linieZFailuresSpecjalne.forEach(linia => console.error(`      ${linia}`));",
                  "    }",
                  "",
                  "    // Zgłoszenie szczegółowego błędu jako failed test",
                  "    pm.test(\"Brak błędów FAILED\", () => {",
                  "        pm.expect.fail(`Znaleziono linie FAILED dla zadania ${kod}`);",
                  "    });",
                  "",
                  "} else {",
                  "    console.log(`Nie wystąpił błąd 'FAILED' dla zadania ${kod}`);",
                  "    pm.test(\"Brak błędów FAILED\", () => {",
                  "        pm.expect(true).to.be.true;",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "08a014d5-2d49-4142-8016-2f8752fbf889"
              }
            }
          ]
        },
        "parent": {
          "id": "a96c8136-f56e-4c0a-b6ce-56b642bf4d58",
          "name": "Test Steps",
          "item": [
            {
              "id": "e1c974ec-065f-4041-a31f-061a1f7c7395",
              "name": "Odpowiedź-OK",
              "request": {
                "url": {
                  "path": [
                    "statusZadania"
                  ],
                  "host": [
                    "{{BaseURL}}"
                  ],
                  "query": [
                    {
                      "key": "kod",
                      "value": "zadanie_1"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5822a058-c62f-4899-84cf-94858c4322b2",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const body = pm.response.text().trim();",
                      "const kod = pm.request.url.query",
                      "    .find(p => p.key === \"kod\")?.value?.trim() || \"\";",
                      "",
                      "pm.test(\"Valid HTTP Status Codes\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Pierwsza linia\", () => pm.expect(body).to.include(\"Task summary Generated At\"));",
                      "pm.test(\"Naglowek\", () => pm.expect(body).to.include(\"|Kod                                                   |Status   |Cron                          |Start               |Koniec              |Ostatnie OK         |\"));",
                      "pm.test(\"Kod zadania\", () => pm.expect(body).to.include(\"|\" + kod));",
                      "pm.test(\"Podsumowanie\", () => pm.expect(body).to.include(\"Podsumowanie\"));",
                      "",
                      "// Ogólne asercje nieprzerywające dalszej logiki",
                      "if (body.includes(\"FAILED\")) {",
                      "    console.error(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                      "    pm.test(\"Brak \\\"FAILED\\\"\", () => {",
                      "        pm.expect.fail(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                      "    });",
                      "} else {",
                      "    pm.test(\"Brak \\\"FAILED\\\"\", () => pm.expect(true).to.be.true);",
                      "}",
                      "",
                      "if (body.includes(\"Failures\")) {",
                      "    console.error(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                      "    pm.test(\"Brak \\\"Failures\\\"\", () => {",
                      "        pm.expect.fail(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                      "    });",
                      "} else {",
                      "    pm.test(\"Brak \\\"Failures\\\"\", () => pm.expect(true).to.be.true);",
                      "}",
                      "",
                      "if (!body) {",
                      "    console.error(\"Odpowiedź serwera jest pusta. Przerywam wykonanie.\");",
                      "    pm.test(\"Brak treści w odpowiedzi serwera\", () => {",
                      "        pm.expect.fail(\"Brak treści w odpowiedzi serwera.\");",
                      "    });",
                      "    return;",
                      "}",
                      "",
                      "const linieOdpowiedzi = body.split('\\n');",
                      "",
                      "// Sprawdzenie linii z kodem zadania",
                      "const liniaZKodem = linieOdpowiedzi.find(linia => linia.includes(\"|\" + kod));",
                      "if (!liniaZKodem) {",
                      "    console.error(`Nie znaleziono linii zawierającej kod zadania: ${kod}`);",
                      "    pm.test(\"Linia z kodem zadania istnieje\", () => {",
                      "        pm.expect.fail(`Brak linii z kodem zadania: ${kod}`);",
                      "    });",
                      "    return;",
                      "}",
                      "",
                      "// Szczegółowe filtrowanie linii zgodnie z Groovy (SoapUI)",
                      "const liniaZsoon = linieOdpowiedzi.filter(linia => linia.includes('No information yet. Please try again soon!'));",
                      "const linieZFailed = linieOdpowiedzi.filter(linia => linia.includes('FAILED') && !linia.includes(kod));",
                      "const linieZFailures = linieOdpowiedzi.filter(linia => linia.includes('Failures'));",
                      "const linieZRunNew = linieOdpowiedzi.filter(linia => linia.includes('|RUNNING') || linia.includes('|NEW'));",
                      "",
                      "// Szczegóły błędów specjalnych",
                      "let linieZFailuresSpecjalne = [];",
                      "if (linieZFailures.length > 0) {",
                      "    linieZFailuresSpecjalne = linieOdpowiedzi.filter(linia =>",
                      "        linia.includes('#') ||",
                      "        linia.includes('MAIN:') ||",
                      "        linia.includes('READER:') ||",
                      "        linia.includes('Caused by:') ||",
                      "        linia.includes('WRITER:')",
                      "    );",
                      "}",
                      "",
                      "// Główna logika 1:1 zgodna z Groovy (SoapUI)",
                      "if (liniaZsoon.length === 1) {",
                      "    console.warn(`Należy ponowić sprawdzenie statusu zadania ${kod}`);",
                      "    pm.test(\"Brak komunikatu 'try again soon'\", () => {",
                      "        pm.expect.fail(`Znaleziono 'try again soon' dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else if (linieZRunNew.length > 0) {",
                      "    console.warn(`Nie wszystkie kroki zostały zakończone dla zadania ${kod}`);",
                      "    pm.test(\"Wszystkie kroki zakończone\", () => {",
                      "        pm.expect.fail(`Znaleziono kroki RUNNING/NEW dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else if (linieZFailed.length > 0) {",
                      "    if (linieZFailed.length === 1) {",
                      "        console.error(`Wystąpił błąd 'FAILED' dla zadania ${kod}:`);",
                      "        console.error(`      ${linieZFailed[0]}`);",
                      "    } else {",
                      "        console.error(`Wystąpiły błędy 'FAILED' dla zadania ${kod}:`);",
                      "        linieZFailed.forEach(linia => console.error(`      ${linia}`));",
                      "    }",
                      "",
                      "    // Szczegóły  (Failures)",
                      "    if (linieZFailuresSpecjalne.length > 0) {",
                      "        console.error(\"Szczegóły:\");",
                      "        linieZFailuresSpecjalne.forEach(linia => console.error(`      ${linia}`));",
                      "    }",
                      "",
                      "    // Zgłoszenie szczegółowego błędu jako failed test",
                      "    pm.test(\"Brak błędów FAILED\", () => {",
                      "        pm.expect.fail(`Znaleziono linie FAILED dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else {",
                      "    console.log(`Nie wystąpił błąd 'FAILED' dla zadania ${kod}`);",
                      "    pm.test(\"Brak błędów FAILED\", () => {",
                      "        pm.expect(true).to.be.true;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "ac67f8ac-e3da-411a-bfec-228509dfcac8"
                  }
                }
              ]
            },
            {
              "id": "e93e4f3e-18b8-44fe-bd5b-fea9e0c846ad",
              "name": "Odpowiedź-BŁĄD",
              "request": {
                "url": {
                  "path": [
                    "statusZadania"
                  ],
                  "host": [
                    "{{BaseURL}}"
                  ],
                  "query": [
                    {
                      "key": "kod",
                      "value": "zadanie_2"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "60b88e7c-b62b-420a-8cc5-23626d08d919",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const body = pm.response.text().trim();",
                      "const kod = pm.request.url.query",
                      "    .find(p => p.key === \"kod\")?.value?.trim() || \"\";",
                      "",
                      "pm.test(\"Valid HTTP Status Codes\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Pierwsza linia\", () => pm.expect(body).to.include(\"Task summary Generated At\"));",
                      "pm.test(\"Naglowek\", () => pm.expect(body).to.include(\"|Kod                                                   |Status   |Cron                          |Start               |Koniec              |Ostatnie OK         |\"));",
                      "pm.test(\"Kod zadania\", () => pm.expect(body).to.include(\"|\" + kod));",
                      "pm.test(\"Podsumowanie\", () => pm.expect(body).to.include(\"Podsumowanie\"));",
                      "",
                      "// Ogólne asercje nieprzerywające dalszej logiki",
                      "if (body.includes(\"FAILED\")) {",
                      "    console.error(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                      "    pm.test(\"Brak \\\"FAILED\\\"\", () => {",
                      "        pm.expect.fail(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                      "    });",
                      "} else {",
                      "    pm.test(\"Brak \\\"FAILED\\\"\", () => pm.expect(true).to.be.true);",
                      "}",
                      "",
                      "if (body.includes(\"Failures\")) {",
                      "    console.error(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                      "    pm.test(\"Brak \\\"Failures\\\"\", () => {",
                      "        pm.expect.fail(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                      "    });",
                      "} else {",
                      "    pm.test(\"Brak \\\"Failures\\\"\", () => pm.expect(true).to.be.true);",
                      "}",
                      "",
                      "if (!body) {",
                      "    console.error(\"Odpowiedź serwera jest pusta. Przerywam wykonanie.\");",
                      "    pm.test(\"Brak treści w odpowiedzi serwera\", () => {",
                      "        pm.expect.fail(\"Brak treści w odpowiedzi serwera.\");",
                      "    });",
                      "    return;",
                      "}",
                      "",
                      "const linieOdpowiedzi = body.split('\\n');",
                      "",
                      "// Sprawdzenie linii z kodem zadania",
                      "const liniaZKodem = linieOdpowiedzi.find(linia => linia.includes(\"|\" + kod));",
                      "if (!liniaZKodem) {",
                      "    console.error(`Nie znaleziono linii zawierającej kod zadania: ${kod}`);",
                      "    pm.test(\"Linia z kodem zadania istnieje\", () => {",
                      "        pm.expect.fail(`Brak linii z kodem zadania: ${kod}`);",
                      "    });",
                      "    return;",
                      "}",
                      "",
                      "// Szczegółowe filtrowanie linii zgodnie z Groovy (SoapUI)",
                      "const liniaZsoon = linieOdpowiedzi.filter(linia => linia.includes('No information yet. Please try again soon!'));",
                      "const linieZFailed = linieOdpowiedzi.filter(linia => linia.includes('FAILED') && !linia.includes(kod));",
                      "const linieZFailures = linieOdpowiedzi.filter(linia => linia.includes('Failures'));",
                      "const linieZRunNew = linieOdpowiedzi.filter(linia => linia.includes('|RUNNING') || linia.includes('|NEW'));",
                      "",
                      "// Szczegóły błędów specjalnych",
                      "let linieZFailuresSpecjalne = [];",
                      "if (linieZFailures.length > 0) {",
                      "    linieZFailuresSpecjalne = linieOdpowiedzi.filter(linia =>",
                      "        linia.includes('#') ||",
                      "        linia.includes('MAIN:') ||",
                      "        linia.includes('READER:') ||",
                      "        linia.includes('Caused by:') ||",
                      "        linia.includes('WRITER:')",
                      "    );",
                      "}",
                      "",
                      "// Główna logika 1:1 zgodna z Groovy (SoapUI)",
                      "if (liniaZsoon.length === 1) {",
                      "    console.warn(`Należy ponowić sprawdzenie statusu zadania ${kod}`);",
                      "    pm.test(\"Brak komunikatu 'try again soon'\", () => {",
                      "        pm.expect.fail(`Znaleziono 'try again soon' dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else if (linieZRunNew.length > 0) {",
                      "    console.warn(`Nie wszystkie kroki zostały zakończone dla zadania ${kod}`);",
                      "    pm.test(\"Wszystkie kroki zakończone\", () => {",
                      "        pm.expect.fail(`Znaleziono kroki RUNNING/NEW dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else if (linieZFailed.length > 0) {",
                      "    if (linieZFailed.length === 1) {",
                      "        console.error(`Wystąpił błąd 'FAILED' dla zadania ${kod}:`);",
                      "        console.error(`      ${linieZFailed[0]}`);",
                      "    } else {",
                      "        console.error(`Wystąpiły błędy 'FAILED' dla zadania ${kod}:`);",
                      "        linieZFailed.forEach(linia => console.error(`      ${linia}`));",
                      "    }",
                      "",
                      "    // Szczegóły  (Failures)",
                      "    if (linieZFailuresSpecjalne.length > 0) {",
                      "        console.error(\"Szczegóły:\");",
                      "        linieZFailuresSpecjalne.forEach(linia => console.error(`      ${linia}`));",
                      "    }",
                      "",
                      "    // Zgłoszenie szczegółowego błędu jako failed test",
                      "    pm.test(\"Brak błędów FAILED\", () => {",
                      "        pm.expect.fail(`Znaleziono linie FAILED dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else {",
                      "    console.log(`Nie wystąpił błąd 'FAILED' dla zadania ${kod}`);",
                      "    pm.test(\"Brak błędów FAILED\", () => {",
                      "        pm.expect(true).to.be.true;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "08a014d5-2d49-4142-8016-2f8752fbf889"
                  }
                }
              ]
            },
            {
              "id": "a02a0fe7-872f-4ae9-afb8-bceec80e8418",
              "name": "Odpowiedź-BRAK",
              "request": {
                "url": {
                  "path": [
                    "statusZadania"
                  ],
                  "host": [
                    "{{BaseURL}}"
                  ],
                  "query": [
                    {
                      "key": "kod",
                      "value": "zadanie_3"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d789b2ea-582f-4219-8ae2-00fd41f9709e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const body = pm.response.text().trim();",
                      "const kod = pm.request.url.query",
                      "    .find(p => p.key === \"kod\")?.value?.trim() || \"\";",
                      "",
                      "pm.test(\"Valid HTTP Status Codes\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Pierwsza linia\", () => pm.expect(body).to.include(\"Task summary Generated At\"));",
                      "pm.test(\"Naglowek\", () => pm.expect(body).to.include(\"|Kod                                                   |Status   |Cron                          |Start               |Koniec              |Ostatnie OK         |\"));",
                      "pm.test(\"Kod zadania\", () => pm.expect(body).to.include(\"|\" + kod));",
                      "pm.test(\"Podsumowanie\", () => pm.expect(body).to.include(\"Podsumowanie\"));",
                      "",
                      "// Ogólne asercje nieprzerywające dalszej logiki",
                      "if (body.includes(\"FAILED\")) {",
                      "    console.error(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                      "    pm.test(\"Brak \\\"FAILED\\\"\", () => {",
                      "        pm.expect.fail(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                      "    });",
                      "} else {",
                      "    pm.test(\"Brak \\\"FAILED\\\"\", () => pm.expect(true).to.be.true);",
                      "}",
                      "",
                      "if (body.includes(\"Failures\")) {",
                      "    console.error(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                      "    pm.test(\"Brak \\\"Failures\\\"\", () => {",
                      "        pm.expect.fail(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                      "    });",
                      "} else {",
                      "    pm.test(\"Brak \\\"Failures\\\"\", () => pm.expect(true).to.be.true);",
                      "}",
                      "",
                      "if (!body) {",
                      "    console.error(\"Odpowiedź serwera jest pusta. Przerywam wykonanie.\");",
                      "    pm.test(\"Brak treści w odpowiedzi serwera\", () => {",
                      "        pm.expect.fail(\"Brak treści w odpowiedzi serwera.\");",
                      "    });",
                      "    return;",
                      "}",
                      "",
                      "const linieOdpowiedzi = body.split('\\n');",
                      "",
                      "// Sprawdzenie linii z kodem zadania",
                      "const liniaZKodem = linieOdpowiedzi.find(linia => linia.includes(\"|\" + kod));",
                      "if (!liniaZKodem) {",
                      "    console.error(`Nie znaleziono linii zawierającej kod zadania: ${kod}`);",
                      "    pm.test(\"Linia z kodem zadania istnieje\", () => {",
                      "        pm.expect.fail(`Brak linii z kodem zadania: ${kod}`);",
                      "    });",
                      "    return;",
                      "}",
                      "",
                      "// Szczegółowe filtrowanie linii zgodnie z Groovy (SoapUI)",
                      "const liniaZsoon = linieOdpowiedzi.filter(linia => linia.includes('No information yet. Please try again soon!'));",
                      "const linieZFailed = linieOdpowiedzi.filter(linia => linia.includes('FAILED') && !linia.includes(kod));",
                      "const linieZFailures = linieOdpowiedzi.filter(linia => linia.includes('Failures'));",
                      "const linieZRunNew = linieOdpowiedzi.filter(linia => linia.includes('|RUNNING') || linia.includes('|NEW'));",
                      "",
                      "// Szczegóły błędów specjalnych",
                      "let linieZFailuresSpecjalne = [];",
                      "if (linieZFailures.length > 0) {",
                      "    linieZFailuresSpecjalne = linieOdpowiedzi.filter(linia =>",
                      "        linia.includes('#') ||",
                      "        linia.includes('MAIN:') ||",
                      "        linia.includes('READER:') ||",
                      "        linia.includes('Caused by:') ||",
                      "        linia.includes('WRITER:')",
                      "    );",
                      "}",
                      "",
                      "// Główna logika 1:1 zgodna z Groovy (SoapUI)",
                      "if (liniaZsoon.length === 1) {",
                      "    console.warn(`Należy ponowić sprawdzenie statusu zadania ${kod}`);",
                      "    pm.test(\"Brak komunikatu 'try again soon'\", () => {",
                      "        pm.expect.fail(`Znaleziono 'try again soon' dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else if (linieZRunNew.length > 0) {",
                      "    console.warn(`Nie wszystkie kroki zostały zakończone dla zadania ${kod}`);",
                      "    pm.test(\"Wszystkie kroki zakończone\", () => {",
                      "        pm.expect.fail(`Znaleziono kroki RUNNING/NEW dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else if (linieZFailed.length > 0) {",
                      "    if (linieZFailed.length === 1) {",
                      "        console.error(`Wystąpił błąd 'FAILED' dla zadania ${kod}:`);",
                      "        console.error(`      ${linieZFailed[0]}`);",
                      "    } else {",
                      "        console.error(`Wystąpiły błędy 'FAILED' dla zadania ${kod}:`);",
                      "        linieZFailed.forEach(linia => console.error(`      ${linia}`));",
                      "    }",
                      "",
                      "    // Szczegóły  (Failures)",
                      "    if (linieZFailuresSpecjalne.length > 0) {",
                      "        console.error(\"Szczegóły:\");",
                      "        linieZFailuresSpecjalne.forEach(linia => console.error(`      ${linia}`));",
                      "    }",
                      "",
                      "    // Zgłoszenie szczegółowego błędu jako failed test",
                      "    pm.test(\"Brak błędów FAILED\", () => {",
                      "        pm.expect.fail(`Znaleziono linie FAILED dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else {",
                      "    console.log(`Nie wystąpił błąd 'FAILED' dla zadania ${kod}`);",
                      "    pm.test(\"Brak błędów FAILED\", () => {",
                      "        pm.expect(true).to.be.true;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "c5932503-417c-4bd8-873b-339df675fd01"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "523933b0-fd9c-4b30-a176-dcc7dd942479",
          "length": 3,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "579e2395-6079-46e1-9254-931877181cd9",
          "scriptId": "60b88e7c-b62b-420a-8cc5-23626d08d919",
          "execution": "08a014d5-2d49-4142-8016-2f8752fbf889"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 6,
          "test": "Brak \"Failures\"",
          "message": "Znaleziono słowo 'Failures' w całej odpowiedzi.",
          "stack": "AssertionError: Znaleziono słowo 'Failures' w całej odpowiedzi.\n   at Object.eval sandbox-script.js:7:2)",
          "checksum": "49d4b318156f42d6d6004df05927282d",
          "id": "e05cda0b-a19d-429e-8ca9-2eee09942a07",
          "timestamp": 1753867170526,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 7,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:6 in test-script",
        "source": {
          "id": "e93e4f3e-18b8-44fe-bd5b-fea9e0c846ad",
          "name": "Odpowiedź-BŁĄD",
          "request": {
            "url": {
              "path": [
                "statusZadania"
              ],
              "host": [
                "{{BaseURL}}"
              ],
              "query": [
                {
                  "key": "kod",
                  "value": "zadanie_2"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "60b88e7c-b62b-420a-8cc5-23626d08d919",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const body = pm.response.text().trim();",
                  "const kod = pm.request.url.query",
                  "    .find(p => p.key === \"kod\")?.value?.trim() || \"\";",
                  "",
                  "pm.test(\"Valid HTTP Status Codes\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Pierwsza linia\", () => pm.expect(body).to.include(\"Task summary Generated At\"));",
                  "pm.test(\"Naglowek\", () => pm.expect(body).to.include(\"|Kod                                                   |Status   |Cron                          |Start               |Koniec              |Ostatnie OK         |\"));",
                  "pm.test(\"Kod zadania\", () => pm.expect(body).to.include(\"|\" + kod));",
                  "pm.test(\"Podsumowanie\", () => pm.expect(body).to.include(\"Podsumowanie\"));",
                  "",
                  "// Ogólne asercje nieprzerywające dalszej logiki",
                  "if (body.includes(\"FAILED\")) {",
                  "    console.error(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                  "    pm.test(\"Brak \\\"FAILED\\\"\", () => {",
                  "        pm.expect.fail(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                  "    });",
                  "} else {",
                  "    pm.test(\"Brak \\\"FAILED\\\"\", () => pm.expect(true).to.be.true);",
                  "}",
                  "",
                  "if (body.includes(\"Failures\")) {",
                  "    console.error(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                  "    pm.test(\"Brak \\\"Failures\\\"\", () => {",
                  "        pm.expect.fail(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                  "    });",
                  "} else {",
                  "    pm.test(\"Brak \\\"Failures\\\"\", () => pm.expect(true).to.be.true);",
                  "}",
                  "",
                  "if (!body) {",
                  "    console.error(\"Odpowiedź serwera jest pusta. Przerywam wykonanie.\");",
                  "    pm.test(\"Brak treści w odpowiedzi serwera\", () => {",
                  "        pm.expect.fail(\"Brak treści w odpowiedzi serwera.\");",
                  "    });",
                  "    return;",
                  "}",
                  "",
                  "const linieOdpowiedzi = body.split('\\n');",
                  "",
                  "// Sprawdzenie linii z kodem zadania",
                  "const liniaZKodem = linieOdpowiedzi.find(linia => linia.includes(\"|\" + kod));",
                  "if (!liniaZKodem) {",
                  "    console.error(`Nie znaleziono linii zawierającej kod zadania: ${kod}`);",
                  "    pm.test(\"Linia z kodem zadania istnieje\", () => {",
                  "        pm.expect.fail(`Brak linii z kodem zadania: ${kod}`);",
                  "    });",
                  "    return;",
                  "}",
                  "",
                  "// Szczegółowe filtrowanie linii zgodnie z Groovy (SoapUI)",
                  "const liniaZsoon = linieOdpowiedzi.filter(linia => linia.includes('No information yet. Please try again soon!'));",
                  "const linieZFailed = linieOdpowiedzi.filter(linia => linia.includes('FAILED') && !linia.includes(kod));",
                  "const linieZFailures = linieOdpowiedzi.filter(linia => linia.includes('Failures'));",
                  "const linieZRunNew = linieOdpowiedzi.filter(linia => linia.includes('|RUNNING') || linia.includes('|NEW'));",
                  "",
                  "// Szczegóły błędów specjalnych",
                  "let linieZFailuresSpecjalne = [];",
                  "if (linieZFailures.length > 0) {",
                  "    linieZFailuresSpecjalne = linieOdpowiedzi.filter(linia =>",
                  "        linia.includes('#') ||",
                  "        linia.includes('MAIN:') ||",
                  "        linia.includes('READER:') ||",
                  "        linia.includes('Caused by:') ||",
                  "        linia.includes('WRITER:')",
                  "    );",
                  "}",
                  "",
                  "// Główna logika 1:1 zgodna z Groovy (SoapUI)",
                  "if (liniaZsoon.length === 1) {",
                  "    console.warn(`Należy ponowić sprawdzenie statusu zadania ${kod}`);",
                  "    pm.test(\"Brak komunikatu 'try again soon'\", () => {",
                  "        pm.expect.fail(`Znaleziono 'try again soon' dla zadania ${kod}`);",
                  "    });",
                  "",
                  "} else if (linieZRunNew.length > 0) {",
                  "    console.warn(`Nie wszystkie kroki zostały zakończone dla zadania ${kod}`);",
                  "    pm.test(\"Wszystkie kroki zakończone\", () => {",
                  "        pm.expect.fail(`Znaleziono kroki RUNNING/NEW dla zadania ${kod}`);",
                  "    });",
                  "",
                  "} else if (linieZFailed.length > 0) {",
                  "    if (linieZFailed.length === 1) {",
                  "        console.error(`Wystąpił błąd 'FAILED' dla zadania ${kod}:`);",
                  "        console.error(`      ${linieZFailed[0]}`);",
                  "    } else {",
                  "        console.error(`Wystąpiły błędy 'FAILED' dla zadania ${kod}:`);",
                  "        linieZFailed.forEach(linia => console.error(`      ${linia}`));",
                  "    }",
                  "",
                  "    // Szczegóły  (Failures)",
                  "    if (linieZFailuresSpecjalne.length > 0) {",
                  "        console.error(\"Szczegóły:\");",
                  "        linieZFailuresSpecjalne.forEach(linia => console.error(`      ${linia}`));",
                  "    }",
                  "",
                  "    // Zgłoszenie szczegółowego błędu jako failed test",
                  "    pm.test(\"Brak błędów FAILED\", () => {",
                  "        pm.expect.fail(`Znaleziono linie FAILED dla zadania ${kod}`);",
                  "    });",
                  "",
                  "} else {",
                  "    console.log(`Nie wystąpił błąd 'FAILED' dla zadania ${kod}`);",
                  "    pm.test(\"Brak błędów FAILED\", () => {",
                  "        pm.expect(true).to.be.true;",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "08a014d5-2d49-4142-8016-2f8752fbf889"
              }
            }
          ]
        },
        "parent": {
          "id": "a96c8136-f56e-4c0a-b6ce-56b642bf4d58",
          "name": "Test Steps",
          "item": [
            {
              "id": "e1c974ec-065f-4041-a31f-061a1f7c7395",
              "name": "Odpowiedź-OK",
              "request": {
                "url": {
                  "path": [
                    "statusZadania"
                  ],
                  "host": [
                    "{{BaseURL}}"
                  ],
                  "query": [
                    {
                      "key": "kod",
                      "value": "zadanie_1"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5822a058-c62f-4899-84cf-94858c4322b2",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const body = pm.response.text().trim();",
                      "const kod = pm.request.url.query",
                      "    .find(p => p.key === \"kod\")?.value?.trim() || \"\";",
                      "",
                      "pm.test(\"Valid HTTP Status Codes\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Pierwsza linia\", () => pm.expect(body).to.include(\"Task summary Generated At\"));",
                      "pm.test(\"Naglowek\", () => pm.expect(body).to.include(\"|Kod                                                   |Status   |Cron                          |Start               |Koniec              |Ostatnie OK         |\"));",
                      "pm.test(\"Kod zadania\", () => pm.expect(body).to.include(\"|\" + kod));",
                      "pm.test(\"Podsumowanie\", () => pm.expect(body).to.include(\"Podsumowanie\"));",
                      "",
                      "// Ogólne asercje nieprzerywające dalszej logiki",
                      "if (body.includes(\"FAILED\")) {",
                      "    console.error(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                      "    pm.test(\"Brak \\\"FAILED\\\"\", () => {",
                      "        pm.expect.fail(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                      "    });",
                      "} else {",
                      "    pm.test(\"Brak \\\"FAILED\\\"\", () => pm.expect(true).to.be.true);",
                      "}",
                      "",
                      "if (body.includes(\"Failures\")) {",
                      "    console.error(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                      "    pm.test(\"Brak \\\"Failures\\\"\", () => {",
                      "        pm.expect.fail(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                      "    });",
                      "} else {",
                      "    pm.test(\"Brak \\\"Failures\\\"\", () => pm.expect(true).to.be.true);",
                      "}",
                      "",
                      "if (!body) {",
                      "    console.error(\"Odpowiedź serwera jest pusta. Przerywam wykonanie.\");",
                      "    pm.test(\"Brak treści w odpowiedzi serwera\", () => {",
                      "        pm.expect.fail(\"Brak treści w odpowiedzi serwera.\");",
                      "    });",
                      "    return;",
                      "}",
                      "",
                      "const linieOdpowiedzi = body.split('\\n');",
                      "",
                      "// Sprawdzenie linii z kodem zadania",
                      "const liniaZKodem = linieOdpowiedzi.find(linia => linia.includes(\"|\" + kod));",
                      "if (!liniaZKodem) {",
                      "    console.error(`Nie znaleziono linii zawierającej kod zadania: ${kod}`);",
                      "    pm.test(\"Linia z kodem zadania istnieje\", () => {",
                      "        pm.expect.fail(`Brak linii z kodem zadania: ${kod}`);",
                      "    });",
                      "    return;",
                      "}",
                      "",
                      "// Szczegółowe filtrowanie linii zgodnie z Groovy (SoapUI)",
                      "const liniaZsoon = linieOdpowiedzi.filter(linia => linia.includes('No information yet. Please try again soon!'));",
                      "const linieZFailed = linieOdpowiedzi.filter(linia => linia.includes('FAILED') && !linia.includes(kod));",
                      "const linieZFailures = linieOdpowiedzi.filter(linia => linia.includes('Failures'));",
                      "const linieZRunNew = linieOdpowiedzi.filter(linia => linia.includes('|RUNNING') || linia.includes('|NEW'));",
                      "",
                      "// Szczegóły błędów specjalnych",
                      "let linieZFailuresSpecjalne = [];",
                      "if (linieZFailures.length > 0) {",
                      "    linieZFailuresSpecjalne = linieOdpowiedzi.filter(linia =>",
                      "        linia.includes('#') ||",
                      "        linia.includes('MAIN:') ||",
                      "        linia.includes('READER:') ||",
                      "        linia.includes('Caused by:') ||",
                      "        linia.includes('WRITER:')",
                      "    );",
                      "}",
                      "",
                      "// Główna logika 1:1 zgodna z Groovy (SoapUI)",
                      "if (liniaZsoon.length === 1) {",
                      "    console.warn(`Należy ponowić sprawdzenie statusu zadania ${kod}`);",
                      "    pm.test(\"Brak komunikatu 'try again soon'\", () => {",
                      "        pm.expect.fail(`Znaleziono 'try again soon' dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else if (linieZRunNew.length > 0) {",
                      "    console.warn(`Nie wszystkie kroki zostały zakończone dla zadania ${kod}`);",
                      "    pm.test(\"Wszystkie kroki zakończone\", () => {",
                      "        pm.expect.fail(`Znaleziono kroki RUNNING/NEW dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else if (linieZFailed.length > 0) {",
                      "    if (linieZFailed.length === 1) {",
                      "        console.error(`Wystąpił błąd 'FAILED' dla zadania ${kod}:`);",
                      "        console.error(`      ${linieZFailed[0]}`);",
                      "    } else {",
                      "        console.error(`Wystąpiły błędy 'FAILED' dla zadania ${kod}:`);",
                      "        linieZFailed.forEach(linia => console.error(`      ${linia}`));",
                      "    }",
                      "",
                      "    // Szczegóły  (Failures)",
                      "    if (linieZFailuresSpecjalne.length > 0) {",
                      "        console.error(\"Szczegóły:\");",
                      "        linieZFailuresSpecjalne.forEach(linia => console.error(`      ${linia}`));",
                      "    }",
                      "",
                      "    // Zgłoszenie szczegółowego błędu jako failed test",
                      "    pm.test(\"Brak błędów FAILED\", () => {",
                      "        pm.expect.fail(`Znaleziono linie FAILED dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else {",
                      "    console.log(`Nie wystąpił błąd 'FAILED' dla zadania ${kod}`);",
                      "    pm.test(\"Brak błędów FAILED\", () => {",
                      "        pm.expect(true).to.be.true;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "ac67f8ac-e3da-411a-bfec-228509dfcac8"
                  }
                }
              ]
            },
            {
              "id": "e93e4f3e-18b8-44fe-bd5b-fea9e0c846ad",
              "name": "Odpowiedź-BŁĄD",
              "request": {
                "url": {
                  "path": [
                    "statusZadania"
                  ],
                  "host": [
                    "{{BaseURL}}"
                  ],
                  "query": [
                    {
                      "key": "kod",
                      "value": "zadanie_2"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "60b88e7c-b62b-420a-8cc5-23626d08d919",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const body = pm.response.text().trim();",
                      "const kod = pm.request.url.query",
                      "    .find(p => p.key === \"kod\")?.value?.trim() || \"\";",
                      "",
                      "pm.test(\"Valid HTTP Status Codes\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Pierwsza linia\", () => pm.expect(body).to.include(\"Task summary Generated At\"));",
                      "pm.test(\"Naglowek\", () => pm.expect(body).to.include(\"|Kod                                                   |Status   |Cron                          |Start               |Koniec              |Ostatnie OK         |\"));",
                      "pm.test(\"Kod zadania\", () => pm.expect(body).to.include(\"|\" + kod));",
                      "pm.test(\"Podsumowanie\", () => pm.expect(body).to.include(\"Podsumowanie\"));",
                      "",
                      "// Ogólne asercje nieprzerywające dalszej logiki",
                      "if (body.includes(\"FAILED\")) {",
                      "    console.error(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                      "    pm.test(\"Brak \\\"FAILED\\\"\", () => {",
                      "        pm.expect.fail(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                      "    });",
                      "} else {",
                      "    pm.test(\"Brak \\\"FAILED\\\"\", () => pm.expect(true).to.be.true);",
                      "}",
                      "",
                      "if (body.includes(\"Failures\")) {",
                      "    console.error(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                      "    pm.test(\"Brak \\\"Failures\\\"\", () => {",
                      "        pm.expect.fail(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                      "    });",
                      "} else {",
                      "    pm.test(\"Brak \\\"Failures\\\"\", () => pm.expect(true).to.be.true);",
                      "}",
                      "",
                      "if (!body) {",
                      "    console.error(\"Odpowiedź serwera jest pusta. Przerywam wykonanie.\");",
                      "    pm.test(\"Brak treści w odpowiedzi serwera\", () => {",
                      "        pm.expect.fail(\"Brak treści w odpowiedzi serwera.\");",
                      "    });",
                      "    return;",
                      "}",
                      "",
                      "const linieOdpowiedzi = body.split('\\n');",
                      "",
                      "// Sprawdzenie linii z kodem zadania",
                      "const liniaZKodem = linieOdpowiedzi.find(linia => linia.includes(\"|\" + kod));",
                      "if (!liniaZKodem) {",
                      "    console.error(`Nie znaleziono linii zawierającej kod zadania: ${kod}`);",
                      "    pm.test(\"Linia z kodem zadania istnieje\", () => {",
                      "        pm.expect.fail(`Brak linii z kodem zadania: ${kod}`);",
                      "    });",
                      "    return;",
                      "}",
                      "",
                      "// Szczegółowe filtrowanie linii zgodnie z Groovy (SoapUI)",
                      "const liniaZsoon = linieOdpowiedzi.filter(linia => linia.includes('No information yet. Please try again soon!'));",
                      "const linieZFailed = linieOdpowiedzi.filter(linia => linia.includes('FAILED') && !linia.includes(kod));",
                      "const linieZFailures = linieOdpowiedzi.filter(linia => linia.includes('Failures'));",
                      "const linieZRunNew = linieOdpowiedzi.filter(linia => linia.includes('|RUNNING') || linia.includes('|NEW'));",
                      "",
                      "// Szczegóły błędów specjalnych",
                      "let linieZFailuresSpecjalne = [];",
                      "if (linieZFailures.length > 0) {",
                      "    linieZFailuresSpecjalne = linieOdpowiedzi.filter(linia =>",
                      "        linia.includes('#') ||",
                      "        linia.includes('MAIN:') ||",
                      "        linia.includes('READER:') ||",
                      "        linia.includes('Caused by:') ||",
                      "        linia.includes('WRITER:')",
                      "    );",
                      "}",
                      "",
                      "// Główna logika 1:1 zgodna z Groovy (SoapUI)",
                      "if (liniaZsoon.length === 1) {",
                      "    console.warn(`Należy ponowić sprawdzenie statusu zadania ${kod}`);",
                      "    pm.test(\"Brak komunikatu 'try again soon'\", () => {",
                      "        pm.expect.fail(`Znaleziono 'try again soon' dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else if (linieZRunNew.length > 0) {",
                      "    console.warn(`Nie wszystkie kroki zostały zakończone dla zadania ${kod}`);",
                      "    pm.test(\"Wszystkie kroki zakończone\", () => {",
                      "        pm.expect.fail(`Znaleziono kroki RUNNING/NEW dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else if (linieZFailed.length > 0) {",
                      "    if (linieZFailed.length === 1) {",
                      "        console.error(`Wystąpił błąd 'FAILED' dla zadania ${kod}:`);",
                      "        console.error(`      ${linieZFailed[0]}`);",
                      "    } else {",
                      "        console.error(`Wystąpiły błędy 'FAILED' dla zadania ${kod}:`);",
                      "        linieZFailed.forEach(linia => console.error(`      ${linia}`));",
                      "    }",
                      "",
                      "    // Szczegóły  (Failures)",
                      "    if (linieZFailuresSpecjalne.length > 0) {",
                      "        console.error(\"Szczegóły:\");",
                      "        linieZFailuresSpecjalne.forEach(linia => console.error(`      ${linia}`));",
                      "    }",
                      "",
                      "    // Zgłoszenie szczegółowego błędu jako failed test",
                      "    pm.test(\"Brak błędów FAILED\", () => {",
                      "        pm.expect.fail(`Znaleziono linie FAILED dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else {",
                      "    console.log(`Nie wystąpił błąd 'FAILED' dla zadania ${kod}`);",
                      "    pm.test(\"Brak błędów FAILED\", () => {",
                      "        pm.expect(true).to.be.true;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "08a014d5-2d49-4142-8016-2f8752fbf889"
                  }
                }
              ]
            },
            {
              "id": "a02a0fe7-872f-4ae9-afb8-bceec80e8418",
              "name": "Odpowiedź-BRAK",
              "request": {
                "url": {
                  "path": [
                    "statusZadania"
                  ],
                  "host": [
                    "{{BaseURL}}"
                  ],
                  "query": [
                    {
                      "key": "kod",
                      "value": "zadanie_3"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d789b2ea-582f-4219-8ae2-00fd41f9709e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const body = pm.response.text().trim();",
                      "const kod = pm.request.url.query",
                      "    .find(p => p.key === \"kod\")?.value?.trim() || \"\";",
                      "",
                      "pm.test(\"Valid HTTP Status Codes\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Pierwsza linia\", () => pm.expect(body).to.include(\"Task summary Generated At\"));",
                      "pm.test(\"Naglowek\", () => pm.expect(body).to.include(\"|Kod                                                   |Status   |Cron                          |Start               |Koniec              |Ostatnie OK         |\"));",
                      "pm.test(\"Kod zadania\", () => pm.expect(body).to.include(\"|\" + kod));",
                      "pm.test(\"Podsumowanie\", () => pm.expect(body).to.include(\"Podsumowanie\"));",
                      "",
                      "// Ogólne asercje nieprzerywające dalszej logiki",
                      "if (body.includes(\"FAILED\")) {",
                      "    console.error(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                      "    pm.test(\"Brak \\\"FAILED\\\"\", () => {",
                      "        pm.expect.fail(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                      "    });",
                      "} else {",
                      "    pm.test(\"Brak \\\"FAILED\\\"\", () => pm.expect(true).to.be.true);",
                      "}",
                      "",
                      "if (body.includes(\"Failures\")) {",
                      "    console.error(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                      "    pm.test(\"Brak \\\"Failures\\\"\", () => {",
                      "        pm.expect.fail(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                      "    });",
                      "} else {",
                      "    pm.test(\"Brak \\\"Failures\\\"\", () => pm.expect(true).to.be.true);",
                      "}",
                      "",
                      "if (!body) {",
                      "    console.error(\"Odpowiedź serwera jest pusta. Przerywam wykonanie.\");",
                      "    pm.test(\"Brak treści w odpowiedzi serwera\", () => {",
                      "        pm.expect.fail(\"Brak treści w odpowiedzi serwera.\");",
                      "    });",
                      "    return;",
                      "}",
                      "",
                      "const linieOdpowiedzi = body.split('\\n');",
                      "",
                      "// Sprawdzenie linii z kodem zadania",
                      "const liniaZKodem = linieOdpowiedzi.find(linia => linia.includes(\"|\" + kod));",
                      "if (!liniaZKodem) {",
                      "    console.error(`Nie znaleziono linii zawierającej kod zadania: ${kod}`);",
                      "    pm.test(\"Linia z kodem zadania istnieje\", () => {",
                      "        pm.expect.fail(`Brak linii z kodem zadania: ${kod}`);",
                      "    });",
                      "    return;",
                      "}",
                      "",
                      "// Szczegółowe filtrowanie linii zgodnie z Groovy (SoapUI)",
                      "const liniaZsoon = linieOdpowiedzi.filter(linia => linia.includes('No information yet. Please try again soon!'));",
                      "const linieZFailed = linieOdpowiedzi.filter(linia => linia.includes('FAILED') && !linia.includes(kod));",
                      "const linieZFailures = linieOdpowiedzi.filter(linia => linia.includes('Failures'));",
                      "const linieZRunNew = linieOdpowiedzi.filter(linia => linia.includes('|RUNNING') || linia.includes('|NEW'));",
                      "",
                      "// Szczegóły błędów specjalnych",
                      "let linieZFailuresSpecjalne = [];",
                      "if (linieZFailures.length > 0) {",
                      "    linieZFailuresSpecjalne = linieOdpowiedzi.filter(linia =>",
                      "        linia.includes('#') ||",
                      "        linia.includes('MAIN:') ||",
                      "        linia.includes('READER:') ||",
                      "        linia.includes('Caused by:') ||",
                      "        linia.includes('WRITER:')",
                      "    );",
                      "}",
                      "",
                      "// Główna logika 1:1 zgodna z Groovy (SoapUI)",
                      "if (liniaZsoon.length === 1) {",
                      "    console.warn(`Należy ponowić sprawdzenie statusu zadania ${kod}`);",
                      "    pm.test(\"Brak komunikatu 'try again soon'\", () => {",
                      "        pm.expect.fail(`Znaleziono 'try again soon' dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else if (linieZRunNew.length > 0) {",
                      "    console.warn(`Nie wszystkie kroki zostały zakończone dla zadania ${kod}`);",
                      "    pm.test(\"Wszystkie kroki zakończone\", () => {",
                      "        pm.expect.fail(`Znaleziono kroki RUNNING/NEW dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else if (linieZFailed.length > 0) {",
                      "    if (linieZFailed.length === 1) {",
                      "        console.error(`Wystąpił błąd 'FAILED' dla zadania ${kod}:`);",
                      "        console.error(`      ${linieZFailed[0]}`);",
                      "    } else {",
                      "        console.error(`Wystąpiły błędy 'FAILED' dla zadania ${kod}:`);",
                      "        linieZFailed.forEach(linia => console.error(`      ${linia}`));",
                      "    }",
                      "",
                      "    // Szczegóły  (Failures)",
                      "    if (linieZFailuresSpecjalne.length > 0) {",
                      "        console.error(\"Szczegóły:\");",
                      "        linieZFailuresSpecjalne.forEach(linia => console.error(`      ${linia}`));",
                      "    }",
                      "",
                      "    // Zgłoszenie szczegółowego błędu jako failed test",
                      "    pm.test(\"Brak błędów FAILED\", () => {",
                      "        pm.expect.fail(`Znaleziono linie FAILED dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else {",
                      "    console.log(`Nie wystąpił błąd 'FAILED' dla zadania ${kod}`);",
                      "    pm.test(\"Brak błędów FAILED\", () => {",
                      "        pm.expect(true).to.be.true;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "c5932503-417c-4bd8-873b-339df675fd01"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "523933b0-fd9c-4b30-a176-dcc7dd942479",
          "length": 3,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "579e2395-6079-46e1-9254-931877181cd9",
          "scriptId": "60b88e7c-b62b-420a-8cc5-23626d08d919",
          "execution": "08a014d5-2d49-4142-8016-2f8752fbf889"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 7,
          "test": "Brak błędów FAILED",
          "message": "Znaleziono linie FAILED dla zadania zadanie_2",
          "stack": "AssertionError: Znaleziono linie FAILED dla zadania zadanie_2\n   at Object.eval sandbox-script.js:8:2)",
          "checksum": "5efdfb22acc4b6ca0d1f8e5db19077ba",
          "id": "60ea512d-8edf-43ed-b7ad-b8a402d05534",
          "timestamp": 1753867170529,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 8,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:7 in test-script",
        "source": {
          "id": "e93e4f3e-18b8-44fe-bd5b-fea9e0c846ad",
          "name": "Odpowiedź-BŁĄD",
          "request": {
            "url": {
              "path": [
                "statusZadania"
              ],
              "host": [
                "{{BaseURL}}"
              ],
              "query": [
                {
                  "key": "kod",
                  "value": "zadanie_2"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "60b88e7c-b62b-420a-8cc5-23626d08d919",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const body = pm.response.text().trim();",
                  "const kod = pm.request.url.query",
                  "    .find(p => p.key === \"kod\")?.value?.trim() || \"\";",
                  "",
                  "pm.test(\"Valid HTTP Status Codes\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Pierwsza linia\", () => pm.expect(body).to.include(\"Task summary Generated At\"));",
                  "pm.test(\"Naglowek\", () => pm.expect(body).to.include(\"|Kod                                                   |Status   |Cron                          |Start               |Koniec              |Ostatnie OK         |\"));",
                  "pm.test(\"Kod zadania\", () => pm.expect(body).to.include(\"|\" + kod));",
                  "pm.test(\"Podsumowanie\", () => pm.expect(body).to.include(\"Podsumowanie\"));",
                  "",
                  "// Ogólne asercje nieprzerywające dalszej logiki",
                  "if (body.includes(\"FAILED\")) {",
                  "    console.error(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                  "    pm.test(\"Brak \\\"FAILED\\\"\", () => {",
                  "        pm.expect.fail(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                  "    });",
                  "} else {",
                  "    pm.test(\"Brak \\\"FAILED\\\"\", () => pm.expect(true).to.be.true);",
                  "}",
                  "",
                  "if (body.includes(\"Failures\")) {",
                  "    console.error(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                  "    pm.test(\"Brak \\\"Failures\\\"\", () => {",
                  "        pm.expect.fail(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                  "    });",
                  "} else {",
                  "    pm.test(\"Brak \\\"Failures\\\"\", () => pm.expect(true).to.be.true);",
                  "}",
                  "",
                  "if (!body) {",
                  "    console.error(\"Odpowiedź serwera jest pusta. Przerywam wykonanie.\");",
                  "    pm.test(\"Brak treści w odpowiedzi serwera\", () => {",
                  "        pm.expect.fail(\"Brak treści w odpowiedzi serwera.\");",
                  "    });",
                  "    return;",
                  "}",
                  "",
                  "const linieOdpowiedzi = body.split('\\n');",
                  "",
                  "// Sprawdzenie linii z kodem zadania",
                  "const liniaZKodem = linieOdpowiedzi.find(linia => linia.includes(\"|\" + kod));",
                  "if (!liniaZKodem) {",
                  "    console.error(`Nie znaleziono linii zawierającej kod zadania: ${kod}`);",
                  "    pm.test(\"Linia z kodem zadania istnieje\", () => {",
                  "        pm.expect.fail(`Brak linii z kodem zadania: ${kod}`);",
                  "    });",
                  "    return;",
                  "}",
                  "",
                  "// Szczegółowe filtrowanie linii zgodnie z Groovy (SoapUI)",
                  "const liniaZsoon = linieOdpowiedzi.filter(linia => linia.includes('No information yet. Please try again soon!'));",
                  "const linieZFailed = linieOdpowiedzi.filter(linia => linia.includes('FAILED') && !linia.includes(kod));",
                  "const linieZFailures = linieOdpowiedzi.filter(linia => linia.includes('Failures'));",
                  "const linieZRunNew = linieOdpowiedzi.filter(linia => linia.includes('|RUNNING') || linia.includes('|NEW'));",
                  "",
                  "// Szczegóły błędów specjalnych",
                  "let linieZFailuresSpecjalne = [];",
                  "if (linieZFailures.length > 0) {",
                  "    linieZFailuresSpecjalne = linieOdpowiedzi.filter(linia =>",
                  "        linia.includes('#') ||",
                  "        linia.includes('MAIN:') ||",
                  "        linia.includes('READER:') ||",
                  "        linia.includes('Caused by:') ||",
                  "        linia.includes('WRITER:')",
                  "    );",
                  "}",
                  "",
                  "// Główna logika 1:1 zgodna z Groovy (SoapUI)",
                  "if (liniaZsoon.length === 1) {",
                  "    console.warn(`Należy ponowić sprawdzenie statusu zadania ${kod}`);",
                  "    pm.test(\"Brak komunikatu 'try again soon'\", () => {",
                  "        pm.expect.fail(`Znaleziono 'try again soon' dla zadania ${kod}`);",
                  "    });",
                  "",
                  "} else if (linieZRunNew.length > 0) {",
                  "    console.warn(`Nie wszystkie kroki zostały zakończone dla zadania ${kod}`);",
                  "    pm.test(\"Wszystkie kroki zakończone\", () => {",
                  "        pm.expect.fail(`Znaleziono kroki RUNNING/NEW dla zadania ${kod}`);",
                  "    });",
                  "",
                  "} else if (linieZFailed.length > 0) {",
                  "    if (linieZFailed.length === 1) {",
                  "        console.error(`Wystąpił błąd 'FAILED' dla zadania ${kod}:`);",
                  "        console.error(`      ${linieZFailed[0]}`);",
                  "    } else {",
                  "        console.error(`Wystąpiły błędy 'FAILED' dla zadania ${kod}:`);",
                  "        linieZFailed.forEach(linia => console.error(`      ${linia}`));",
                  "    }",
                  "",
                  "    // Szczegóły  (Failures)",
                  "    if (linieZFailuresSpecjalne.length > 0) {",
                  "        console.error(\"Szczegóły:\");",
                  "        linieZFailuresSpecjalne.forEach(linia => console.error(`      ${linia}`));",
                  "    }",
                  "",
                  "    // Zgłoszenie szczegółowego błędu jako failed test",
                  "    pm.test(\"Brak błędów FAILED\", () => {",
                  "        pm.expect.fail(`Znaleziono linie FAILED dla zadania ${kod}`);",
                  "    });",
                  "",
                  "} else {",
                  "    console.log(`Nie wystąpił błąd 'FAILED' dla zadania ${kod}`);",
                  "    pm.test(\"Brak błędów FAILED\", () => {",
                  "        pm.expect(true).to.be.true;",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "08a014d5-2d49-4142-8016-2f8752fbf889"
              }
            }
          ]
        },
        "parent": {
          "id": "a96c8136-f56e-4c0a-b6ce-56b642bf4d58",
          "name": "Test Steps",
          "item": [
            {
              "id": "e1c974ec-065f-4041-a31f-061a1f7c7395",
              "name": "Odpowiedź-OK",
              "request": {
                "url": {
                  "path": [
                    "statusZadania"
                  ],
                  "host": [
                    "{{BaseURL}}"
                  ],
                  "query": [
                    {
                      "key": "kod",
                      "value": "zadanie_1"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5822a058-c62f-4899-84cf-94858c4322b2",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const body = pm.response.text().trim();",
                      "const kod = pm.request.url.query",
                      "    .find(p => p.key === \"kod\")?.value?.trim() || \"\";",
                      "",
                      "pm.test(\"Valid HTTP Status Codes\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Pierwsza linia\", () => pm.expect(body).to.include(\"Task summary Generated At\"));",
                      "pm.test(\"Naglowek\", () => pm.expect(body).to.include(\"|Kod                                                   |Status   |Cron                          |Start               |Koniec              |Ostatnie OK         |\"));",
                      "pm.test(\"Kod zadania\", () => pm.expect(body).to.include(\"|\" + kod));",
                      "pm.test(\"Podsumowanie\", () => pm.expect(body).to.include(\"Podsumowanie\"));",
                      "",
                      "// Ogólne asercje nieprzerywające dalszej logiki",
                      "if (body.includes(\"FAILED\")) {",
                      "    console.error(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                      "    pm.test(\"Brak \\\"FAILED\\\"\", () => {",
                      "        pm.expect.fail(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                      "    });",
                      "} else {",
                      "    pm.test(\"Brak \\\"FAILED\\\"\", () => pm.expect(true).to.be.true);",
                      "}",
                      "",
                      "if (body.includes(\"Failures\")) {",
                      "    console.error(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                      "    pm.test(\"Brak \\\"Failures\\\"\", () => {",
                      "        pm.expect.fail(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                      "    });",
                      "} else {",
                      "    pm.test(\"Brak \\\"Failures\\\"\", () => pm.expect(true).to.be.true);",
                      "}",
                      "",
                      "if (!body) {",
                      "    console.error(\"Odpowiedź serwera jest pusta. Przerywam wykonanie.\");",
                      "    pm.test(\"Brak treści w odpowiedzi serwera\", () => {",
                      "        pm.expect.fail(\"Brak treści w odpowiedzi serwera.\");",
                      "    });",
                      "    return;",
                      "}",
                      "",
                      "const linieOdpowiedzi = body.split('\\n');",
                      "",
                      "// Sprawdzenie linii z kodem zadania",
                      "const liniaZKodem = linieOdpowiedzi.find(linia => linia.includes(\"|\" + kod));",
                      "if (!liniaZKodem) {",
                      "    console.error(`Nie znaleziono linii zawierającej kod zadania: ${kod}`);",
                      "    pm.test(\"Linia z kodem zadania istnieje\", () => {",
                      "        pm.expect.fail(`Brak linii z kodem zadania: ${kod}`);",
                      "    });",
                      "    return;",
                      "}",
                      "",
                      "// Szczegółowe filtrowanie linii zgodnie z Groovy (SoapUI)",
                      "const liniaZsoon = linieOdpowiedzi.filter(linia => linia.includes('No information yet. Please try again soon!'));",
                      "const linieZFailed = linieOdpowiedzi.filter(linia => linia.includes('FAILED') && !linia.includes(kod));",
                      "const linieZFailures = linieOdpowiedzi.filter(linia => linia.includes('Failures'));",
                      "const linieZRunNew = linieOdpowiedzi.filter(linia => linia.includes('|RUNNING') || linia.includes('|NEW'));",
                      "",
                      "// Szczegóły błędów specjalnych",
                      "let linieZFailuresSpecjalne = [];",
                      "if (linieZFailures.length > 0) {",
                      "    linieZFailuresSpecjalne = linieOdpowiedzi.filter(linia =>",
                      "        linia.includes('#') ||",
                      "        linia.includes('MAIN:') ||",
                      "        linia.includes('READER:') ||",
                      "        linia.includes('Caused by:') ||",
                      "        linia.includes('WRITER:')",
                      "    );",
                      "}",
                      "",
                      "// Główna logika 1:1 zgodna z Groovy (SoapUI)",
                      "if (liniaZsoon.length === 1) {",
                      "    console.warn(`Należy ponowić sprawdzenie statusu zadania ${kod}`);",
                      "    pm.test(\"Brak komunikatu 'try again soon'\", () => {",
                      "        pm.expect.fail(`Znaleziono 'try again soon' dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else if (linieZRunNew.length > 0) {",
                      "    console.warn(`Nie wszystkie kroki zostały zakończone dla zadania ${kod}`);",
                      "    pm.test(\"Wszystkie kroki zakończone\", () => {",
                      "        pm.expect.fail(`Znaleziono kroki RUNNING/NEW dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else if (linieZFailed.length > 0) {",
                      "    if (linieZFailed.length === 1) {",
                      "        console.error(`Wystąpił błąd 'FAILED' dla zadania ${kod}:`);",
                      "        console.error(`      ${linieZFailed[0]}`);",
                      "    } else {",
                      "        console.error(`Wystąpiły błędy 'FAILED' dla zadania ${kod}:`);",
                      "        linieZFailed.forEach(linia => console.error(`      ${linia}`));",
                      "    }",
                      "",
                      "    // Szczegóły  (Failures)",
                      "    if (linieZFailuresSpecjalne.length > 0) {",
                      "        console.error(\"Szczegóły:\");",
                      "        linieZFailuresSpecjalne.forEach(linia => console.error(`      ${linia}`));",
                      "    }",
                      "",
                      "    // Zgłoszenie szczegółowego błędu jako failed test",
                      "    pm.test(\"Brak błędów FAILED\", () => {",
                      "        pm.expect.fail(`Znaleziono linie FAILED dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else {",
                      "    console.log(`Nie wystąpił błąd 'FAILED' dla zadania ${kod}`);",
                      "    pm.test(\"Brak błędów FAILED\", () => {",
                      "        pm.expect(true).to.be.true;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "ac67f8ac-e3da-411a-bfec-228509dfcac8"
                  }
                }
              ]
            },
            {
              "id": "e93e4f3e-18b8-44fe-bd5b-fea9e0c846ad",
              "name": "Odpowiedź-BŁĄD",
              "request": {
                "url": {
                  "path": [
                    "statusZadania"
                  ],
                  "host": [
                    "{{BaseURL}}"
                  ],
                  "query": [
                    {
                      "key": "kod",
                      "value": "zadanie_2"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "60b88e7c-b62b-420a-8cc5-23626d08d919",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const body = pm.response.text().trim();",
                      "const kod = pm.request.url.query",
                      "    .find(p => p.key === \"kod\")?.value?.trim() || \"\";",
                      "",
                      "pm.test(\"Valid HTTP Status Codes\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Pierwsza linia\", () => pm.expect(body).to.include(\"Task summary Generated At\"));",
                      "pm.test(\"Naglowek\", () => pm.expect(body).to.include(\"|Kod                                                   |Status   |Cron                          |Start               |Koniec              |Ostatnie OK         |\"));",
                      "pm.test(\"Kod zadania\", () => pm.expect(body).to.include(\"|\" + kod));",
                      "pm.test(\"Podsumowanie\", () => pm.expect(body).to.include(\"Podsumowanie\"));",
                      "",
                      "// Ogólne asercje nieprzerywające dalszej logiki",
                      "if (body.includes(\"FAILED\")) {",
                      "    console.error(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                      "    pm.test(\"Brak \\\"FAILED\\\"\", () => {",
                      "        pm.expect.fail(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                      "    });",
                      "} else {",
                      "    pm.test(\"Brak \\\"FAILED\\\"\", () => pm.expect(true).to.be.true);",
                      "}",
                      "",
                      "if (body.includes(\"Failures\")) {",
                      "    console.error(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                      "    pm.test(\"Brak \\\"Failures\\\"\", () => {",
                      "        pm.expect.fail(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                      "    });",
                      "} else {",
                      "    pm.test(\"Brak \\\"Failures\\\"\", () => pm.expect(true).to.be.true);",
                      "}",
                      "",
                      "if (!body) {",
                      "    console.error(\"Odpowiedź serwera jest pusta. Przerywam wykonanie.\");",
                      "    pm.test(\"Brak treści w odpowiedzi serwera\", () => {",
                      "        pm.expect.fail(\"Brak treści w odpowiedzi serwera.\");",
                      "    });",
                      "    return;",
                      "}",
                      "",
                      "const linieOdpowiedzi = body.split('\\n');",
                      "",
                      "// Sprawdzenie linii z kodem zadania",
                      "const liniaZKodem = linieOdpowiedzi.find(linia => linia.includes(\"|\" + kod));",
                      "if (!liniaZKodem) {",
                      "    console.error(`Nie znaleziono linii zawierającej kod zadania: ${kod}`);",
                      "    pm.test(\"Linia z kodem zadania istnieje\", () => {",
                      "        pm.expect.fail(`Brak linii z kodem zadania: ${kod}`);",
                      "    });",
                      "    return;",
                      "}",
                      "",
                      "// Szczegółowe filtrowanie linii zgodnie z Groovy (SoapUI)",
                      "const liniaZsoon = linieOdpowiedzi.filter(linia => linia.includes('No information yet. Please try again soon!'));",
                      "const linieZFailed = linieOdpowiedzi.filter(linia => linia.includes('FAILED') && !linia.includes(kod));",
                      "const linieZFailures = linieOdpowiedzi.filter(linia => linia.includes('Failures'));",
                      "const linieZRunNew = linieOdpowiedzi.filter(linia => linia.includes('|RUNNING') || linia.includes('|NEW'));",
                      "",
                      "// Szczegóły błędów specjalnych",
                      "let linieZFailuresSpecjalne = [];",
                      "if (linieZFailures.length > 0) {",
                      "    linieZFailuresSpecjalne = linieOdpowiedzi.filter(linia =>",
                      "        linia.includes('#') ||",
                      "        linia.includes('MAIN:') ||",
                      "        linia.includes('READER:') ||",
                      "        linia.includes('Caused by:') ||",
                      "        linia.includes('WRITER:')",
                      "    );",
                      "}",
                      "",
                      "// Główna logika 1:1 zgodna z Groovy (SoapUI)",
                      "if (liniaZsoon.length === 1) {",
                      "    console.warn(`Należy ponowić sprawdzenie statusu zadania ${kod}`);",
                      "    pm.test(\"Brak komunikatu 'try again soon'\", () => {",
                      "        pm.expect.fail(`Znaleziono 'try again soon' dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else if (linieZRunNew.length > 0) {",
                      "    console.warn(`Nie wszystkie kroki zostały zakończone dla zadania ${kod}`);",
                      "    pm.test(\"Wszystkie kroki zakończone\", () => {",
                      "        pm.expect.fail(`Znaleziono kroki RUNNING/NEW dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else if (linieZFailed.length > 0) {",
                      "    if (linieZFailed.length === 1) {",
                      "        console.error(`Wystąpił błąd 'FAILED' dla zadania ${kod}:`);",
                      "        console.error(`      ${linieZFailed[0]}`);",
                      "    } else {",
                      "        console.error(`Wystąpiły błędy 'FAILED' dla zadania ${kod}:`);",
                      "        linieZFailed.forEach(linia => console.error(`      ${linia}`));",
                      "    }",
                      "",
                      "    // Szczegóły  (Failures)",
                      "    if (linieZFailuresSpecjalne.length > 0) {",
                      "        console.error(\"Szczegóły:\");",
                      "        linieZFailuresSpecjalne.forEach(linia => console.error(`      ${linia}`));",
                      "    }",
                      "",
                      "    // Zgłoszenie szczegółowego błędu jako failed test",
                      "    pm.test(\"Brak błędów FAILED\", () => {",
                      "        pm.expect.fail(`Znaleziono linie FAILED dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else {",
                      "    console.log(`Nie wystąpił błąd 'FAILED' dla zadania ${kod}`);",
                      "    pm.test(\"Brak błędów FAILED\", () => {",
                      "        pm.expect(true).to.be.true;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "08a014d5-2d49-4142-8016-2f8752fbf889"
                  }
                }
              ]
            },
            {
              "id": "a02a0fe7-872f-4ae9-afb8-bceec80e8418",
              "name": "Odpowiedź-BRAK",
              "request": {
                "url": {
                  "path": [
                    "statusZadania"
                  ],
                  "host": [
                    "{{BaseURL}}"
                  ],
                  "query": [
                    {
                      "key": "kod",
                      "value": "zadanie_3"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d789b2ea-582f-4219-8ae2-00fd41f9709e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const body = pm.response.text().trim();",
                      "const kod = pm.request.url.query",
                      "    .find(p => p.key === \"kod\")?.value?.trim() || \"\";",
                      "",
                      "pm.test(\"Valid HTTP Status Codes\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Pierwsza linia\", () => pm.expect(body).to.include(\"Task summary Generated At\"));",
                      "pm.test(\"Naglowek\", () => pm.expect(body).to.include(\"|Kod                                                   |Status   |Cron                          |Start               |Koniec              |Ostatnie OK         |\"));",
                      "pm.test(\"Kod zadania\", () => pm.expect(body).to.include(\"|\" + kod));",
                      "pm.test(\"Podsumowanie\", () => pm.expect(body).to.include(\"Podsumowanie\"));",
                      "",
                      "// Ogólne asercje nieprzerywające dalszej logiki",
                      "if (body.includes(\"FAILED\")) {",
                      "    console.error(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                      "    pm.test(\"Brak \\\"FAILED\\\"\", () => {",
                      "        pm.expect.fail(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                      "    });",
                      "} else {",
                      "    pm.test(\"Brak \\\"FAILED\\\"\", () => pm.expect(true).to.be.true);",
                      "}",
                      "",
                      "if (body.includes(\"Failures\")) {",
                      "    console.error(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                      "    pm.test(\"Brak \\\"Failures\\\"\", () => {",
                      "        pm.expect.fail(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                      "    });",
                      "} else {",
                      "    pm.test(\"Brak \\\"Failures\\\"\", () => pm.expect(true).to.be.true);",
                      "}",
                      "",
                      "if (!body) {",
                      "    console.error(\"Odpowiedź serwera jest pusta. Przerywam wykonanie.\");",
                      "    pm.test(\"Brak treści w odpowiedzi serwera\", () => {",
                      "        pm.expect.fail(\"Brak treści w odpowiedzi serwera.\");",
                      "    });",
                      "    return;",
                      "}",
                      "",
                      "const linieOdpowiedzi = body.split('\\n');",
                      "",
                      "// Sprawdzenie linii z kodem zadania",
                      "const liniaZKodem = linieOdpowiedzi.find(linia => linia.includes(\"|\" + kod));",
                      "if (!liniaZKodem) {",
                      "    console.error(`Nie znaleziono linii zawierającej kod zadania: ${kod}`);",
                      "    pm.test(\"Linia z kodem zadania istnieje\", () => {",
                      "        pm.expect.fail(`Brak linii z kodem zadania: ${kod}`);",
                      "    });",
                      "    return;",
                      "}",
                      "",
                      "// Szczegółowe filtrowanie linii zgodnie z Groovy (SoapUI)",
                      "const liniaZsoon = linieOdpowiedzi.filter(linia => linia.includes('No information yet. Please try again soon!'));",
                      "const linieZFailed = linieOdpowiedzi.filter(linia => linia.includes('FAILED') && !linia.includes(kod));",
                      "const linieZFailures = linieOdpowiedzi.filter(linia => linia.includes('Failures'));",
                      "const linieZRunNew = linieOdpowiedzi.filter(linia => linia.includes('|RUNNING') || linia.includes('|NEW'));",
                      "",
                      "// Szczegóły błędów specjalnych",
                      "let linieZFailuresSpecjalne = [];",
                      "if (linieZFailures.length > 0) {",
                      "    linieZFailuresSpecjalne = linieOdpowiedzi.filter(linia =>",
                      "        linia.includes('#') ||",
                      "        linia.includes('MAIN:') ||",
                      "        linia.includes('READER:') ||",
                      "        linia.includes('Caused by:') ||",
                      "        linia.includes('WRITER:')",
                      "    );",
                      "}",
                      "",
                      "// Główna logika 1:1 zgodna z Groovy (SoapUI)",
                      "if (liniaZsoon.length === 1) {",
                      "    console.warn(`Należy ponowić sprawdzenie statusu zadania ${kod}`);",
                      "    pm.test(\"Brak komunikatu 'try again soon'\", () => {",
                      "        pm.expect.fail(`Znaleziono 'try again soon' dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else if (linieZRunNew.length > 0) {",
                      "    console.warn(`Nie wszystkie kroki zostały zakończone dla zadania ${kod}`);",
                      "    pm.test(\"Wszystkie kroki zakończone\", () => {",
                      "        pm.expect.fail(`Znaleziono kroki RUNNING/NEW dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else if (linieZFailed.length > 0) {",
                      "    if (linieZFailed.length === 1) {",
                      "        console.error(`Wystąpił błąd 'FAILED' dla zadania ${kod}:`);",
                      "        console.error(`      ${linieZFailed[0]}`);",
                      "    } else {",
                      "        console.error(`Wystąpiły błędy 'FAILED' dla zadania ${kod}:`);",
                      "        linieZFailed.forEach(linia => console.error(`      ${linia}`));",
                      "    }",
                      "",
                      "    // Szczegóły  (Failures)",
                      "    if (linieZFailuresSpecjalne.length > 0) {",
                      "        console.error(\"Szczegóły:\");",
                      "        linieZFailuresSpecjalne.forEach(linia => console.error(`      ${linia}`));",
                      "    }",
                      "",
                      "    // Zgłoszenie szczegółowego błędu jako failed test",
                      "    pm.test(\"Brak błędów FAILED\", () => {",
                      "        pm.expect.fail(`Znaleziono linie FAILED dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else {",
                      "    console.log(`Nie wystąpił błąd 'FAILED' dla zadania ${kod}`);",
                      "    pm.test(\"Brak błędów FAILED\", () => {",
                      "        pm.expect(true).to.be.true;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "c5932503-417c-4bd8-873b-339df675fd01"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "523933b0-fd9c-4b30-a176-dcc7dd942479",
          "length": 3,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "579e2395-6079-46e1-9254-931877181cd9",
          "scriptId": "60b88e7c-b62b-420a-8cc5-23626d08d919",
          "execution": "08a014d5-2d49-4142-8016-2f8752fbf889"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Valid HTTP Status Codes",
          "message": "expected response to have status code 200 but got 400",
          "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:3)",
          "checksum": "1744660e1062a77e86f59c32759627ee",
          "id": "f2cddfdc-92b7-4699-8707-9404121fd619",
          "timestamp": 1753867170551,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "a02a0fe7-872f-4ae9-afb8-bceec80e8418",
          "name": "Odpowiedź-BRAK",
          "request": {
            "url": {
              "path": [
                "statusZadania"
              ],
              "host": [
                "{{BaseURL}}"
              ],
              "query": [
                {
                  "key": "kod",
                  "value": "zadanie_3"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d789b2ea-582f-4219-8ae2-00fd41f9709e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const body = pm.response.text().trim();",
                  "const kod = pm.request.url.query",
                  "    .find(p => p.key === \"kod\")?.value?.trim() || \"\";",
                  "",
                  "pm.test(\"Valid HTTP Status Codes\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Pierwsza linia\", () => pm.expect(body).to.include(\"Task summary Generated At\"));",
                  "pm.test(\"Naglowek\", () => pm.expect(body).to.include(\"|Kod                                                   |Status   |Cron                          |Start               |Koniec              |Ostatnie OK         |\"));",
                  "pm.test(\"Kod zadania\", () => pm.expect(body).to.include(\"|\" + kod));",
                  "pm.test(\"Podsumowanie\", () => pm.expect(body).to.include(\"Podsumowanie\"));",
                  "",
                  "// Ogólne asercje nieprzerywające dalszej logiki",
                  "if (body.includes(\"FAILED\")) {",
                  "    console.error(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                  "    pm.test(\"Brak \\\"FAILED\\\"\", () => {",
                  "        pm.expect.fail(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                  "    });",
                  "} else {",
                  "    pm.test(\"Brak \\\"FAILED\\\"\", () => pm.expect(true).to.be.true);",
                  "}",
                  "",
                  "if (body.includes(\"Failures\")) {",
                  "    console.error(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                  "    pm.test(\"Brak \\\"Failures\\\"\", () => {",
                  "        pm.expect.fail(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                  "    });",
                  "} else {",
                  "    pm.test(\"Brak \\\"Failures\\\"\", () => pm.expect(true).to.be.true);",
                  "}",
                  "",
                  "if (!body) {",
                  "    console.error(\"Odpowiedź serwera jest pusta. Przerywam wykonanie.\");",
                  "    pm.test(\"Brak treści w odpowiedzi serwera\", () => {",
                  "        pm.expect.fail(\"Brak treści w odpowiedzi serwera.\");",
                  "    });",
                  "    return;",
                  "}",
                  "",
                  "const linieOdpowiedzi = body.split('\\n');",
                  "",
                  "// Sprawdzenie linii z kodem zadania",
                  "const liniaZKodem = linieOdpowiedzi.find(linia => linia.includes(\"|\" + kod));",
                  "if (!liniaZKodem) {",
                  "    console.error(`Nie znaleziono linii zawierającej kod zadania: ${kod}`);",
                  "    pm.test(\"Linia z kodem zadania istnieje\", () => {",
                  "        pm.expect.fail(`Brak linii z kodem zadania: ${kod}`);",
                  "    });",
                  "    return;",
                  "}",
                  "",
                  "// Szczegółowe filtrowanie linii zgodnie z Groovy (SoapUI)",
                  "const liniaZsoon = linieOdpowiedzi.filter(linia => linia.includes('No information yet. Please try again soon!'));",
                  "const linieZFailed = linieOdpowiedzi.filter(linia => linia.includes('FAILED') && !linia.includes(kod));",
                  "const linieZFailures = linieOdpowiedzi.filter(linia => linia.includes('Failures'));",
                  "const linieZRunNew = linieOdpowiedzi.filter(linia => linia.includes('|RUNNING') || linia.includes('|NEW'));",
                  "",
                  "// Szczegóły błędów specjalnych",
                  "let linieZFailuresSpecjalne = [];",
                  "if (linieZFailures.length > 0) {",
                  "    linieZFailuresSpecjalne = linieOdpowiedzi.filter(linia =>",
                  "        linia.includes('#') ||",
                  "        linia.includes('MAIN:') ||",
                  "        linia.includes('READER:') ||",
                  "        linia.includes('Caused by:') ||",
                  "        linia.includes('WRITER:')",
                  "    );",
                  "}",
                  "",
                  "// Główna logika 1:1 zgodna z Groovy (SoapUI)",
                  "if (liniaZsoon.length === 1) {",
                  "    console.warn(`Należy ponowić sprawdzenie statusu zadania ${kod}`);",
                  "    pm.test(\"Brak komunikatu 'try again soon'\", () => {",
                  "        pm.expect.fail(`Znaleziono 'try again soon' dla zadania ${kod}`);",
                  "    });",
                  "",
                  "} else if (linieZRunNew.length > 0) {",
                  "    console.warn(`Nie wszystkie kroki zostały zakończone dla zadania ${kod}`);",
                  "    pm.test(\"Wszystkie kroki zakończone\", () => {",
                  "        pm.expect.fail(`Znaleziono kroki RUNNING/NEW dla zadania ${kod}`);",
                  "    });",
                  "",
                  "} else if (linieZFailed.length > 0) {",
                  "    if (linieZFailed.length === 1) {",
                  "        console.error(`Wystąpił błąd 'FAILED' dla zadania ${kod}:`);",
                  "        console.error(`      ${linieZFailed[0]}`);",
                  "    } else {",
                  "        console.error(`Wystąpiły błędy 'FAILED' dla zadania ${kod}:`);",
                  "        linieZFailed.forEach(linia => console.error(`      ${linia}`));",
                  "    }",
                  "",
                  "    // Szczegóły  (Failures)",
                  "    if (linieZFailuresSpecjalne.length > 0) {",
                  "        console.error(\"Szczegóły:\");",
                  "        linieZFailuresSpecjalne.forEach(linia => console.error(`      ${linia}`));",
                  "    }",
                  "",
                  "    // Zgłoszenie szczegółowego błędu jako failed test",
                  "    pm.test(\"Brak błędów FAILED\", () => {",
                  "        pm.expect.fail(`Znaleziono linie FAILED dla zadania ${kod}`);",
                  "    });",
                  "",
                  "} else {",
                  "    console.log(`Nie wystąpił błąd 'FAILED' dla zadania ${kod}`);",
                  "    pm.test(\"Brak błędów FAILED\", () => {",
                  "        pm.expect(true).to.be.true;",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "c5932503-417c-4bd8-873b-339df675fd01"
              }
            }
          ]
        },
        "parent": {
          "id": "a96c8136-f56e-4c0a-b6ce-56b642bf4d58",
          "name": "Test Steps",
          "item": [
            {
              "id": "e1c974ec-065f-4041-a31f-061a1f7c7395",
              "name": "Odpowiedź-OK",
              "request": {
                "url": {
                  "path": [
                    "statusZadania"
                  ],
                  "host": [
                    "{{BaseURL}}"
                  ],
                  "query": [
                    {
                      "key": "kod",
                      "value": "zadanie_1"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5822a058-c62f-4899-84cf-94858c4322b2",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const body = pm.response.text().trim();",
                      "const kod = pm.request.url.query",
                      "    .find(p => p.key === \"kod\")?.value?.trim() || \"\";",
                      "",
                      "pm.test(\"Valid HTTP Status Codes\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Pierwsza linia\", () => pm.expect(body).to.include(\"Task summary Generated At\"));",
                      "pm.test(\"Naglowek\", () => pm.expect(body).to.include(\"|Kod                                                   |Status   |Cron                          |Start               |Koniec              |Ostatnie OK         |\"));",
                      "pm.test(\"Kod zadania\", () => pm.expect(body).to.include(\"|\" + kod));",
                      "pm.test(\"Podsumowanie\", () => pm.expect(body).to.include(\"Podsumowanie\"));",
                      "",
                      "// Ogólne asercje nieprzerywające dalszej logiki",
                      "if (body.includes(\"FAILED\")) {",
                      "    console.error(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                      "    pm.test(\"Brak \\\"FAILED\\\"\", () => {",
                      "        pm.expect.fail(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                      "    });",
                      "} else {",
                      "    pm.test(\"Brak \\\"FAILED\\\"\", () => pm.expect(true).to.be.true);",
                      "}",
                      "",
                      "if (body.includes(\"Failures\")) {",
                      "    console.error(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                      "    pm.test(\"Brak \\\"Failures\\\"\", () => {",
                      "        pm.expect.fail(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                      "    });",
                      "} else {",
                      "    pm.test(\"Brak \\\"Failures\\\"\", () => pm.expect(true).to.be.true);",
                      "}",
                      "",
                      "if (!body) {",
                      "    console.error(\"Odpowiedź serwera jest pusta. Przerywam wykonanie.\");",
                      "    pm.test(\"Brak treści w odpowiedzi serwera\", () => {",
                      "        pm.expect.fail(\"Brak treści w odpowiedzi serwera.\");",
                      "    });",
                      "    return;",
                      "}",
                      "",
                      "const linieOdpowiedzi = body.split('\\n');",
                      "",
                      "// Sprawdzenie linii z kodem zadania",
                      "const liniaZKodem = linieOdpowiedzi.find(linia => linia.includes(\"|\" + kod));",
                      "if (!liniaZKodem) {",
                      "    console.error(`Nie znaleziono linii zawierającej kod zadania: ${kod}`);",
                      "    pm.test(\"Linia z kodem zadania istnieje\", () => {",
                      "        pm.expect.fail(`Brak linii z kodem zadania: ${kod}`);",
                      "    });",
                      "    return;",
                      "}",
                      "",
                      "// Szczegółowe filtrowanie linii zgodnie z Groovy (SoapUI)",
                      "const liniaZsoon = linieOdpowiedzi.filter(linia => linia.includes('No information yet. Please try again soon!'));",
                      "const linieZFailed = linieOdpowiedzi.filter(linia => linia.includes('FAILED') && !linia.includes(kod));",
                      "const linieZFailures = linieOdpowiedzi.filter(linia => linia.includes('Failures'));",
                      "const linieZRunNew = linieOdpowiedzi.filter(linia => linia.includes('|RUNNING') || linia.includes('|NEW'));",
                      "",
                      "// Szczegóły błędów specjalnych",
                      "let linieZFailuresSpecjalne = [];",
                      "if (linieZFailures.length > 0) {",
                      "    linieZFailuresSpecjalne = linieOdpowiedzi.filter(linia =>",
                      "        linia.includes('#') ||",
                      "        linia.includes('MAIN:') ||",
                      "        linia.includes('READER:') ||",
                      "        linia.includes('Caused by:') ||",
                      "        linia.includes('WRITER:')",
                      "    );",
                      "}",
                      "",
                      "// Główna logika 1:1 zgodna z Groovy (SoapUI)",
                      "if (liniaZsoon.length === 1) {",
                      "    console.warn(`Należy ponowić sprawdzenie statusu zadania ${kod}`);",
                      "    pm.test(\"Brak komunikatu 'try again soon'\", () => {",
                      "        pm.expect.fail(`Znaleziono 'try again soon' dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else if (linieZRunNew.length > 0) {",
                      "    console.warn(`Nie wszystkie kroki zostały zakończone dla zadania ${kod}`);",
                      "    pm.test(\"Wszystkie kroki zakończone\", () => {",
                      "        pm.expect.fail(`Znaleziono kroki RUNNING/NEW dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else if (linieZFailed.length > 0) {",
                      "    if (linieZFailed.length === 1) {",
                      "        console.error(`Wystąpił błąd 'FAILED' dla zadania ${kod}:`);",
                      "        console.error(`      ${linieZFailed[0]}`);",
                      "    } else {",
                      "        console.error(`Wystąpiły błędy 'FAILED' dla zadania ${kod}:`);",
                      "        linieZFailed.forEach(linia => console.error(`      ${linia}`));",
                      "    }",
                      "",
                      "    // Szczegóły  (Failures)",
                      "    if (linieZFailuresSpecjalne.length > 0) {",
                      "        console.error(\"Szczegóły:\");",
                      "        linieZFailuresSpecjalne.forEach(linia => console.error(`      ${linia}`));",
                      "    }",
                      "",
                      "    // Zgłoszenie szczegółowego błędu jako failed test",
                      "    pm.test(\"Brak błędów FAILED\", () => {",
                      "        pm.expect.fail(`Znaleziono linie FAILED dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else {",
                      "    console.log(`Nie wystąpił błąd 'FAILED' dla zadania ${kod}`);",
                      "    pm.test(\"Brak błędów FAILED\", () => {",
                      "        pm.expect(true).to.be.true;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "ac67f8ac-e3da-411a-bfec-228509dfcac8"
                  }
                }
              ]
            },
            {
              "id": "e93e4f3e-18b8-44fe-bd5b-fea9e0c846ad",
              "name": "Odpowiedź-BŁĄD",
              "request": {
                "url": {
                  "path": [
                    "statusZadania"
                  ],
                  "host": [
                    "{{BaseURL}}"
                  ],
                  "query": [
                    {
                      "key": "kod",
                      "value": "zadanie_2"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "60b88e7c-b62b-420a-8cc5-23626d08d919",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const body = pm.response.text().trim();",
                      "const kod = pm.request.url.query",
                      "    .find(p => p.key === \"kod\")?.value?.trim() || \"\";",
                      "",
                      "pm.test(\"Valid HTTP Status Codes\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Pierwsza linia\", () => pm.expect(body).to.include(\"Task summary Generated At\"));",
                      "pm.test(\"Naglowek\", () => pm.expect(body).to.include(\"|Kod                                                   |Status   |Cron                          |Start               |Koniec              |Ostatnie OK         |\"));",
                      "pm.test(\"Kod zadania\", () => pm.expect(body).to.include(\"|\" + kod));",
                      "pm.test(\"Podsumowanie\", () => pm.expect(body).to.include(\"Podsumowanie\"));",
                      "",
                      "// Ogólne asercje nieprzerywające dalszej logiki",
                      "if (body.includes(\"FAILED\")) {",
                      "    console.error(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                      "    pm.test(\"Brak \\\"FAILED\\\"\", () => {",
                      "        pm.expect.fail(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                      "    });",
                      "} else {",
                      "    pm.test(\"Brak \\\"FAILED\\\"\", () => pm.expect(true).to.be.true);",
                      "}",
                      "",
                      "if (body.includes(\"Failures\")) {",
                      "    console.error(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                      "    pm.test(\"Brak \\\"Failures\\\"\", () => {",
                      "        pm.expect.fail(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                      "    });",
                      "} else {",
                      "    pm.test(\"Brak \\\"Failures\\\"\", () => pm.expect(true).to.be.true);",
                      "}",
                      "",
                      "if (!body) {",
                      "    console.error(\"Odpowiedź serwera jest pusta. Przerywam wykonanie.\");",
                      "    pm.test(\"Brak treści w odpowiedzi serwera\", () => {",
                      "        pm.expect.fail(\"Brak treści w odpowiedzi serwera.\");",
                      "    });",
                      "    return;",
                      "}",
                      "",
                      "const linieOdpowiedzi = body.split('\\n');",
                      "",
                      "// Sprawdzenie linii z kodem zadania",
                      "const liniaZKodem = linieOdpowiedzi.find(linia => linia.includes(\"|\" + kod));",
                      "if (!liniaZKodem) {",
                      "    console.error(`Nie znaleziono linii zawierającej kod zadania: ${kod}`);",
                      "    pm.test(\"Linia z kodem zadania istnieje\", () => {",
                      "        pm.expect.fail(`Brak linii z kodem zadania: ${kod}`);",
                      "    });",
                      "    return;",
                      "}",
                      "",
                      "// Szczegółowe filtrowanie linii zgodnie z Groovy (SoapUI)",
                      "const liniaZsoon = linieOdpowiedzi.filter(linia => linia.includes('No information yet. Please try again soon!'));",
                      "const linieZFailed = linieOdpowiedzi.filter(linia => linia.includes('FAILED') && !linia.includes(kod));",
                      "const linieZFailures = linieOdpowiedzi.filter(linia => linia.includes('Failures'));",
                      "const linieZRunNew = linieOdpowiedzi.filter(linia => linia.includes('|RUNNING') || linia.includes('|NEW'));",
                      "",
                      "// Szczegóły błędów specjalnych",
                      "let linieZFailuresSpecjalne = [];",
                      "if (linieZFailures.length > 0) {",
                      "    linieZFailuresSpecjalne = linieOdpowiedzi.filter(linia =>",
                      "        linia.includes('#') ||",
                      "        linia.includes('MAIN:') ||",
                      "        linia.includes('READER:') ||",
                      "        linia.includes('Caused by:') ||",
                      "        linia.includes('WRITER:')",
                      "    );",
                      "}",
                      "",
                      "// Główna logika 1:1 zgodna z Groovy (SoapUI)",
                      "if (liniaZsoon.length === 1) {",
                      "    console.warn(`Należy ponowić sprawdzenie statusu zadania ${kod}`);",
                      "    pm.test(\"Brak komunikatu 'try again soon'\", () => {",
                      "        pm.expect.fail(`Znaleziono 'try again soon' dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else if (linieZRunNew.length > 0) {",
                      "    console.warn(`Nie wszystkie kroki zostały zakończone dla zadania ${kod}`);",
                      "    pm.test(\"Wszystkie kroki zakończone\", () => {",
                      "        pm.expect.fail(`Znaleziono kroki RUNNING/NEW dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else if (linieZFailed.length > 0) {",
                      "    if (linieZFailed.length === 1) {",
                      "        console.error(`Wystąpił błąd 'FAILED' dla zadania ${kod}:`);",
                      "        console.error(`      ${linieZFailed[0]}`);",
                      "    } else {",
                      "        console.error(`Wystąpiły błędy 'FAILED' dla zadania ${kod}:`);",
                      "        linieZFailed.forEach(linia => console.error(`      ${linia}`));",
                      "    }",
                      "",
                      "    // Szczegóły  (Failures)",
                      "    if (linieZFailuresSpecjalne.length > 0) {",
                      "        console.error(\"Szczegóły:\");",
                      "        linieZFailuresSpecjalne.forEach(linia => console.error(`      ${linia}`));",
                      "    }",
                      "",
                      "    // Zgłoszenie szczegółowego błędu jako failed test",
                      "    pm.test(\"Brak błędów FAILED\", () => {",
                      "        pm.expect.fail(`Znaleziono linie FAILED dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else {",
                      "    console.log(`Nie wystąpił błąd 'FAILED' dla zadania ${kod}`);",
                      "    pm.test(\"Brak błędów FAILED\", () => {",
                      "        pm.expect(true).to.be.true;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "08a014d5-2d49-4142-8016-2f8752fbf889"
                  }
                }
              ]
            },
            {
              "id": "a02a0fe7-872f-4ae9-afb8-bceec80e8418",
              "name": "Odpowiedź-BRAK",
              "request": {
                "url": {
                  "path": [
                    "statusZadania"
                  ],
                  "host": [
                    "{{BaseURL}}"
                  ],
                  "query": [
                    {
                      "key": "kod",
                      "value": "zadanie_3"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d789b2ea-582f-4219-8ae2-00fd41f9709e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const body = pm.response.text().trim();",
                      "const kod = pm.request.url.query",
                      "    .find(p => p.key === \"kod\")?.value?.trim() || \"\";",
                      "",
                      "pm.test(\"Valid HTTP Status Codes\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Pierwsza linia\", () => pm.expect(body).to.include(\"Task summary Generated At\"));",
                      "pm.test(\"Naglowek\", () => pm.expect(body).to.include(\"|Kod                                                   |Status   |Cron                          |Start               |Koniec              |Ostatnie OK         |\"));",
                      "pm.test(\"Kod zadania\", () => pm.expect(body).to.include(\"|\" + kod));",
                      "pm.test(\"Podsumowanie\", () => pm.expect(body).to.include(\"Podsumowanie\"));",
                      "",
                      "// Ogólne asercje nieprzerywające dalszej logiki",
                      "if (body.includes(\"FAILED\")) {",
                      "    console.error(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                      "    pm.test(\"Brak \\\"FAILED\\\"\", () => {",
                      "        pm.expect.fail(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                      "    });",
                      "} else {",
                      "    pm.test(\"Brak \\\"FAILED\\\"\", () => pm.expect(true).to.be.true);",
                      "}",
                      "",
                      "if (body.includes(\"Failures\")) {",
                      "    console.error(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                      "    pm.test(\"Brak \\\"Failures\\\"\", () => {",
                      "        pm.expect.fail(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                      "    });",
                      "} else {",
                      "    pm.test(\"Brak \\\"Failures\\\"\", () => pm.expect(true).to.be.true);",
                      "}",
                      "",
                      "if (!body) {",
                      "    console.error(\"Odpowiedź serwera jest pusta. Przerywam wykonanie.\");",
                      "    pm.test(\"Brak treści w odpowiedzi serwera\", () => {",
                      "        pm.expect.fail(\"Brak treści w odpowiedzi serwera.\");",
                      "    });",
                      "    return;",
                      "}",
                      "",
                      "const linieOdpowiedzi = body.split('\\n');",
                      "",
                      "// Sprawdzenie linii z kodem zadania",
                      "const liniaZKodem = linieOdpowiedzi.find(linia => linia.includes(\"|\" + kod));",
                      "if (!liniaZKodem) {",
                      "    console.error(`Nie znaleziono linii zawierającej kod zadania: ${kod}`);",
                      "    pm.test(\"Linia z kodem zadania istnieje\", () => {",
                      "        pm.expect.fail(`Brak linii z kodem zadania: ${kod}`);",
                      "    });",
                      "    return;",
                      "}",
                      "",
                      "// Szczegółowe filtrowanie linii zgodnie z Groovy (SoapUI)",
                      "const liniaZsoon = linieOdpowiedzi.filter(linia => linia.includes('No information yet. Please try again soon!'));",
                      "const linieZFailed = linieOdpowiedzi.filter(linia => linia.includes('FAILED') && !linia.includes(kod));",
                      "const linieZFailures = linieOdpowiedzi.filter(linia => linia.includes('Failures'));",
                      "const linieZRunNew = linieOdpowiedzi.filter(linia => linia.includes('|RUNNING') || linia.includes('|NEW'));",
                      "",
                      "// Szczegóły błędów specjalnych",
                      "let linieZFailuresSpecjalne = [];",
                      "if (linieZFailures.length > 0) {",
                      "    linieZFailuresSpecjalne = linieOdpowiedzi.filter(linia =>",
                      "        linia.includes('#') ||",
                      "        linia.includes('MAIN:') ||",
                      "        linia.includes('READER:') ||",
                      "        linia.includes('Caused by:') ||",
                      "        linia.includes('WRITER:')",
                      "    );",
                      "}",
                      "",
                      "// Główna logika 1:1 zgodna z Groovy (SoapUI)",
                      "if (liniaZsoon.length === 1) {",
                      "    console.warn(`Należy ponowić sprawdzenie statusu zadania ${kod}`);",
                      "    pm.test(\"Brak komunikatu 'try again soon'\", () => {",
                      "        pm.expect.fail(`Znaleziono 'try again soon' dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else if (linieZRunNew.length > 0) {",
                      "    console.warn(`Nie wszystkie kroki zostały zakończone dla zadania ${kod}`);",
                      "    pm.test(\"Wszystkie kroki zakończone\", () => {",
                      "        pm.expect.fail(`Znaleziono kroki RUNNING/NEW dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else if (linieZFailed.length > 0) {",
                      "    if (linieZFailed.length === 1) {",
                      "        console.error(`Wystąpił błąd 'FAILED' dla zadania ${kod}:`);",
                      "        console.error(`      ${linieZFailed[0]}`);",
                      "    } else {",
                      "        console.error(`Wystąpiły błędy 'FAILED' dla zadania ${kod}:`);",
                      "        linieZFailed.forEach(linia => console.error(`      ${linia}`));",
                      "    }",
                      "",
                      "    // Szczegóły  (Failures)",
                      "    if (linieZFailuresSpecjalne.length > 0) {",
                      "        console.error(\"Szczegóły:\");",
                      "        linieZFailuresSpecjalne.forEach(linia => console.error(`      ${linia}`));",
                      "    }",
                      "",
                      "    // Zgłoszenie szczegółowego błędu jako failed test",
                      "    pm.test(\"Brak błędów FAILED\", () => {",
                      "        pm.expect.fail(`Znaleziono linie FAILED dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else {",
                      "    console.log(`Nie wystąpił błąd 'FAILED' dla zadania ${kod}`);",
                      "    pm.test(\"Brak błędów FAILED\", () => {",
                      "        pm.expect(true).to.be.true;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "c5932503-417c-4bd8-873b-339df675fd01"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9fc38d97-3ac6-4b25-b099-6eb147aabb3c",
          "length": 3,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "ea7a2df6-6f64-479f-ac0a-5ffda8c576f1",
          "scriptId": "d789b2ea-582f-4219-8ae2-00fd41f9709e",
          "execution": "c5932503-417c-4bd8-873b-339df675fd01"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Pierwsza linia",
          "message": "expected 'user@pmaszyna:~ > curl \\'http://aplik…' to include 'Task summary Generated At'",
          "stack": "AssertionError: expected 'user@pmaszyna:~ > curl \\'http://aplik…' to include 'Task summary Generated At'\n   at Object.eval sandbox-script.js:2:3)",
          "checksum": "ca7b7ae6762f2670c91b07a79750d0ef",
          "id": "60956e6f-bbf7-4a3e-a9bc-20d8999d0b83",
          "timestamp": 1753867170552,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "a02a0fe7-872f-4ae9-afb8-bceec80e8418",
          "name": "Odpowiedź-BRAK",
          "request": {
            "url": {
              "path": [
                "statusZadania"
              ],
              "host": [
                "{{BaseURL}}"
              ],
              "query": [
                {
                  "key": "kod",
                  "value": "zadanie_3"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d789b2ea-582f-4219-8ae2-00fd41f9709e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const body = pm.response.text().trim();",
                  "const kod = pm.request.url.query",
                  "    .find(p => p.key === \"kod\")?.value?.trim() || \"\";",
                  "",
                  "pm.test(\"Valid HTTP Status Codes\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Pierwsza linia\", () => pm.expect(body).to.include(\"Task summary Generated At\"));",
                  "pm.test(\"Naglowek\", () => pm.expect(body).to.include(\"|Kod                                                   |Status   |Cron                          |Start               |Koniec              |Ostatnie OK         |\"));",
                  "pm.test(\"Kod zadania\", () => pm.expect(body).to.include(\"|\" + kod));",
                  "pm.test(\"Podsumowanie\", () => pm.expect(body).to.include(\"Podsumowanie\"));",
                  "",
                  "// Ogólne asercje nieprzerywające dalszej logiki",
                  "if (body.includes(\"FAILED\")) {",
                  "    console.error(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                  "    pm.test(\"Brak \\\"FAILED\\\"\", () => {",
                  "        pm.expect.fail(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                  "    });",
                  "} else {",
                  "    pm.test(\"Brak \\\"FAILED\\\"\", () => pm.expect(true).to.be.true);",
                  "}",
                  "",
                  "if (body.includes(\"Failures\")) {",
                  "    console.error(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                  "    pm.test(\"Brak \\\"Failures\\\"\", () => {",
                  "        pm.expect.fail(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                  "    });",
                  "} else {",
                  "    pm.test(\"Brak \\\"Failures\\\"\", () => pm.expect(true).to.be.true);",
                  "}",
                  "",
                  "if (!body) {",
                  "    console.error(\"Odpowiedź serwera jest pusta. Przerywam wykonanie.\");",
                  "    pm.test(\"Brak treści w odpowiedzi serwera\", () => {",
                  "        pm.expect.fail(\"Brak treści w odpowiedzi serwera.\");",
                  "    });",
                  "    return;",
                  "}",
                  "",
                  "const linieOdpowiedzi = body.split('\\n');",
                  "",
                  "// Sprawdzenie linii z kodem zadania",
                  "const liniaZKodem = linieOdpowiedzi.find(linia => linia.includes(\"|\" + kod));",
                  "if (!liniaZKodem) {",
                  "    console.error(`Nie znaleziono linii zawierającej kod zadania: ${kod}`);",
                  "    pm.test(\"Linia z kodem zadania istnieje\", () => {",
                  "        pm.expect.fail(`Brak linii z kodem zadania: ${kod}`);",
                  "    });",
                  "    return;",
                  "}",
                  "",
                  "// Szczegółowe filtrowanie linii zgodnie z Groovy (SoapUI)",
                  "const liniaZsoon = linieOdpowiedzi.filter(linia => linia.includes('No information yet. Please try again soon!'));",
                  "const linieZFailed = linieOdpowiedzi.filter(linia => linia.includes('FAILED') && !linia.includes(kod));",
                  "const linieZFailures = linieOdpowiedzi.filter(linia => linia.includes('Failures'));",
                  "const linieZRunNew = linieOdpowiedzi.filter(linia => linia.includes('|RUNNING') || linia.includes('|NEW'));",
                  "",
                  "// Szczegóły błędów specjalnych",
                  "let linieZFailuresSpecjalne = [];",
                  "if (linieZFailures.length > 0) {",
                  "    linieZFailuresSpecjalne = linieOdpowiedzi.filter(linia =>",
                  "        linia.includes('#') ||",
                  "        linia.includes('MAIN:') ||",
                  "        linia.includes('READER:') ||",
                  "        linia.includes('Caused by:') ||",
                  "        linia.includes('WRITER:')",
                  "    );",
                  "}",
                  "",
                  "// Główna logika 1:1 zgodna z Groovy (SoapUI)",
                  "if (liniaZsoon.length === 1) {",
                  "    console.warn(`Należy ponowić sprawdzenie statusu zadania ${kod}`);",
                  "    pm.test(\"Brak komunikatu 'try again soon'\", () => {",
                  "        pm.expect.fail(`Znaleziono 'try again soon' dla zadania ${kod}`);",
                  "    });",
                  "",
                  "} else if (linieZRunNew.length > 0) {",
                  "    console.warn(`Nie wszystkie kroki zostały zakończone dla zadania ${kod}`);",
                  "    pm.test(\"Wszystkie kroki zakończone\", () => {",
                  "        pm.expect.fail(`Znaleziono kroki RUNNING/NEW dla zadania ${kod}`);",
                  "    });",
                  "",
                  "} else if (linieZFailed.length > 0) {",
                  "    if (linieZFailed.length === 1) {",
                  "        console.error(`Wystąpił błąd 'FAILED' dla zadania ${kod}:`);",
                  "        console.error(`      ${linieZFailed[0]}`);",
                  "    } else {",
                  "        console.error(`Wystąpiły błędy 'FAILED' dla zadania ${kod}:`);",
                  "        linieZFailed.forEach(linia => console.error(`      ${linia}`));",
                  "    }",
                  "",
                  "    // Szczegóły  (Failures)",
                  "    if (linieZFailuresSpecjalne.length > 0) {",
                  "        console.error(\"Szczegóły:\");",
                  "        linieZFailuresSpecjalne.forEach(linia => console.error(`      ${linia}`));",
                  "    }",
                  "",
                  "    // Zgłoszenie szczegółowego błędu jako failed test",
                  "    pm.test(\"Brak błędów FAILED\", () => {",
                  "        pm.expect.fail(`Znaleziono linie FAILED dla zadania ${kod}`);",
                  "    });",
                  "",
                  "} else {",
                  "    console.log(`Nie wystąpił błąd 'FAILED' dla zadania ${kod}`);",
                  "    pm.test(\"Brak błędów FAILED\", () => {",
                  "        pm.expect(true).to.be.true;",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "c5932503-417c-4bd8-873b-339df675fd01"
              }
            }
          ]
        },
        "parent": {
          "id": "a96c8136-f56e-4c0a-b6ce-56b642bf4d58",
          "name": "Test Steps",
          "item": [
            {
              "id": "e1c974ec-065f-4041-a31f-061a1f7c7395",
              "name": "Odpowiedź-OK",
              "request": {
                "url": {
                  "path": [
                    "statusZadania"
                  ],
                  "host": [
                    "{{BaseURL}}"
                  ],
                  "query": [
                    {
                      "key": "kod",
                      "value": "zadanie_1"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5822a058-c62f-4899-84cf-94858c4322b2",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const body = pm.response.text().trim();",
                      "const kod = pm.request.url.query",
                      "    .find(p => p.key === \"kod\")?.value?.trim() || \"\";",
                      "",
                      "pm.test(\"Valid HTTP Status Codes\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Pierwsza linia\", () => pm.expect(body).to.include(\"Task summary Generated At\"));",
                      "pm.test(\"Naglowek\", () => pm.expect(body).to.include(\"|Kod                                                   |Status   |Cron                          |Start               |Koniec              |Ostatnie OK         |\"));",
                      "pm.test(\"Kod zadania\", () => pm.expect(body).to.include(\"|\" + kod));",
                      "pm.test(\"Podsumowanie\", () => pm.expect(body).to.include(\"Podsumowanie\"));",
                      "",
                      "// Ogólne asercje nieprzerywające dalszej logiki",
                      "if (body.includes(\"FAILED\")) {",
                      "    console.error(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                      "    pm.test(\"Brak \\\"FAILED\\\"\", () => {",
                      "        pm.expect.fail(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                      "    });",
                      "} else {",
                      "    pm.test(\"Brak \\\"FAILED\\\"\", () => pm.expect(true).to.be.true);",
                      "}",
                      "",
                      "if (body.includes(\"Failures\")) {",
                      "    console.error(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                      "    pm.test(\"Brak \\\"Failures\\\"\", () => {",
                      "        pm.expect.fail(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                      "    });",
                      "} else {",
                      "    pm.test(\"Brak \\\"Failures\\\"\", () => pm.expect(true).to.be.true);",
                      "}",
                      "",
                      "if (!body) {",
                      "    console.error(\"Odpowiedź serwera jest pusta. Przerywam wykonanie.\");",
                      "    pm.test(\"Brak treści w odpowiedzi serwera\", () => {",
                      "        pm.expect.fail(\"Brak treści w odpowiedzi serwera.\");",
                      "    });",
                      "    return;",
                      "}",
                      "",
                      "const linieOdpowiedzi = body.split('\\n');",
                      "",
                      "// Sprawdzenie linii z kodem zadania",
                      "const liniaZKodem = linieOdpowiedzi.find(linia => linia.includes(\"|\" + kod));",
                      "if (!liniaZKodem) {",
                      "    console.error(`Nie znaleziono linii zawierającej kod zadania: ${kod}`);",
                      "    pm.test(\"Linia z kodem zadania istnieje\", () => {",
                      "        pm.expect.fail(`Brak linii z kodem zadania: ${kod}`);",
                      "    });",
                      "    return;",
                      "}",
                      "",
                      "// Szczegółowe filtrowanie linii zgodnie z Groovy (SoapUI)",
                      "const liniaZsoon = linieOdpowiedzi.filter(linia => linia.includes('No information yet. Please try again soon!'));",
                      "const linieZFailed = linieOdpowiedzi.filter(linia => linia.includes('FAILED') && !linia.includes(kod));",
                      "const linieZFailures = linieOdpowiedzi.filter(linia => linia.includes('Failures'));",
                      "const linieZRunNew = linieOdpowiedzi.filter(linia => linia.includes('|RUNNING') || linia.includes('|NEW'));",
                      "",
                      "// Szczegóły błędów specjalnych",
                      "let linieZFailuresSpecjalne = [];",
                      "if (linieZFailures.length > 0) {",
                      "    linieZFailuresSpecjalne = linieOdpowiedzi.filter(linia =>",
                      "        linia.includes('#') ||",
                      "        linia.includes('MAIN:') ||",
                      "        linia.includes('READER:') ||",
                      "        linia.includes('Caused by:') ||",
                      "        linia.includes('WRITER:')",
                      "    );",
                      "}",
                      "",
                      "// Główna logika 1:1 zgodna z Groovy (SoapUI)",
                      "if (liniaZsoon.length === 1) {",
                      "    console.warn(`Należy ponowić sprawdzenie statusu zadania ${kod}`);",
                      "    pm.test(\"Brak komunikatu 'try again soon'\", () => {",
                      "        pm.expect.fail(`Znaleziono 'try again soon' dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else if (linieZRunNew.length > 0) {",
                      "    console.warn(`Nie wszystkie kroki zostały zakończone dla zadania ${kod}`);",
                      "    pm.test(\"Wszystkie kroki zakończone\", () => {",
                      "        pm.expect.fail(`Znaleziono kroki RUNNING/NEW dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else if (linieZFailed.length > 0) {",
                      "    if (linieZFailed.length === 1) {",
                      "        console.error(`Wystąpił błąd 'FAILED' dla zadania ${kod}:`);",
                      "        console.error(`      ${linieZFailed[0]}`);",
                      "    } else {",
                      "        console.error(`Wystąpiły błędy 'FAILED' dla zadania ${kod}:`);",
                      "        linieZFailed.forEach(linia => console.error(`      ${linia}`));",
                      "    }",
                      "",
                      "    // Szczegóły  (Failures)",
                      "    if (linieZFailuresSpecjalne.length > 0) {",
                      "        console.error(\"Szczegóły:\");",
                      "        linieZFailuresSpecjalne.forEach(linia => console.error(`      ${linia}`));",
                      "    }",
                      "",
                      "    // Zgłoszenie szczegółowego błędu jako failed test",
                      "    pm.test(\"Brak błędów FAILED\", () => {",
                      "        pm.expect.fail(`Znaleziono linie FAILED dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else {",
                      "    console.log(`Nie wystąpił błąd 'FAILED' dla zadania ${kod}`);",
                      "    pm.test(\"Brak błędów FAILED\", () => {",
                      "        pm.expect(true).to.be.true;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "ac67f8ac-e3da-411a-bfec-228509dfcac8"
                  }
                }
              ]
            },
            {
              "id": "e93e4f3e-18b8-44fe-bd5b-fea9e0c846ad",
              "name": "Odpowiedź-BŁĄD",
              "request": {
                "url": {
                  "path": [
                    "statusZadania"
                  ],
                  "host": [
                    "{{BaseURL}}"
                  ],
                  "query": [
                    {
                      "key": "kod",
                      "value": "zadanie_2"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "60b88e7c-b62b-420a-8cc5-23626d08d919",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const body = pm.response.text().trim();",
                      "const kod = pm.request.url.query",
                      "    .find(p => p.key === \"kod\")?.value?.trim() || \"\";",
                      "",
                      "pm.test(\"Valid HTTP Status Codes\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Pierwsza linia\", () => pm.expect(body).to.include(\"Task summary Generated At\"));",
                      "pm.test(\"Naglowek\", () => pm.expect(body).to.include(\"|Kod                                                   |Status   |Cron                          |Start               |Koniec              |Ostatnie OK         |\"));",
                      "pm.test(\"Kod zadania\", () => pm.expect(body).to.include(\"|\" + kod));",
                      "pm.test(\"Podsumowanie\", () => pm.expect(body).to.include(\"Podsumowanie\"));",
                      "",
                      "// Ogólne asercje nieprzerywające dalszej logiki",
                      "if (body.includes(\"FAILED\")) {",
                      "    console.error(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                      "    pm.test(\"Brak \\\"FAILED\\\"\", () => {",
                      "        pm.expect.fail(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                      "    });",
                      "} else {",
                      "    pm.test(\"Brak \\\"FAILED\\\"\", () => pm.expect(true).to.be.true);",
                      "}",
                      "",
                      "if (body.includes(\"Failures\")) {",
                      "    console.error(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                      "    pm.test(\"Brak \\\"Failures\\\"\", () => {",
                      "        pm.expect.fail(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                      "    });",
                      "} else {",
                      "    pm.test(\"Brak \\\"Failures\\\"\", () => pm.expect(true).to.be.true);",
                      "}",
                      "",
                      "if (!body) {",
                      "    console.error(\"Odpowiedź serwera jest pusta. Przerywam wykonanie.\");",
                      "    pm.test(\"Brak treści w odpowiedzi serwera\", () => {",
                      "        pm.expect.fail(\"Brak treści w odpowiedzi serwera.\");",
                      "    });",
                      "    return;",
                      "}",
                      "",
                      "const linieOdpowiedzi = body.split('\\n');",
                      "",
                      "// Sprawdzenie linii z kodem zadania",
                      "const liniaZKodem = linieOdpowiedzi.find(linia => linia.includes(\"|\" + kod));",
                      "if (!liniaZKodem) {",
                      "    console.error(`Nie znaleziono linii zawierającej kod zadania: ${kod}`);",
                      "    pm.test(\"Linia z kodem zadania istnieje\", () => {",
                      "        pm.expect.fail(`Brak linii z kodem zadania: ${kod}`);",
                      "    });",
                      "    return;",
                      "}",
                      "",
                      "// Szczegółowe filtrowanie linii zgodnie z Groovy (SoapUI)",
                      "const liniaZsoon = linieOdpowiedzi.filter(linia => linia.includes('No information yet. Please try again soon!'));",
                      "const linieZFailed = linieOdpowiedzi.filter(linia => linia.includes('FAILED') && !linia.includes(kod));",
                      "const linieZFailures = linieOdpowiedzi.filter(linia => linia.includes('Failures'));",
                      "const linieZRunNew = linieOdpowiedzi.filter(linia => linia.includes('|RUNNING') || linia.includes('|NEW'));",
                      "",
                      "// Szczegóły błędów specjalnych",
                      "let linieZFailuresSpecjalne = [];",
                      "if (linieZFailures.length > 0) {",
                      "    linieZFailuresSpecjalne = linieOdpowiedzi.filter(linia =>",
                      "        linia.includes('#') ||",
                      "        linia.includes('MAIN:') ||",
                      "        linia.includes('READER:') ||",
                      "        linia.includes('Caused by:') ||",
                      "        linia.includes('WRITER:')",
                      "    );",
                      "}",
                      "",
                      "// Główna logika 1:1 zgodna z Groovy (SoapUI)",
                      "if (liniaZsoon.length === 1) {",
                      "    console.warn(`Należy ponowić sprawdzenie statusu zadania ${kod}`);",
                      "    pm.test(\"Brak komunikatu 'try again soon'\", () => {",
                      "        pm.expect.fail(`Znaleziono 'try again soon' dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else if (linieZRunNew.length > 0) {",
                      "    console.warn(`Nie wszystkie kroki zostały zakończone dla zadania ${kod}`);",
                      "    pm.test(\"Wszystkie kroki zakończone\", () => {",
                      "        pm.expect.fail(`Znaleziono kroki RUNNING/NEW dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else if (linieZFailed.length > 0) {",
                      "    if (linieZFailed.length === 1) {",
                      "        console.error(`Wystąpił błąd 'FAILED' dla zadania ${kod}:`);",
                      "        console.error(`      ${linieZFailed[0]}`);",
                      "    } else {",
                      "        console.error(`Wystąpiły błędy 'FAILED' dla zadania ${kod}:`);",
                      "        linieZFailed.forEach(linia => console.error(`      ${linia}`));",
                      "    }",
                      "",
                      "    // Szczegóły  (Failures)",
                      "    if (linieZFailuresSpecjalne.length > 0) {",
                      "        console.error(\"Szczegóły:\");",
                      "        linieZFailuresSpecjalne.forEach(linia => console.error(`      ${linia}`));",
                      "    }",
                      "",
                      "    // Zgłoszenie szczegółowego błędu jako failed test",
                      "    pm.test(\"Brak błędów FAILED\", () => {",
                      "        pm.expect.fail(`Znaleziono linie FAILED dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else {",
                      "    console.log(`Nie wystąpił błąd 'FAILED' dla zadania ${kod}`);",
                      "    pm.test(\"Brak błędów FAILED\", () => {",
                      "        pm.expect(true).to.be.true;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "08a014d5-2d49-4142-8016-2f8752fbf889"
                  }
                }
              ]
            },
            {
              "id": "a02a0fe7-872f-4ae9-afb8-bceec80e8418",
              "name": "Odpowiedź-BRAK",
              "request": {
                "url": {
                  "path": [
                    "statusZadania"
                  ],
                  "host": [
                    "{{BaseURL}}"
                  ],
                  "query": [
                    {
                      "key": "kod",
                      "value": "zadanie_3"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d789b2ea-582f-4219-8ae2-00fd41f9709e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const body = pm.response.text().trim();",
                      "const kod = pm.request.url.query",
                      "    .find(p => p.key === \"kod\")?.value?.trim() || \"\";",
                      "",
                      "pm.test(\"Valid HTTP Status Codes\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Pierwsza linia\", () => pm.expect(body).to.include(\"Task summary Generated At\"));",
                      "pm.test(\"Naglowek\", () => pm.expect(body).to.include(\"|Kod                                                   |Status   |Cron                          |Start               |Koniec              |Ostatnie OK         |\"));",
                      "pm.test(\"Kod zadania\", () => pm.expect(body).to.include(\"|\" + kod));",
                      "pm.test(\"Podsumowanie\", () => pm.expect(body).to.include(\"Podsumowanie\"));",
                      "",
                      "// Ogólne asercje nieprzerywające dalszej logiki",
                      "if (body.includes(\"FAILED\")) {",
                      "    console.error(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                      "    pm.test(\"Brak \\\"FAILED\\\"\", () => {",
                      "        pm.expect.fail(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                      "    });",
                      "} else {",
                      "    pm.test(\"Brak \\\"FAILED\\\"\", () => pm.expect(true).to.be.true);",
                      "}",
                      "",
                      "if (body.includes(\"Failures\")) {",
                      "    console.error(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                      "    pm.test(\"Brak \\\"Failures\\\"\", () => {",
                      "        pm.expect.fail(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                      "    });",
                      "} else {",
                      "    pm.test(\"Brak \\\"Failures\\\"\", () => pm.expect(true).to.be.true);",
                      "}",
                      "",
                      "if (!body) {",
                      "    console.error(\"Odpowiedź serwera jest pusta. Przerywam wykonanie.\");",
                      "    pm.test(\"Brak treści w odpowiedzi serwera\", () => {",
                      "        pm.expect.fail(\"Brak treści w odpowiedzi serwera.\");",
                      "    });",
                      "    return;",
                      "}",
                      "",
                      "const linieOdpowiedzi = body.split('\\n');",
                      "",
                      "// Sprawdzenie linii z kodem zadania",
                      "const liniaZKodem = linieOdpowiedzi.find(linia => linia.includes(\"|\" + kod));",
                      "if (!liniaZKodem) {",
                      "    console.error(`Nie znaleziono linii zawierającej kod zadania: ${kod}`);",
                      "    pm.test(\"Linia z kodem zadania istnieje\", () => {",
                      "        pm.expect.fail(`Brak linii z kodem zadania: ${kod}`);",
                      "    });",
                      "    return;",
                      "}",
                      "",
                      "// Szczegółowe filtrowanie linii zgodnie z Groovy (SoapUI)",
                      "const liniaZsoon = linieOdpowiedzi.filter(linia => linia.includes('No information yet. Please try again soon!'));",
                      "const linieZFailed = linieOdpowiedzi.filter(linia => linia.includes('FAILED') && !linia.includes(kod));",
                      "const linieZFailures = linieOdpowiedzi.filter(linia => linia.includes('Failures'));",
                      "const linieZRunNew = linieOdpowiedzi.filter(linia => linia.includes('|RUNNING') || linia.includes('|NEW'));",
                      "",
                      "// Szczegóły błędów specjalnych",
                      "let linieZFailuresSpecjalne = [];",
                      "if (linieZFailures.length > 0) {",
                      "    linieZFailuresSpecjalne = linieOdpowiedzi.filter(linia =>",
                      "        linia.includes('#') ||",
                      "        linia.includes('MAIN:') ||",
                      "        linia.includes('READER:') ||",
                      "        linia.includes('Caused by:') ||",
                      "        linia.includes('WRITER:')",
                      "    );",
                      "}",
                      "",
                      "// Główna logika 1:1 zgodna z Groovy (SoapUI)",
                      "if (liniaZsoon.length === 1) {",
                      "    console.warn(`Należy ponowić sprawdzenie statusu zadania ${kod}`);",
                      "    pm.test(\"Brak komunikatu 'try again soon'\", () => {",
                      "        pm.expect.fail(`Znaleziono 'try again soon' dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else if (linieZRunNew.length > 0) {",
                      "    console.warn(`Nie wszystkie kroki zostały zakończone dla zadania ${kod}`);",
                      "    pm.test(\"Wszystkie kroki zakończone\", () => {",
                      "        pm.expect.fail(`Znaleziono kroki RUNNING/NEW dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else if (linieZFailed.length > 0) {",
                      "    if (linieZFailed.length === 1) {",
                      "        console.error(`Wystąpił błąd 'FAILED' dla zadania ${kod}:`);",
                      "        console.error(`      ${linieZFailed[0]}`);",
                      "    } else {",
                      "        console.error(`Wystąpiły błędy 'FAILED' dla zadania ${kod}:`);",
                      "        linieZFailed.forEach(linia => console.error(`      ${linia}`));",
                      "    }",
                      "",
                      "    // Szczegóły  (Failures)",
                      "    if (linieZFailuresSpecjalne.length > 0) {",
                      "        console.error(\"Szczegóły:\");",
                      "        linieZFailuresSpecjalne.forEach(linia => console.error(`      ${linia}`));",
                      "    }",
                      "",
                      "    // Zgłoszenie szczegółowego błędu jako failed test",
                      "    pm.test(\"Brak błędów FAILED\", () => {",
                      "        pm.expect.fail(`Znaleziono linie FAILED dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else {",
                      "    console.log(`Nie wystąpił błąd 'FAILED' dla zadania ${kod}`);",
                      "    pm.test(\"Brak błędów FAILED\", () => {",
                      "        pm.expect(true).to.be.true;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "c5932503-417c-4bd8-873b-339df675fd01"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9fc38d97-3ac6-4b25-b099-6eb147aabb3c",
          "length": 3,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "ea7a2df6-6f64-479f-ac0a-5ffda8c576f1",
          "scriptId": "d789b2ea-582f-4219-8ae2-00fd41f9709e",
          "execution": "c5932503-417c-4bd8-873b-339df675fd01"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Naglowek",
          "message": "expected 'user@pmaszyna:~ > curl \\'http://aplik…' to include '|Kod                                 …'",
          "stack": "AssertionError: expected 'user@pmaszyna:~ > curl \\'http://aplik…' to include '|Kod                                 …'\n   at Object.eval sandbox-script.js:3:3)",
          "checksum": "ffc22288e9e6db0e9306598f8e03e1f2",
          "id": "1a84d8cc-5b80-4be0-bbfb-9298df1a6f83",
          "timestamp": 1753867170553,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "a02a0fe7-872f-4ae9-afb8-bceec80e8418",
          "name": "Odpowiedź-BRAK",
          "request": {
            "url": {
              "path": [
                "statusZadania"
              ],
              "host": [
                "{{BaseURL}}"
              ],
              "query": [
                {
                  "key": "kod",
                  "value": "zadanie_3"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d789b2ea-582f-4219-8ae2-00fd41f9709e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const body = pm.response.text().trim();",
                  "const kod = pm.request.url.query",
                  "    .find(p => p.key === \"kod\")?.value?.trim() || \"\";",
                  "",
                  "pm.test(\"Valid HTTP Status Codes\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Pierwsza linia\", () => pm.expect(body).to.include(\"Task summary Generated At\"));",
                  "pm.test(\"Naglowek\", () => pm.expect(body).to.include(\"|Kod                                                   |Status   |Cron                          |Start               |Koniec              |Ostatnie OK         |\"));",
                  "pm.test(\"Kod zadania\", () => pm.expect(body).to.include(\"|\" + kod));",
                  "pm.test(\"Podsumowanie\", () => pm.expect(body).to.include(\"Podsumowanie\"));",
                  "",
                  "// Ogólne asercje nieprzerywające dalszej logiki",
                  "if (body.includes(\"FAILED\")) {",
                  "    console.error(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                  "    pm.test(\"Brak \\\"FAILED\\\"\", () => {",
                  "        pm.expect.fail(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                  "    });",
                  "} else {",
                  "    pm.test(\"Brak \\\"FAILED\\\"\", () => pm.expect(true).to.be.true);",
                  "}",
                  "",
                  "if (body.includes(\"Failures\")) {",
                  "    console.error(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                  "    pm.test(\"Brak \\\"Failures\\\"\", () => {",
                  "        pm.expect.fail(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                  "    });",
                  "} else {",
                  "    pm.test(\"Brak \\\"Failures\\\"\", () => pm.expect(true).to.be.true);",
                  "}",
                  "",
                  "if (!body) {",
                  "    console.error(\"Odpowiedź serwera jest pusta. Przerywam wykonanie.\");",
                  "    pm.test(\"Brak treści w odpowiedzi serwera\", () => {",
                  "        pm.expect.fail(\"Brak treści w odpowiedzi serwera.\");",
                  "    });",
                  "    return;",
                  "}",
                  "",
                  "const linieOdpowiedzi = body.split('\\n');",
                  "",
                  "// Sprawdzenie linii z kodem zadania",
                  "const liniaZKodem = linieOdpowiedzi.find(linia => linia.includes(\"|\" + kod));",
                  "if (!liniaZKodem) {",
                  "    console.error(`Nie znaleziono linii zawierającej kod zadania: ${kod}`);",
                  "    pm.test(\"Linia z kodem zadania istnieje\", () => {",
                  "        pm.expect.fail(`Brak linii z kodem zadania: ${kod}`);",
                  "    });",
                  "    return;",
                  "}",
                  "",
                  "// Szczegółowe filtrowanie linii zgodnie z Groovy (SoapUI)",
                  "const liniaZsoon = linieOdpowiedzi.filter(linia => linia.includes('No information yet. Please try again soon!'));",
                  "const linieZFailed = linieOdpowiedzi.filter(linia => linia.includes('FAILED') && !linia.includes(kod));",
                  "const linieZFailures = linieOdpowiedzi.filter(linia => linia.includes('Failures'));",
                  "const linieZRunNew = linieOdpowiedzi.filter(linia => linia.includes('|RUNNING') || linia.includes('|NEW'));",
                  "",
                  "// Szczegóły błędów specjalnych",
                  "let linieZFailuresSpecjalne = [];",
                  "if (linieZFailures.length > 0) {",
                  "    linieZFailuresSpecjalne = linieOdpowiedzi.filter(linia =>",
                  "        linia.includes('#') ||",
                  "        linia.includes('MAIN:') ||",
                  "        linia.includes('READER:') ||",
                  "        linia.includes('Caused by:') ||",
                  "        linia.includes('WRITER:')",
                  "    );",
                  "}",
                  "",
                  "// Główna logika 1:1 zgodna z Groovy (SoapUI)",
                  "if (liniaZsoon.length === 1) {",
                  "    console.warn(`Należy ponowić sprawdzenie statusu zadania ${kod}`);",
                  "    pm.test(\"Brak komunikatu 'try again soon'\", () => {",
                  "        pm.expect.fail(`Znaleziono 'try again soon' dla zadania ${kod}`);",
                  "    });",
                  "",
                  "} else if (linieZRunNew.length > 0) {",
                  "    console.warn(`Nie wszystkie kroki zostały zakończone dla zadania ${kod}`);",
                  "    pm.test(\"Wszystkie kroki zakończone\", () => {",
                  "        pm.expect.fail(`Znaleziono kroki RUNNING/NEW dla zadania ${kod}`);",
                  "    });",
                  "",
                  "} else if (linieZFailed.length > 0) {",
                  "    if (linieZFailed.length === 1) {",
                  "        console.error(`Wystąpił błąd 'FAILED' dla zadania ${kod}:`);",
                  "        console.error(`      ${linieZFailed[0]}`);",
                  "    } else {",
                  "        console.error(`Wystąpiły błędy 'FAILED' dla zadania ${kod}:`);",
                  "        linieZFailed.forEach(linia => console.error(`      ${linia}`));",
                  "    }",
                  "",
                  "    // Szczegóły  (Failures)",
                  "    if (linieZFailuresSpecjalne.length > 0) {",
                  "        console.error(\"Szczegóły:\");",
                  "        linieZFailuresSpecjalne.forEach(linia => console.error(`      ${linia}`));",
                  "    }",
                  "",
                  "    // Zgłoszenie szczegółowego błędu jako failed test",
                  "    pm.test(\"Brak błędów FAILED\", () => {",
                  "        pm.expect.fail(`Znaleziono linie FAILED dla zadania ${kod}`);",
                  "    });",
                  "",
                  "} else {",
                  "    console.log(`Nie wystąpił błąd 'FAILED' dla zadania ${kod}`);",
                  "    pm.test(\"Brak błędów FAILED\", () => {",
                  "        pm.expect(true).to.be.true;",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "c5932503-417c-4bd8-873b-339df675fd01"
              }
            }
          ]
        },
        "parent": {
          "id": "a96c8136-f56e-4c0a-b6ce-56b642bf4d58",
          "name": "Test Steps",
          "item": [
            {
              "id": "e1c974ec-065f-4041-a31f-061a1f7c7395",
              "name": "Odpowiedź-OK",
              "request": {
                "url": {
                  "path": [
                    "statusZadania"
                  ],
                  "host": [
                    "{{BaseURL}}"
                  ],
                  "query": [
                    {
                      "key": "kod",
                      "value": "zadanie_1"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5822a058-c62f-4899-84cf-94858c4322b2",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const body = pm.response.text().trim();",
                      "const kod = pm.request.url.query",
                      "    .find(p => p.key === \"kod\")?.value?.trim() || \"\";",
                      "",
                      "pm.test(\"Valid HTTP Status Codes\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Pierwsza linia\", () => pm.expect(body).to.include(\"Task summary Generated At\"));",
                      "pm.test(\"Naglowek\", () => pm.expect(body).to.include(\"|Kod                                                   |Status   |Cron                          |Start               |Koniec              |Ostatnie OK         |\"));",
                      "pm.test(\"Kod zadania\", () => pm.expect(body).to.include(\"|\" + kod));",
                      "pm.test(\"Podsumowanie\", () => pm.expect(body).to.include(\"Podsumowanie\"));",
                      "",
                      "// Ogólne asercje nieprzerywające dalszej logiki",
                      "if (body.includes(\"FAILED\")) {",
                      "    console.error(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                      "    pm.test(\"Brak \\\"FAILED\\\"\", () => {",
                      "        pm.expect.fail(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                      "    });",
                      "} else {",
                      "    pm.test(\"Brak \\\"FAILED\\\"\", () => pm.expect(true).to.be.true);",
                      "}",
                      "",
                      "if (body.includes(\"Failures\")) {",
                      "    console.error(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                      "    pm.test(\"Brak \\\"Failures\\\"\", () => {",
                      "        pm.expect.fail(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                      "    });",
                      "} else {",
                      "    pm.test(\"Brak \\\"Failures\\\"\", () => pm.expect(true).to.be.true);",
                      "}",
                      "",
                      "if (!body) {",
                      "    console.error(\"Odpowiedź serwera jest pusta. Przerywam wykonanie.\");",
                      "    pm.test(\"Brak treści w odpowiedzi serwera\", () => {",
                      "        pm.expect.fail(\"Brak treści w odpowiedzi serwera.\");",
                      "    });",
                      "    return;",
                      "}",
                      "",
                      "const linieOdpowiedzi = body.split('\\n');",
                      "",
                      "// Sprawdzenie linii z kodem zadania",
                      "const liniaZKodem = linieOdpowiedzi.find(linia => linia.includes(\"|\" + kod));",
                      "if (!liniaZKodem) {",
                      "    console.error(`Nie znaleziono linii zawierającej kod zadania: ${kod}`);",
                      "    pm.test(\"Linia z kodem zadania istnieje\", () => {",
                      "        pm.expect.fail(`Brak linii z kodem zadania: ${kod}`);",
                      "    });",
                      "    return;",
                      "}",
                      "",
                      "// Szczegółowe filtrowanie linii zgodnie z Groovy (SoapUI)",
                      "const liniaZsoon = linieOdpowiedzi.filter(linia => linia.includes('No information yet. Please try again soon!'));",
                      "const linieZFailed = linieOdpowiedzi.filter(linia => linia.includes('FAILED') && !linia.includes(kod));",
                      "const linieZFailures = linieOdpowiedzi.filter(linia => linia.includes('Failures'));",
                      "const linieZRunNew = linieOdpowiedzi.filter(linia => linia.includes('|RUNNING') || linia.includes('|NEW'));",
                      "",
                      "// Szczegóły błędów specjalnych",
                      "let linieZFailuresSpecjalne = [];",
                      "if (linieZFailures.length > 0) {",
                      "    linieZFailuresSpecjalne = linieOdpowiedzi.filter(linia =>",
                      "        linia.includes('#') ||",
                      "        linia.includes('MAIN:') ||",
                      "        linia.includes('READER:') ||",
                      "        linia.includes('Caused by:') ||",
                      "        linia.includes('WRITER:')",
                      "    );",
                      "}",
                      "",
                      "// Główna logika 1:1 zgodna z Groovy (SoapUI)",
                      "if (liniaZsoon.length === 1) {",
                      "    console.warn(`Należy ponowić sprawdzenie statusu zadania ${kod}`);",
                      "    pm.test(\"Brak komunikatu 'try again soon'\", () => {",
                      "        pm.expect.fail(`Znaleziono 'try again soon' dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else if (linieZRunNew.length > 0) {",
                      "    console.warn(`Nie wszystkie kroki zostały zakończone dla zadania ${kod}`);",
                      "    pm.test(\"Wszystkie kroki zakończone\", () => {",
                      "        pm.expect.fail(`Znaleziono kroki RUNNING/NEW dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else if (linieZFailed.length > 0) {",
                      "    if (linieZFailed.length === 1) {",
                      "        console.error(`Wystąpił błąd 'FAILED' dla zadania ${kod}:`);",
                      "        console.error(`      ${linieZFailed[0]}`);",
                      "    } else {",
                      "        console.error(`Wystąpiły błędy 'FAILED' dla zadania ${kod}:`);",
                      "        linieZFailed.forEach(linia => console.error(`      ${linia}`));",
                      "    }",
                      "",
                      "    // Szczegóły  (Failures)",
                      "    if (linieZFailuresSpecjalne.length > 0) {",
                      "        console.error(\"Szczegóły:\");",
                      "        linieZFailuresSpecjalne.forEach(linia => console.error(`      ${linia}`));",
                      "    }",
                      "",
                      "    // Zgłoszenie szczegółowego błędu jako failed test",
                      "    pm.test(\"Brak błędów FAILED\", () => {",
                      "        pm.expect.fail(`Znaleziono linie FAILED dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else {",
                      "    console.log(`Nie wystąpił błąd 'FAILED' dla zadania ${kod}`);",
                      "    pm.test(\"Brak błędów FAILED\", () => {",
                      "        pm.expect(true).to.be.true;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "ac67f8ac-e3da-411a-bfec-228509dfcac8"
                  }
                }
              ]
            },
            {
              "id": "e93e4f3e-18b8-44fe-bd5b-fea9e0c846ad",
              "name": "Odpowiedź-BŁĄD",
              "request": {
                "url": {
                  "path": [
                    "statusZadania"
                  ],
                  "host": [
                    "{{BaseURL}}"
                  ],
                  "query": [
                    {
                      "key": "kod",
                      "value": "zadanie_2"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "60b88e7c-b62b-420a-8cc5-23626d08d919",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const body = pm.response.text().trim();",
                      "const kod = pm.request.url.query",
                      "    .find(p => p.key === \"kod\")?.value?.trim() || \"\";",
                      "",
                      "pm.test(\"Valid HTTP Status Codes\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Pierwsza linia\", () => pm.expect(body).to.include(\"Task summary Generated At\"));",
                      "pm.test(\"Naglowek\", () => pm.expect(body).to.include(\"|Kod                                                   |Status   |Cron                          |Start               |Koniec              |Ostatnie OK         |\"));",
                      "pm.test(\"Kod zadania\", () => pm.expect(body).to.include(\"|\" + kod));",
                      "pm.test(\"Podsumowanie\", () => pm.expect(body).to.include(\"Podsumowanie\"));",
                      "",
                      "// Ogólne asercje nieprzerywające dalszej logiki",
                      "if (body.includes(\"FAILED\")) {",
                      "    console.error(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                      "    pm.test(\"Brak \\\"FAILED\\\"\", () => {",
                      "        pm.expect.fail(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                      "    });",
                      "} else {",
                      "    pm.test(\"Brak \\\"FAILED\\\"\", () => pm.expect(true).to.be.true);",
                      "}",
                      "",
                      "if (body.includes(\"Failures\")) {",
                      "    console.error(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                      "    pm.test(\"Brak \\\"Failures\\\"\", () => {",
                      "        pm.expect.fail(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                      "    });",
                      "} else {",
                      "    pm.test(\"Brak \\\"Failures\\\"\", () => pm.expect(true).to.be.true);",
                      "}",
                      "",
                      "if (!body) {",
                      "    console.error(\"Odpowiedź serwera jest pusta. Przerywam wykonanie.\");",
                      "    pm.test(\"Brak treści w odpowiedzi serwera\", () => {",
                      "        pm.expect.fail(\"Brak treści w odpowiedzi serwera.\");",
                      "    });",
                      "    return;",
                      "}",
                      "",
                      "const linieOdpowiedzi = body.split('\\n');",
                      "",
                      "// Sprawdzenie linii z kodem zadania",
                      "const liniaZKodem = linieOdpowiedzi.find(linia => linia.includes(\"|\" + kod));",
                      "if (!liniaZKodem) {",
                      "    console.error(`Nie znaleziono linii zawierającej kod zadania: ${kod}`);",
                      "    pm.test(\"Linia z kodem zadania istnieje\", () => {",
                      "        pm.expect.fail(`Brak linii z kodem zadania: ${kod}`);",
                      "    });",
                      "    return;",
                      "}",
                      "",
                      "// Szczegółowe filtrowanie linii zgodnie z Groovy (SoapUI)",
                      "const liniaZsoon = linieOdpowiedzi.filter(linia => linia.includes('No information yet. Please try again soon!'));",
                      "const linieZFailed = linieOdpowiedzi.filter(linia => linia.includes('FAILED') && !linia.includes(kod));",
                      "const linieZFailures = linieOdpowiedzi.filter(linia => linia.includes('Failures'));",
                      "const linieZRunNew = linieOdpowiedzi.filter(linia => linia.includes('|RUNNING') || linia.includes('|NEW'));",
                      "",
                      "// Szczegóły błędów specjalnych",
                      "let linieZFailuresSpecjalne = [];",
                      "if (linieZFailures.length > 0) {",
                      "    linieZFailuresSpecjalne = linieOdpowiedzi.filter(linia =>",
                      "        linia.includes('#') ||",
                      "        linia.includes('MAIN:') ||",
                      "        linia.includes('READER:') ||",
                      "        linia.includes('Caused by:') ||",
                      "        linia.includes('WRITER:')",
                      "    );",
                      "}",
                      "",
                      "// Główna logika 1:1 zgodna z Groovy (SoapUI)",
                      "if (liniaZsoon.length === 1) {",
                      "    console.warn(`Należy ponowić sprawdzenie statusu zadania ${kod}`);",
                      "    pm.test(\"Brak komunikatu 'try again soon'\", () => {",
                      "        pm.expect.fail(`Znaleziono 'try again soon' dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else if (linieZRunNew.length > 0) {",
                      "    console.warn(`Nie wszystkie kroki zostały zakończone dla zadania ${kod}`);",
                      "    pm.test(\"Wszystkie kroki zakończone\", () => {",
                      "        pm.expect.fail(`Znaleziono kroki RUNNING/NEW dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else if (linieZFailed.length > 0) {",
                      "    if (linieZFailed.length === 1) {",
                      "        console.error(`Wystąpił błąd 'FAILED' dla zadania ${kod}:`);",
                      "        console.error(`      ${linieZFailed[0]}`);",
                      "    } else {",
                      "        console.error(`Wystąpiły błędy 'FAILED' dla zadania ${kod}:`);",
                      "        linieZFailed.forEach(linia => console.error(`      ${linia}`));",
                      "    }",
                      "",
                      "    // Szczegóły  (Failures)",
                      "    if (linieZFailuresSpecjalne.length > 0) {",
                      "        console.error(\"Szczegóły:\");",
                      "        linieZFailuresSpecjalne.forEach(linia => console.error(`      ${linia}`));",
                      "    }",
                      "",
                      "    // Zgłoszenie szczegółowego błędu jako failed test",
                      "    pm.test(\"Brak błędów FAILED\", () => {",
                      "        pm.expect.fail(`Znaleziono linie FAILED dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else {",
                      "    console.log(`Nie wystąpił błąd 'FAILED' dla zadania ${kod}`);",
                      "    pm.test(\"Brak błędów FAILED\", () => {",
                      "        pm.expect(true).to.be.true;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "08a014d5-2d49-4142-8016-2f8752fbf889"
                  }
                }
              ]
            },
            {
              "id": "a02a0fe7-872f-4ae9-afb8-bceec80e8418",
              "name": "Odpowiedź-BRAK",
              "request": {
                "url": {
                  "path": [
                    "statusZadania"
                  ],
                  "host": [
                    "{{BaseURL}}"
                  ],
                  "query": [
                    {
                      "key": "kod",
                      "value": "zadanie_3"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d789b2ea-582f-4219-8ae2-00fd41f9709e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const body = pm.response.text().trim();",
                      "const kod = pm.request.url.query",
                      "    .find(p => p.key === \"kod\")?.value?.trim() || \"\";",
                      "",
                      "pm.test(\"Valid HTTP Status Codes\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Pierwsza linia\", () => pm.expect(body).to.include(\"Task summary Generated At\"));",
                      "pm.test(\"Naglowek\", () => pm.expect(body).to.include(\"|Kod                                                   |Status   |Cron                          |Start               |Koniec              |Ostatnie OK         |\"));",
                      "pm.test(\"Kod zadania\", () => pm.expect(body).to.include(\"|\" + kod));",
                      "pm.test(\"Podsumowanie\", () => pm.expect(body).to.include(\"Podsumowanie\"));",
                      "",
                      "// Ogólne asercje nieprzerywające dalszej logiki",
                      "if (body.includes(\"FAILED\")) {",
                      "    console.error(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                      "    pm.test(\"Brak \\\"FAILED\\\"\", () => {",
                      "        pm.expect.fail(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                      "    });",
                      "} else {",
                      "    pm.test(\"Brak \\\"FAILED\\\"\", () => pm.expect(true).to.be.true);",
                      "}",
                      "",
                      "if (body.includes(\"Failures\")) {",
                      "    console.error(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                      "    pm.test(\"Brak \\\"Failures\\\"\", () => {",
                      "        pm.expect.fail(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                      "    });",
                      "} else {",
                      "    pm.test(\"Brak \\\"Failures\\\"\", () => pm.expect(true).to.be.true);",
                      "}",
                      "",
                      "if (!body) {",
                      "    console.error(\"Odpowiedź serwera jest pusta. Przerywam wykonanie.\");",
                      "    pm.test(\"Brak treści w odpowiedzi serwera\", () => {",
                      "        pm.expect.fail(\"Brak treści w odpowiedzi serwera.\");",
                      "    });",
                      "    return;",
                      "}",
                      "",
                      "const linieOdpowiedzi = body.split('\\n');",
                      "",
                      "// Sprawdzenie linii z kodem zadania",
                      "const liniaZKodem = linieOdpowiedzi.find(linia => linia.includes(\"|\" + kod));",
                      "if (!liniaZKodem) {",
                      "    console.error(`Nie znaleziono linii zawierającej kod zadania: ${kod}`);",
                      "    pm.test(\"Linia z kodem zadania istnieje\", () => {",
                      "        pm.expect.fail(`Brak linii z kodem zadania: ${kod}`);",
                      "    });",
                      "    return;",
                      "}",
                      "",
                      "// Szczegółowe filtrowanie linii zgodnie z Groovy (SoapUI)",
                      "const liniaZsoon = linieOdpowiedzi.filter(linia => linia.includes('No information yet. Please try again soon!'));",
                      "const linieZFailed = linieOdpowiedzi.filter(linia => linia.includes('FAILED') && !linia.includes(kod));",
                      "const linieZFailures = linieOdpowiedzi.filter(linia => linia.includes('Failures'));",
                      "const linieZRunNew = linieOdpowiedzi.filter(linia => linia.includes('|RUNNING') || linia.includes('|NEW'));",
                      "",
                      "// Szczegóły błędów specjalnych",
                      "let linieZFailuresSpecjalne = [];",
                      "if (linieZFailures.length > 0) {",
                      "    linieZFailuresSpecjalne = linieOdpowiedzi.filter(linia =>",
                      "        linia.includes('#') ||",
                      "        linia.includes('MAIN:') ||",
                      "        linia.includes('READER:') ||",
                      "        linia.includes('Caused by:') ||",
                      "        linia.includes('WRITER:')",
                      "    );",
                      "}",
                      "",
                      "// Główna logika 1:1 zgodna z Groovy (SoapUI)",
                      "if (liniaZsoon.length === 1) {",
                      "    console.warn(`Należy ponowić sprawdzenie statusu zadania ${kod}`);",
                      "    pm.test(\"Brak komunikatu 'try again soon'\", () => {",
                      "        pm.expect.fail(`Znaleziono 'try again soon' dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else if (linieZRunNew.length > 0) {",
                      "    console.warn(`Nie wszystkie kroki zostały zakończone dla zadania ${kod}`);",
                      "    pm.test(\"Wszystkie kroki zakończone\", () => {",
                      "        pm.expect.fail(`Znaleziono kroki RUNNING/NEW dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else if (linieZFailed.length > 0) {",
                      "    if (linieZFailed.length === 1) {",
                      "        console.error(`Wystąpił błąd 'FAILED' dla zadania ${kod}:`);",
                      "        console.error(`      ${linieZFailed[0]}`);",
                      "    } else {",
                      "        console.error(`Wystąpiły błędy 'FAILED' dla zadania ${kod}:`);",
                      "        linieZFailed.forEach(linia => console.error(`      ${linia}`));",
                      "    }",
                      "",
                      "    // Szczegóły  (Failures)",
                      "    if (linieZFailuresSpecjalne.length > 0) {",
                      "        console.error(\"Szczegóły:\");",
                      "        linieZFailuresSpecjalne.forEach(linia => console.error(`      ${linia}`));",
                      "    }",
                      "",
                      "    // Zgłoszenie szczegółowego błędu jako failed test",
                      "    pm.test(\"Brak błędów FAILED\", () => {",
                      "        pm.expect.fail(`Znaleziono linie FAILED dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else {",
                      "    console.log(`Nie wystąpił błąd 'FAILED' dla zadania ${kod}`);",
                      "    pm.test(\"Brak błędów FAILED\", () => {",
                      "        pm.expect(true).to.be.true;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "c5932503-417c-4bd8-873b-339df675fd01"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9fc38d97-3ac6-4b25-b099-6eb147aabb3c",
          "length": 3,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "ea7a2df6-6f64-479f-ac0a-5ffda8c576f1",
          "scriptId": "d789b2ea-582f-4219-8ae2-00fd41f9709e",
          "execution": "c5932503-417c-4bd8-873b-339df675fd01"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 3,
          "test": "Kod zadania",
          "message": "expected 'user@pmaszyna:~ > curl \\'http://aplik…' to include '|zadanie_3'",
          "stack": "AssertionError: expected 'user@pmaszyna:~ > curl \\'http://aplik…' to include '|zadanie_3'\n   at Object.eval sandbox-script.js:4:3)",
          "checksum": "ac7c64bc303bc4a782367c252c605745",
          "id": "0519f43e-0485-4be4-9569-968e24d3ecc6",
          "timestamp": 1753867170553,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "a02a0fe7-872f-4ae9-afb8-bceec80e8418",
          "name": "Odpowiedź-BRAK",
          "request": {
            "url": {
              "path": [
                "statusZadania"
              ],
              "host": [
                "{{BaseURL}}"
              ],
              "query": [
                {
                  "key": "kod",
                  "value": "zadanie_3"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d789b2ea-582f-4219-8ae2-00fd41f9709e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const body = pm.response.text().trim();",
                  "const kod = pm.request.url.query",
                  "    .find(p => p.key === \"kod\")?.value?.trim() || \"\";",
                  "",
                  "pm.test(\"Valid HTTP Status Codes\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Pierwsza linia\", () => pm.expect(body).to.include(\"Task summary Generated At\"));",
                  "pm.test(\"Naglowek\", () => pm.expect(body).to.include(\"|Kod                                                   |Status   |Cron                          |Start               |Koniec              |Ostatnie OK         |\"));",
                  "pm.test(\"Kod zadania\", () => pm.expect(body).to.include(\"|\" + kod));",
                  "pm.test(\"Podsumowanie\", () => pm.expect(body).to.include(\"Podsumowanie\"));",
                  "",
                  "// Ogólne asercje nieprzerywające dalszej logiki",
                  "if (body.includes(\"FAILED\")) {",
                  "    console.error(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                  "    pm.test(\"Brak \\\"FAILED\\\"\", () => {",
                  "        pm.expect.fail(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                  "    });",
                  "} else {",
                  "    pm.test(\"Brak \\\"FAILED\\\"\", () => pm.expect(true).to.be.true);",
                  "}",
                  "",
                  "if (body.includes(\"Failures\")) {",
                  "    console.error(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                  "    pm.test(\"Brak \\\"Failures\\\"\", () => {",
                  "        pm.expect.fail(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                  "    });",
                  "} else {",
                  "    pm.test(\"Brak \\\"Failures\\\"\", () => pm.expect(true).to.be.true);",
                  "}",
                  "",
                  "if (!body) {",
                  "    console.error(\"Odpowiedź serwera jest pusta. Przerywam wykonanie.\");",
                  "    pm.test(\"Brak treści w odpowiedzi serwera\", () => {",
                  "        pm.expect.fail(\"Brak treści w odpowiedzi serwera.\");",
                  "    });",
                  "    return;",
                  "}",
                  "",
                  "const linieOdpowiedzi = body.split('\\n');",
                  "",
                  "// Sprawdzenie linii z kodem zadania",
                  "const liniaZKodem = linieOdpowiedzi.find(linia => linia.includes(\"|\" + kod));",
                  "if (!liniaZKodem) {",
                  "    console.error(`Nie znaleziono linii zawierającej kod zadania: ${kod}`);",
                  "    pm.test(\"Linia z kodem zadania istnieje\", () => {",
                  "        pm.expect.fail(`Brak linii z kodem zadania: ${kod}`);",
                  "    });",
                  "    return;",
                  "}",
                  "",
                  "// Szczegółowe filtrowanie linii zgodnie z Groovy (SoapUI)",
                  "const liniaZsoon = linieOdpowiedzi.filter(linia => linia.includes('No information yet. Please try again soon!'));",
                  "const linieZFailed = linieOdpowiedzi.filter(linia => linia.includes('FAILED') && !linia.includes(kod));",
                  "const linieZFailures = linieOdpowiedzi.filter(linia => linia.includes('Failures'));",
                  "const linieZRunNew = linieOdpowiedzi.filter(linia => linia.includes('|RUNNING') || linia.includes('|NEW'));",
                  "",
                  "// Szczegóły błędów specjalnych",
                  "let linieZFailuresSpecjalne = [];",
                  "if (linieZFailures.length > 0) {",
                  "    linieZFailuresSpecjalne = linieOdpowiedzi.filter(linia =>",
                  "        linia.includes('#') ||",
                  "        linia.includes('MAIN:') ||",
                  "        linia.includes('READER:') ||",
                  "        linia.includes('Caused by:') ||",
                  "        linia.includes('WRITER:')",
                  "    );",
                  "}",
                  "",
                  "// Główna logika 1:1 zgodna z Groovy (SoapUI)",
                  "if (liniaZsoon.length === 1) {",
                  "    console.warn(`Należy ponowić sprawdzenie statusu zadania ${kod}`);",
                  "    pm.test(\"Brak komunikatu 'try again soon'\", () => {",
                  "        pm.expect.fail(`Znaleziono 'try again soon' dla zadania ${kod}`);",
                  "    });",
                  "",
                  "} else if (linieZRunNew.length > 0) {",
                  "    console.warn(`Nie wszystkie kroki zostały zakończone dla zadania ${kod}`);",
                  "    pm.test(\"Wszystkie kroki zakończone\", () => {",
                  "        pm.expect.fail(`Znaleziono kroki RUNNING/NEW dla zadania ${kod}`);",
                  "    });",
                  "",
                  "} else if (linieZFailed.length > 0) {",
                  "    if (linieZFailed.length === 1) {",
                  "        console.error(`Wystąpił błąd 'FAILED' dla zadania ${kod}:`);",
                  "        console.error(`      ${linieZFailed[0]}`);",
                  "    } else {",
                  "        console.error(`Wystąpiły błędy 'FAILED' dla zadania ${kod}:`);",
                  "        linieZFailed.forEach(linia => console.error(`      ${linia}`));",
                  "    }",
                  "",
                  "    // Szczegóły  (Failures)",
                  "    if (linieZFailuresSpecjalne.length > 0) {",
                  "        console.error(\"Szczegóły:\");",
                  "        linieZFailuresSpecjalne.forEach(linia => console.error(`      ${linia}`));",
                  "    }",
                  "",
                  "    // Zgłoszenie szczegółowego błędu jako failed test",
                  "    pm.test(\"Brak błędów FAILED\", () => {",
                  "        pm.expect.fail(`Znaleziono linie FAILED dla zadania ${kod}`);",
                  "    });",
                  "",
                  "} else {",
                  "    console.log(`Nie wystąpił błąd 'FAILED' dla zadania ${kod}`);",
                  "    pm.test(\"Brak błędów FAILED\", () => {",
                  "        pm.expect(true).to.be.true;",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "c5932503-417c-4bd8-873b-339df675fd01"
              }
            }
          ]
        },
        "parent": {
          "id": "a96c8136-f56e-4c0a-b6ce-56b642bf4d58",
          "name": "Test Steps",
          "item": [
            {
              "id": "e1c974ec-065f-4041-a31f-061a1f7c7395",
              "name": "Odpowiedź-OK",
              "request": {
                "url": {
                  "path": [
                    "statusZadania"
                  ],
                  "host": [
                    "{{BaseURL}}"
                  ],
                  "query": [
                    {
                      "key": "kod",
                      "value": "zadanie_1"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5822a058-c62f-4899-84cf-94858c4322b2",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const body = pm.response.text().trim();",
                      "const kod = pm.request.url.query",
                      "    .find(p => p.key === \"kod\")?.value?.trim() || \"\";",
                      "",
                      "pm.test(\"Valid HTTP Status Codes\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Pierwsza linia\", () => pm.expect(body).to.include(\"Task summary Generated At\"));",
                      "pm.test(\"Naglowek\", () => pm.expect(body).to.include(\"|Kod                                                   |Status   |Cron                          |Start               |Koniec              |Ostatnie OK         |\"));",
                      "pm.test(\"Kod zadania\", () => pm.expect(body).to.include(\"|\" + kod));",
                      "pm.test(\"Podsumowanie\", () => pm.expect(body).to.include(\"Podsumowanie\"));",
                      "",
                      "// Ogólne asercje nieprzerywające dalszej logiki",
                      "if (body.includes(\"FAILED\")) {",
                      "    console.error(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                      "    pm.test(\"Brak \\\"FAILED\\\"\", () => {",
                      "        pm.expect.fail(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                      "    });",
                      "} else {",
                      "    pm.test(\"Brak \\\"FAILED\\\"\", () => pm.expect(true).to.be.true);",
                      "}",
                      "",
                      "if (body.includes(\"Failures\")) {",
                      "    console.error(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                      "    pm.test(\"Brak \\\"Failures\\\"\", () => {",
                      "        pm.expect.fail(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                      "    });",
                      "} else {",
                      "    pm.test(\"Brak \\\"Failures\\\"\", () => pm.expect(true).to.be.true);",
                      "}",
                      "",
                      "if (!body) {",
                      "    console.error(\"Odpowiedź serwera jest pusta. Przerywam wykonanie.\");",
                      "    pm.test(\"Brak treści w odpowiedzi serwera\", () => {",
                      "        pm.expect.fail(\"Brak treści w odpowiedzi serwera.\");",
                      "    });",
                      "    return;",
                      "}",
                      "",
                      "const linieOdpowiedzi = body.split('\\n');",
                      "",
                      "// Sprawdzenie linii z kodem zadania",
                      "const liniaZKodem = linieOdpowiedzi.find(linia => linia.includes(\"|\" + kod));",
                      "if (!liniaZKodem) {",
                      "    console.error(`Nie znaleziono linii zawierającej kod zadania: ${kod}`);",
                      "    pm.test(\"Linia z kodem zadania istnieje\", () => {",
                      "        pm.expect.fail(`Brak linii z kodem zadania: ${kod}`);",
                      "    });",
                      "    return;",
                      "}",
                      "",
                      "// Szczegółowe filtrowanie linii zgodnie z Groovy (SoapUI)",
                      "const liniaZsoon = linieOdpowiedzi.filter(linia => linia.includes('No information yet. Please try again soon!'));",
                      "const linieZFailed = linieOdpowiedzi.filter(linia => linia.includes('FAILED') && !linia.includes(kod));",
                      "const linieZFailures = linieOdpowiedzi.filter(linia => linia.includes('Failures'));",
                      "const linieZRunNew = linieOdpowiedzi.filter(linia => linia.includes('|RUNNING') || linia.includes('|NEW'));",
                      "",
                      "// Szczegóły błędów specjalnych",
                      "let linieZFailuresSpecjalne = [];",
                      "if (linieZFailures.length > 0) {",
                      "    linieZFailuresSpecjalne = linieOdpowiedzi.filter(linia =>",
                      "        linia.includes('#') ||",
                      "        linia.includes('MAIN:') ||",
                      "        linia.includes('READER:') ||",
                      "        linia.includes('Caused by:') ||",
                      "        linia.includes('WRITER:')",
                      "    );",
                      "}",
                      "",
                      "// Główna logika 1:1 zgodna z Groovy (SoapUI)",
                      "if (liniaZsoon.length === 1) {",
                      "    console.warn(`Należy ponowić sprawdzenie statusu zadania ${kod}`);",
                      "    pm.test(\"Brak komunikatu 'try again soon'\", () => {",
                      "        pm.expect.fail(`Znaleziono 'try again soon' dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else if (linieZRunNew.length > 0) {",
                      "    console.warn(`Nie wszystkie kroki zostały zakończone dla zadania ${kod}`);",
                      "    pm.test(\"Wszystkie kroki zakończone\", () => {",
                      "        pm.expect.fail(`Znaleziono kroki RUNNING/NEW dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else if (linieZFailed.length > 0) {",
                      "    if (linieZFailed.length === 1) {",
                      "        console.error(`Wystąpił błąd 'FAILED' dla zadania ${kod}:`);",
                      "        console.error(`      ${linieZFailed[0]}`);",
                      "    } else {",
                      "        console.error(`Wystąpiły błędy 'FAILED' dla zadania ${kod}:`);",
                      "        linieZFailed.forEach(linia => console.error(`      ${linia}`));",
                      "    }",
                      "",
                      "    // Szczegóły  (Failures)",
                      "    if (linieZFailuresSpecjalne.length > 0) {",
                      "        console.error(\"Szczegóły:\");",
                      "        linieZFailuresSpecjalne.forEach(linia => console.error(`      ${linia}`));",
                      "    }",
                      "",
                      "    // Zgłoszenie szczegółowego błędu jako failed test",
                      "    pm.test(\"Brak błędów FAILED\", () => {",
                      "        pm.expect.fail(`Znaleziono linie FAILED dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else {",
                      "    console.log(`Nie wystąpił błąd 'FAILED' dla zadania ${kod}`);",
                      "    pm.test(\"Brak błędów FAILED\", () => {",
                      "        pm.expect(true).to.be.true;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "ac67f8ac-e3da-411a-bfec-228509dfcac8"
                  }
                }
              ]
            },
            {
              "id": "e93e4f3e-18b8-44fe-bd5b-fea9e0c846ad",
              "name": "Odpowiedź-BŁĄD",
              "request": {
                "url": {
                  "path": [
                    "statusZadania"
                  ],
                  "host": [
                    "{{BaseURL}}"
                  ],
                  "query": [
                    {
                      "key": "kod",
                      "value": "zadanie_2"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "60b88e7c-b62b-420a-8cc5-23626d08d919",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const body = pm.response.text().trim();",
                      "const kod = pm.request.url.query",
                      "    .find(p => p.key === \"kod\")?.value?.trim() || \"\";",
                      "",
                      "pm.test(\"Valid HTTP Status Codes\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Pierwsza linia\", () => pm.expect(body).to.include(\"Task summary Generated At\"));",
                      "pm.test(\"Naglowek\", () => pm.expect(body).to.include(\"|Kod                                                   |Status   |Cron                          |Start               |Koniec              |Ostatnie OK         |\"));",
                      "pm.test(\"Kod zadania\", () => pm.expect(body).to.include(\"|\" + kod));",
                      "pm.test(\"Podsumowanie\", () => pm.expect(body).to.include(\"Podsumowanie\"));",
                      "",
                      "// Ogólne asercje nieprzerywające dalszej logiki",
                      "if (body.includes(\"FAILED\")) {",
                      "    console.error(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                      "    pm.test(\"Brak \\\"FAILED\\\"\", () => {",
                      "        pm.expect.fail(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                      "    });",
                      "} else {",
                      "    pm.test(\"Brak \\\"FAILED\\\"\", () => pm.expect(true).to.be.true);",
                      "}",
                      "",
                      "if (body.includes(\"Failures\")) {",
                      "    console.error(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                      "    pm.test(\"Brak \\\"Failures\\\"\", () => {",
                      "        pm.expect.fail(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                      "    });",
                      "} else {",
                      "    pm.test(\"Brak \\\"Failures\\\"\", () => pm.expect(true).to.be.true);",
                      "}",
                      "",
                      "if (!body) {",
                      "    console.error(\"Odpowiedź serwera jest pusta. Przerywam wykonanie.\");",
                      "    pm.test(\"Brak treści w odpowiedzi serwera\", () => {",
                      "        pm.expect.fail(\"Brak treści w odpowiedzi serwera.\");",
                      "    });",
                      "    return;",
                      "}",
                      "",
                      "const linieOdpowiedzi = body.split('\\n');",
                      "",
                      "// Sprawdzenie linii z kodem zadania",
                      "const liniaZKodem = linieOdpowiedzi.find(linia => linia.includes(\"|\" + kod));",
                      "if (!liniaZKodem) {",
                      "    console.error(`Nie znaleziono linii zawierającej kod zadania: ${kod}`);",
                      "    pm.test(\"Linia z kodem zadania istnieje\", () => {",
                      "        pm.expect.fail(`Brak linii z kodem zadania: ${kod}`);",
                      "    });",
                      "    return;",
                      "}",
                      "",
                      "// Szczegółowe filtrowanie linii zgodnie z Groovy (SoapUI)",
                      "const liniaZsoon = linieOdpowiedzi.filter(linia => linia.includes('No information yet. Please try again soon!'));",
                      "const linieZFailed = linieOdpowiedzi.filter(linia => linia.includes('FAILED') && !linia.includes(kod));",
                      "const linieZFailures = linieOdpowiedzi.filter(linia => linia.includes('Failures'));",
                      "const linieZRunNew = linieOdpowiedzi.filter(linia => linia.includes('|RUNNING') || linia.includes('|NEW'));",
                      "",
                      "// Szczegóły błędów specjalnych",
                      "let linieZFailuresSpecjalne = [];",
                      "if (linieZFailures.length > 0) {",
                      "    linieZFailuresSpecjalne = linieOdpowiedzi.filter(linia =>",
                      "        linia.includes('#') ||",
                      "        linia.includes('MAIN:') ||",
                      "        linia.includes('READER:') ||",
                      "        linia.includes('Caused by:') ||",
                      "        linia.includes('WRITER:')",
                      "    );",
                      "}",
                      "",
                      "// Główna logika 1:1 zgodna z Groovy (SoapUI)",
                      "if (liniaZsoon.length === 1) {",
                      "    console.warn(`Należy ponowić sprawdzenie statusu zadania ${kod}`);",
                      "    pm.test(\"Brak komunikatu 'try again soon'\", () => {",
                      "        pm.expect.fail(`Znaleziono 'try again soon' dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else if (linieZRunNew.length > 0) {",
                      "    console.warn(`Nie wszystkie kroki zostały zakończone dla zadania ${kod}`);",
                      "    pm.test(\"Wszystkie kroki zakończone\", () => {",
                      "        pm.expect.fail(`Znaleziono kroki RUNNING/NEW dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else if (linieZFailed.length > 0) {",
                      "    if (linieZFailed.length === 1) {",
                      "        console.error(`Wystąpił błąd 'FAILED' dla zadania ${kod}:`);",
                      "        console.error(`      ${linieZFailed[0]}`);",
                      "    } else {",
                      "        console.error(`Wystąpiły błędy 'FAILED' dla zadania ${kod}:`);",
                      "        linieZFailed.forEach(linia => console.error(`      ${linia}`));",
                      "    }",
                      "",
                      "    // Szczegóły  (Failures)",
                      "    if (linieZFailuresSpecjalne.length > 0) {",
                      "        console.error(\"Szczegóły:\");",
                      "        linieZFailuresSpecjalne.forEach(linia => console.error(`      ${linia}`));",
                      "    }",
                      "",
                      "    // Zgłoszenie szczegółowego błędu jako failed test",
                      "    pm.test(\"Brak błędów FAILED\", () => {",
                      "        pm.expect.fail(`Znaleziono linie FAILED dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else {",
                      "    console.log(`Nie wystąpił błąd 'FAILED' dla zadania ${kod}`);",
                      "    pm.test(\"Brak błędów FAILED\", () => {",
                      "        pm.expect(true).to.be.true;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "08a014d5-2d49-4142-8016-2f8752fbf889"
                  }
                }
              ]
            },
            {
              "id": "a02a0fe7-872f-4ae9-afb8-bceec80e8418",
              "name": "Odpowiedź-BRAK",
              "request": {
                "url": {
                  "path": [
                    "statusZadania"
                  ],
                  "host": [
                    "{{BaseURL}}"
                  ],
                  "query": [
                    {
                      "key": "kod",
                      "value": "zadanie_3"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d789b2ea-582f-4219-8ae2-00fd41f9709e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const body = pm.response.text().trim();",
                      "const kod = pm.request.url.query",
                      "    .find(p => p.key === \"kod\")?.value?.trim() || \"\";",
                      "",
                      "pm.test(\"Valid HTTP Status Codes\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Pierwsza linia\", () => pm.expect(body).to.include(\"Task summary Generated At\"));",
                      "pm.test(\"Naglowek\", () => pm.expect(body).to.include(\"|Kod                                                   |Status   |Cron                          |Start               |Koniec              |Ostatnie OK         |\"));",
                      "pm.test(\"Kod zadania\", () => pm.expect(body).to.include(\"|\" + kod));",
                      "pm.test(\"Podsumowanie\", () => pm.expect(body).to.include(\"Podsumowanie\"));",
                      "",
                      "// Ogólne asercje nieprzerywające dalszej logiki",
                      "if (body.includes(\"FAILED\")) {",
                      "    console.error(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                      "    pm.test(\"Brak \\\"FAILED\\\"\", () => {",
                      "        pm.expect.fail(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                      "    });",
                      "} else {",
                      "    pm.test(\"Brak \\\"FAILED\\\"\", () => pm.expect(true).to.be.true);",
                      "}",
                      "",
                      "if (body.includes(\"Failures\")) {",
                      "    console.error(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                      "    pm.test(\"Brak \\\"Failures\\\"\", () => {",
                      "        pm.expect.fail(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                      "    });",
                      "} else {",
                      "    pm.test(\"Brak \\\"Failures\\\"\", () => pm.expect(true).to.be.true);",
                      "}",
                      "",
                      "if (!body) {",
                      "    console.error(\"Odpowiedź serwera jest pusta. Przerywam wykonanie.\");",
                      "    pm.test(\"Brak treści w odpowiedzi serwera\", () => {",
                      "        pm.expect.fail(\"Brak treści w odpowiedzi serwera.\");",
                      "    });",
                      "    return;",
                      "}",
                      "",
                      "const linieOdpowiedzi = body.split('\\n');",
                      "",
                      "// Sprawdzenie linii z kodem zadania",
                      "const liniaZKodem = linieOdpowiedzi.find(linia => linia.includes(\"|\" + kod));",
                      "if (!liniaZKodem) {",
                      "    console.error(`Nie znaleziono linii zawierającej kod zadania: ${kod}`);",
                      "    pm.test(\"Linia z kodem zadania istnieje\", () => {",
                      "        pm.expect.fail(`Brak linii z kodem zadania: ${kod}`);",
                      "    });",
                      "    return;",
                      "}",
                      "",
                      "// Szczegółowe filtrowanie linii zgodnie z Groovy (SoapUI)",
                      "const liniaZsoon = linieOdpowiedzi.filter(linia => linia.includes('No information yet. Please try again soon!'));",
                      "const linieZFailed = linieOdpowiedzi.filter(linia => linia.includes('FAILED') && !linia.includes(kod));",
                      "const linieZFailures = linieOdpowiedzi.filter(linia => linia.includes('Failures'));",
                      "const linieZRunNew = linieOdpowiedzi.filter(linia => linia.includes('|RUNNING') || linia.includes('|NEW'));",
                      "",
                      "// Szczegóły błędów specjalnych",
                      "let linieZFailuresSpecjalne = [];",
                      "if (linieZFailures.length > 0) {",
                      "    linieZFailuresSpecjalne = linieOdpowiedzi.filter(linia =>",
                      "        linia.includes('#') ||",
                      "        linia.includes('MAIN:') ||",
                      "        linia.includes('READER:') ||",
                      "        linia.includes('Caused by:') ||",
                      "        linia.includes('WRITER:')",
                      "    );",
                      "}",
                      "",
                      "// Główna logika 1:1 zgodna z Groovy (SoapUI)",
                      "if (liniaZsoon.length === 1) {",
                      "    console.warn(`Należy ponowić sprawdzenie statusu zadania ${kod}`);",
                      "    pm.test(\"Brak komunikatu 'try again soon'\", () => {",
                      "        pm.expect.fail(`Znaleziono 'try again soon' dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else if (linieZRunNew.length > 0) {",
                      "    console.warn(`Nie wszystkie kroki zostały zakończone dla zadania ${kod}`);",
                      "    pm.test(\"Wszystkie kroki zakończone\", () => {",
                      "        pm.expect.fail(`Znaleziono kroki RUNNING/NEW dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else if (linieZFailed.length > 0) {",
                      "    if (linieZFailed.length === 1) {",
                      "        console.error(`Wystąpił błąd 'FAILED' dla zadania ${kod}:`);",
                      "        console.error(`      ${linieZFailed[0]}`);",
                      "    } else {",
                      "        console.error(`Wystąpiły błędy 'FAILED' dla zadania ${kod}:`);",
                      "        linieZFailed.forEach(linia => console.error(`      ${linia}`));",
                      "    }",
                      "",
                      "    // Szczegóły  (Failures)",
                      "    if (linieZFailuresSpecjalne.length > 0) {",
                      "        console.error(\"Szczegóły:\");",
                      "        linieZFailuresSpecjalne.forEach(linia => console.error(`      ${linia}`));",
                      "    }",
                      "",
                      "    // Zgłoszenie szczegółowego błędu jako failed test",
                      "    pm.test(\"Brak błędów FAILED\", () => {",
                      "        pm.expect.fail(`Znaleziono linie FAILED dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else {",
                      "    console.log(`Nie wystąpił błąd 'FAILED' dla zadania ${kod}`);",
                      "    pm.test(\"Brak błędów FAILED\", () => {",
                      "        pm.expect(true).to.be.true;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "c5932503-417c-4bd8-873b-339df675fd01"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9fc38d97-3ac6-4b25-b099-6eb147aabb3c",
          "length": 3,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "ea7a2df6-6f64-479f-ac0a-5ffda8c576f1",
          "scriptId": "d789b2ea-582f-4219-8ae2-00fd41f9709e",
          "execution": "c5932503-417c-4bd8-873b-339df675fd01"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 4,
          "test": "Podsumowanie",
          "message": "expected 'user@pmaszyna:~ > curl \\'http://aplik…' to include 'Podsumowanie'",
          "stack": "AssertionError: expected 'user@pmaszyna:~ > curl \\'http://aplik…' to include 'Podsumowanie'\n   at Object.eval sandbox-script.js:5:3)",
          "checksum": "0c975f8602e3350aaaec31b2ebb24f2a",
          "id": "ea0e9e4e-ebc2-4fb8-986d-ec679dcd075a",
          "timestamp": 1753867170554,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 5,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:4 in test-script",
        "source": {
          "id": "a02a0fe7-872f-4ae9-afb8-bceec80e8418",
          "name": "Odpowiedź-BRAK",
          "request": {
            "url": {
              "path": [
                "statusZadania"
              ],
              "host": [
                "{{BaseURL}}"
              ],
              "query": [
                {
                  "key": "kod",
                  "value": "zadanie_3"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d789b2ea-582f-4219-8ae2-00fd41f9709e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const body = pm.response.text().trim();",
                  "const kod = pm.request.url.query",
                  "    .find(p => p.key === \"kod\")?.value?.trim() || \"\";",
                  "",
                  "pm.test(\"Valid HTTP Status Codes\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Pierwsza linia\", () => pm.expect(body).to.include(\"Task summary Generated At\"));",
                  "pm.test(\"Naglowek\", () => pm.expect(body).to.include(\"|Kod                                                   |Status   |Cron                          |Start               |Koniec              |Ostatnie OK         |\"));",
                  "pm.test(\"Kod zadania\", () => pm.expect(body).to.include(\"|\" + kod));",
                  "pm.test(\"Podsumowanie\", () => pm.expect(body).to.include(\"Podsumowanie\"));",
                  "",
                  "// Ogólne asercje nieprzerywające dalszej logiki",
                  "if (body.includes(\"FAILED\")) {",
                  "    console.error(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                  "    pm.test(\"Brak \\\"FAILED\\\"\", () => {",
                  "        pm.expect.fail(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                  "    });",
                  "} else {",
                  "    pm.test(\"Brak \\\"FAILED\\\"\", () => pm.expect(true).to.be.true);",
                  "}",
                  "",
                  "if (body.includes(\"Failures\")) {",
                  "    console.error(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                  "    pm.test(\"Brak \\\"Failures\\\"\", () => {",
                  "        pm.expect.fail(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                  "    });",
                  "} else {",
                  "    pm.test(\"Brak \\\"Failures\\\"\", () => pm.expect(true).to.be.true);",
                  "}",
                  "",
                  "if (!body) {",
                  "    console.error(\"Odpowiedź serwera jest pusta. Przerywam wykonanie.\");",
                  "    pm.test(\"Brak treści w odpowiedzi serwera\", () => {",
                  "        pm.expect.fail(\"Brak treści w odpowiedzi serwera.\");",
                  "    });",
                  "    return;",
                  "}",
                  "",
                  "const linieOdpowiedzi = body.split('\\n');",
                  "",
                  "// Sprawdzenie linii z kodem zadania",
                  "const liniaZKodem = linieOdpowiedzi.find(linia => linia.includes(\"|\" + kod));",
                  "if (!liniaZKodem) {",
                  "    console.error(`Nie znaleziono linii zawierającej kod zadania: ${kod}`);",
                  "    pm.test(\"Linia z kodem zadania istnieje\", () => {",
                  "        pm.expect.fail(`Brak linii z kodem zadania: ${kod}`);",
                  "    });",
                  "    return;",
                  "}",
                  "",
                  "// Szczegółowe filtrowanie linii zgodnie z Groovy (SoapUI)",
                  "const liniaZsoon = linieOdpowiedzi.filter(linia => linia.includes('No information yet. Please try again soon!'));",
                  "const linieZFailed = linieOdpowiedzi.filter(linia => linia.includes('FAILED') && !linia.includes(kod));",
                  "const linieZFailures = linieOdpowiedzi.filter(linia => linia.includes('Failures'));",
                  "const linieZRunNew = linieOdpowiedzi.filter(linia => linia.includes('|RUNNING') || linia.includes('|NEW'));",
                  "",
                  "// Szczegóły błędów specjalnych",
                  "let linieZFailuresSpecjalne = [];",
                  "if (linieZFailures.length > 0) {",
                  "    linieZFailuresSpecjalne = linieOdpowiedzi.filter(linia =>",
                  "        linia.includes('#') ||",
                  "        linia.includes('MAIN:') ||",
                  "        linia.includes('READER:') ||",
                  "        linia.includes('Caused by:') ||",
                  "        linia.includes('WRITER:')",
                  "    );",
                  "}",
                  "",
                  "// Główna logika 1:1 zgodna z Groovy (SoapUI)",
                  "if (liniaZsoon.length === 1) {",
                  "    console.warn(`Należy ponowić sprawdzenie statusu zadania ${kod}`);",
                  "    pm.test(\"Brak komunikatu 'try again soon'\", () => {",
                  "        pm.expect.fail(`Znaleziono 'try again soon' dla zadania ${kod}`);",
                  "    });",
                  "",
                  "} else if (linieZRunNew.length > 0) {",
                  "    console.warn(`Nie wszystkie kroki zostały zakończone dla zadania ${kod}`);",
                  "    pm.test(\"Wszystkie kroki zakończone\", () => {",
                  "        pm.expect.fail(`Znaleziono kroki RUNNING/NEW dla zadania ${kod}`);",
                  "    });",
                  "",
                  "} else if (linieZFailed.length > 0) {",
                  "    if (linieZFailed.length === 1) {",
                  "        console.error(`Wystąpił błąd 'FAILED' dla zadania ${kod}:`);",
                  "        console.error(`      ${linieZFailed[0]}`);",
                  "    } else {",
                  "        console.error(`Wystąpiły błędy 'FAILED' dla zadania ${kod}:`);",
                  "        linieZFailed.forEach(linia => console.error(`      ${linia}`));",
                  "    }",
                  "",
                  "    // Szczegóły  (Failures)",
                  "    if (linieZFailuresSpecjalne.length > 0) {",
                  "        console.error(\"Szczegóły:\");",
                  "        linieZFailuresSpecjalne.forEach(linia => console.error(`      ${linia}`));",
                  "    }",
                  "",
                  "    // Zgłoszenie szczegółowego błędu jako failed test",
                  "    pm.test(\"Brak błędów FAILED\", () => {",
                  "        pm.expect.fail(`Znaleziono linie FAILED dla zadania ${kod}`);",
                  "    });",
                  "",
                  "} else {",
                  "    console.log(`Nie wystąpił błąd 'FAILED' dla zadania ${kod}`);",
                  "    pm.test(\"Brak błędów FAILED\", () => {",
                  "        pm.expect(true).to.be.true;",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "c5932503-417c-4bd8-873b-339df675fd01"
              }
            }
          ]
        },
        "parent": {
          "id": "a96c8136-f56e-4c0a-b6ce-56b642bf4d58",
          "name": "Test Steps",
          "item": [
            {
              "id": "e1c974ec-065f-4041-a31f-061a1f7c7395",
              "name": "Odpowiedź-OK",
              "request": {
                "url": {
                  "path": [
                    "statusZadania"
                  ],
                  "host": [
                    "{{BaseURL}}"
                  ],
                  "query": [
                    {
                      "key": "kod",
                      "value": "zadanie_1"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5822a058-c62f-4899-84cf-94858c4322b2",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const body = pm.response.text().trim();",
                      "const kod = pm.request.url.query",
                      "    .find(p => p.key === \"kod\")?.value?.trim() || \"\";",
                      "",
                      "pm.test(\"Valid HTTP Status Codes\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Pierwsza linia\", () => pm.expect(body).to.include(\"Task summary Generated At\"));",
                      "pm.test(\"Naglowek\", () => pm.expect(body).to.include(\"|Kod                                                   |Status   |Cron                          |Start               |Koniec              |Ostatnie OK         |\"));",
                      "pm.test(\"Kod zadania\", () => pm.expect(body).to.include(\"|\" + kod));",
                      "pm.test(\"Podsumowanie\", () => pm.expect(body).to.include(\"Podsumowanie\"));",
                      "",
                      "// Ogólne asercje nieprzerywające dalszej logiki",
                      "if (body.includes(\"FAILED\")) {",
                      "    console.error(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                      "    pm.test(\"Brak \\\"FAILED\\\"\", () => {",
                      "        pm.expect.fail(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                      "    });",
                      "} else {",
                      "    pm.test(\"Brak \\\"FAILED\\\"\", () => pm.expect(true).to.be.true);",
                      "}",
                      "",
                      "if (body.includes(\"Failures\")) {",
                      "    console.error(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                      "    pm.test(\"Brak \\\"Failures\\\"\", () => {",
                      "        pm.expect.fail(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                      "    });",
                      "} else {",
                      "    pm.test(\"Brak \\\"Failures\\\"\", () => pm.expect(true).to.be.true);",
                      "}",
                      "",
                      "if (!body) {",
                      "    console.error(\"Odpowiedź serwera jest pusta. Przerywam wykonanie.\");",
                      "    pm.test(\"Brak treści w odpowiedzi serwera\", () => {",
                      "        pm.expect.fail(\"Brak treści w odpowiedzi serwera.\");",
                      "    });",
                      "    return;",
                      "}",
                      "",
                      "const linieOdpowiedzi = body.split('\\n');",
                      "",
                      "// Sprawdzenie linii z kodem zadania",
                      "const liniaZKodem = linieOdpowiedzi.find(linia => linia.includes(\"|\" + kod));",
                      "if (!liniaZKodem) {",
                      "    console.error(`Nie znaleziono linii zawierającej kod zadania: ${kod}`);",
                      "    pm.test(\"Linia z kodem zadania istnieje\", () => {",
                      "        pm.expect.fail(`Brak linii z kodem zadania: ${kod}`);",
                      "    });",
                      "    return;",
                      "}",
                      "",
                      "// Szczegółowe filtrowanie linii zgodnie z Groovy (SoapUI)",
                      "const liniaZsoon = linieOdpowiedzi.filter(linia => linia.includes('No information yet. Please try again soon!'));",
                      "const linieZFailed = linieOdpowiedzi.filter(linia => linia.includes('FAILED') && !linia.includes(kod));",
                      "const linieZFailures = linieOdpowiedzi.filter(linia => linia.includes('Failures'));",
                      "const linieZRunNew = linieOdpowiedzi.filter(linia => linia.includes('|RUNNING') || linia.includes('|NEW'));",
                      "",
                      "// Szczegóły błędów specjalnych",
                      "let linieZFailuresSpecjalne = [];",
                      "if (linieZFailures.length > 0) {",
                      "    linieZFailuresSpecjalne = linieOdpowiedzi.filter(linia =>",
                      "        linia.includes('#') ||",
                      "        linia.includes('MAIN:') ||",
                      "        linia.includes('READER:') ||",
                      "        linia.includes('Caused by:') ||",
                      "        linia.includes('WRITER:')",
                      "    );",
                      "}",
                      "",
                      "// Główna logika 1:1 zgodna z Groovy (SoapUI)",
                      "if (liniaZsoon.length === 1) {",
                      "    console.warn(`Należy ponowić sprawdzenie statusu zadania ${kod}`);",
                      "    pm.test(\"Brak komunikatu 'try again soon'\", () => {",
                      "        pm.expect.fail(`Znaleziono 'try again soon' dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else if (linieZRunNew.length > 0) {",
                      "    console.warn(`Nie wszystkie kroki zostały zakończone dla zadania ${kod}`);",
                      "    pm.test(\"Wszystkie kroki zakończone\", () => {",
                      "        pm.expect.fail(`Znaleziono kroki RUNNING/NEW dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else if (linieZFailed.length > 0) {",
                      "    if (linieZFailed.length === 1) {",
                      "        console.error(`Wystąpił błąd 'FAILED' dla zadania ${kod}:`);",
                      "        console.error(`      ${linieZFailed[0]}`);",
                      "    } else {",
                      "        console.error(`Wystąpiły błędy 'FAILED' dla zadania ${kod}:`);",
                      "        linieZFailed.forEach(linia => console.error(`      ${linia}`));",
                      "    }",
                      "",
                      "    // Szczegóły  (Failures)",
                      "    if (linieZFailuresSpecjalne.length > 0) {",
                      "        console.error(\"Szczegóły:\");",
                      "        linieZFailuresSpecjalne.forEach(linia => console.error(`      ${linia}`));",
                      "    }",
                      "",
                      "    // Zgłoszenie szczegółowego błędu jako failed test",
                      "    pm.test(\"Brak błędów FAILED\", () => {",
                      "        pm.expect.fail(`Znaleziono linie FAILED dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else {",
                      "    console.log(`Nie wystąpił błąd 'FAILED' dla zadania ${kod}`);",
                      "    pm.test(\"Brak błędów FAILED\", () => {",
                      "        pm.expect(true).to.be.true;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "ac67f8ac-e3da-411a-bfec-228509dfcac8"
                  }
                }
              ]
            },
            {
              "id": "e93e4f3e-18b8-44fe-bd5b-fea9e0c846ad",
              "name": "Odpowiedź-BŁĄD",
              "request": {
                "url": {
                  "path": [
                    "statusZadania"
                  ],
                  "host": [
                    "{{BaseURL}}"
                  ],
                  "query": [
                    {
                      "key": "kod",
                      "value": "zadanie_2"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "60b88e7c-b62b-420a-8cc5-23626d08d919",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const body = pm.response.text().trim();",
                      "const kod = pm.request.url.query",
                      "    .find(p => p.key === \"kod\")?.value?.trim() || \"\";",
                      "",
                      "pm.test(\"Valid HTTP Status Codes\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Pierwsza linia\", () => pm.expect(body).to.include(\"Task summary Generated At\"));",
                      "pm.test(\"Naglowek\", () => pm.expect(body).to.include(\"|Kod                                                   |Status   |Cron                          |Start               |Koniec              |Ostatnie OK         |\"));",
                      "pm.test(\"Kod zadania\", () => pm.expect(body).to.include(\"|\" + kod));",
                      "pm.test(\"Podsumowanie\", () => pm.expect(body).to.include(\"Podsumowanie\"));",
                      "",
                      "// Ogólne asercje nieprzerywające dalszej logiki",
                      "if (body.includes(\"FAILED\")) {",
                      "    console.error(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                      "    pm.test(\"Brak \\\"FAILED\\\"\", () => {",
                      "        pm.expect.fail(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                      "    });",
                      "} else {",
                      "    pm.test(\"Brak \\\"FAILED\\\"\", () => pm.expect(true).to.be.true);",
                      "}",
                      "",
                      "if (body.includes(\"Failures\")) {",
                      "    console.error(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                      "    pm.test(\"Brak \\\"Failures\\\"\", () => {",
                      "        pm.expect.fail(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                      "    });",
                      "} else {",
                      "    pm.test(\"Brak \\\"Failures\\\"\", () => pm.expect(true).to.be.true);",
                      "}",
                      "",
                      "if (!body) {",
                      "    console.error(\"Odpowiedź serwera jest pusta. Przerywam wykonanie.\");",
                      "    pm.test(\"Brak treści w odpowiedzi serwera\", () => {",
                      "        pm.expect.fail(\"Brak treści w odpowiedzi serwera.\");",
                      "    });",
                      "    return;",
                      "}",
                      "",
                      "const linieOdpowiedzi = body.split('\\n');",
                      "",
                      "// Sprawdzenie linii z kodem zadania",
                      "const liniaZKodem = linieOdpowiedzi.find(linia => linia.includes(\"|\" + kod));",
                      "if (!liniaZKodem) {",
                      "    console.error(`Nie znaleziono linii zawierającej kod zadania: ${kod}`);",
                      "    pm.test(\"Linia z kodem zadania istnieje\", () => {",
                      "        pm.expect.fail(`Brak linii z kodem zadania: ${kod}`);",
                      "    });",
                      "    return;",
                      "}",
                      "",
                      "// Szczegółowe filtrowanie linii zgodnie z Groovy (SoapUI)",
                      "const liniaZsoon = linieOdpowiedzi.filter(linia => linia.includes('No information yet. Please try again soon!'));",
                      "const linieZFailed = linieOdpowiedzi.filter(linia => linia.includes('FAILED') && !linia.includes(kod));",
                      "const linieZFailures = linieOdpowiedzi.filter(linia => linia.includes('Failures'));",
                      "const linieZRunNew = linieOdpowiedzi.filter(linia => linia.includes('|RUNNING') || linia.includes('|NEW'));",
                      "",
                      "// Szczegóły błędów specjalnych",
                      "let linieZFailuresSpecjalne = [];",
                      "if (linieZFailures.length > 0) {",
                      "    linieZFailuresSpecjalne = linieOdpowiedzi.filter(linia =>",
                      "        linia.includes('#') ||",
                      "        linia.includes('MAIN:') ||",
                      "        linia.includes('READER:') ||",
                      "        linia.includes('Caused by:') ||",
                      "        linia.includes('WRITER:')",
                      "    );",
                      "}",
                      "",
                      "// Główna logika 1:1 zgodna z Groovy (SoapUI)",
                      "if (liniaZsoon.length === 1) {",
                      "    console.warn(`Należy ponowić sprawdzenie statusu zadania ${kod}`);",
                      "    pm.test(\"Brak komunikatu 'try again soon'\", () => {",
                      "        pm.expect.fail(`Znaleziono 'try again soon' dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else if (linieZRunNew.length > 0) {",
                      "    console.warn(`Nie wszystkie kroki zostały zakończone dla zadania ${kod}`);",
                      "    pm.test(\"Wszystkie kroki zakończone\", () => {",
                      "        pm.expect.fail(`Znaleziono kroki RUNNING/NEW dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else if (linieZFailed.length > 0) {",
                      "    if (linieZFailed.length === 1) {",
                      "        console.error(`Wystąpił błąd 'FAILED' dla zadania ${kod}:`);",
                      "        console.error(`      ${linieZFailed[0]}`);",
                      "    } else {",
                      "        console.error(`Wystąpiły błędy 'FAILED' dla zadania ${kod}:`);",
                      "        linieZFailed.forEach(linia => console.error(`      ${linia}`));",
                      "    }",
                      "",
                      "    // Szczegóły  (Failures)",
                      "    if (linieZFailuresSpecjalne.length > 0) {",
                      "        console.error(\"Szczegóły:\");",
                      "        linieZFailuresSpecjalne.forEach(linia => console.error(`      ${linia}`));",
                      "    }",
                      "",
                      "    // Zgłoszenie szczegółowego błędu jako failed test",
                      "    pm.test(\"Brak błędów FAILED\", () => {",
                      "        pm.expect.fail(`Znaleziono linie FAILED dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else {",
                      "    console.log(`Nie wystąpił błąd 'FAILED' dla zadania ${kod}`);",
                      "    pm.test(\"Brak błędów FAILED\", () => {",
                      "        pm.expect(true).to.be.true;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "08a014d5-2d49-4142-8016-2f8752fbf889"
                  }
                }
              ]
            },
            {
              "id": "a02a0fe7-872f-4ae9-afb8-bceec80e8418",
              "name": "Odpowiedź-BRAK",
              "request": {
                "url": {
                  "path": [
                    "statusZadania"
                  ],
                  "host": [
                    "{{BaseURL}}"
                  ],
                  "query": [
                    {
                      "key": "kod",
                      "value": "zadanie_3"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d789b2ea-582f-4219-8ae2-00fd41f9709e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const body = pm.response.text().trim();",
                      "const kod = pm.request.url.query",
                      "    .find(p => p.key === \"kod\")?.value?.trim() || \"\";",
                      "",
                      "pm.test(\"Valid HTTP Status Codes\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Pierwsza linia\", () => pm.expect(body).to.include(\"Task summary Generated At\"));",
                      "pm.test(\"Naglowek\", () => pm.expect(body).to.include(\"|Kod                                                   |Status   |Cron                          |Start               |Koniec              |Ostatnie OK         |\"));",
                      "pm.test(\"Kod zadania\", () => pm.expect(body).to.include(\"|\" + kod));",
                      "pm.test(\"Podsumowanie\", () => pm.expect(body).to.include(\"Podsumowanie\"));",
                      "",
                      "// Ogólne asercje nieprzerywające dalszej logiki",
                      "if (body.includes(\"FAILED\")) {",
                      "    console.error(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                      "    pm.test(\"Brak \\\"FAILED\\\"\", () => {",
                      "        pm.expect.fail(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                      "    });",
                      "} else {",
                      "    pm.test(\"Brak \\\"FAILED\\\"\", () => pm.expect(true).to.be.true);",
                      "}",
                      "",
                      "if (body.includes(\"Failures\")) {",
                      "    console.error(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                      "    pm.test(\"Brak \\\"Failures\\\"\", () => {",
                      "        pm.expect.fail(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                      "    });",
                      "} else {",
                      "    pm.test(\"Brak \\\"Failures\\\"\", () => pm.expect(true).to.be.true);",
                      "}",
                      "",
                      "if (!body) {",
                      "    console.error(\"Odpowiedź serwera jest pusta. Przerywam wykonanie.\");",
                      "    pm.test(\"Brak treści w odpowiedzi serwera\", () => {",
                      "        pm.expect.fail(\"Brak treści w odpowiedzi serwera.\");",
                      "    });",
                      "    return;",
                      "}",
                      "",
                      "const linieOdpowiedzi = body.split('\\n');",
                      "",
                      "// Sprawdzenie linii z kodem zadania",
                      "const liniaZKodem = linieOdpowiedzi.find(linia => linia.includes(\"|\" + kod));",
                      "if (!liniaZKodem) {",
                      "    console.error(`Nie znaleziono linii zawierającej kod zadania: ${kod}`);",
                      "    pm.test(\"Linia z kodem zadania istnieje\", () => {",
                      "        pm.expect.fail(`Brak linii z kodem zadania: ${kod}`);",
                      "    });",
                      "    return;",
                      "}",
                      "",
                      "// Szczegółowe filtrowanie linii zgodnie z Groovy (SoapUI)",
                      "const liniaZsoon = linieOdpowiedzi.filter(linia => linia.includes('No information yet. Please try again soon!'));",
                      "const linieZFailed = linieOdpowiedzi.filter(linia => linia.includes('FAILED') && !linia.includes(kod));",
                      "const linieZFailures = linieOdpowiedzi.filter(linia => linia.includes('Failures'));",
                      "const linieZRunNew = linieOdpowiedzi.filter(linia => linia.includes('|RUNNING') || linia.includes('|NEW'));",
                      "",
                      "// Szczegóły błędów specjalnych",
                      "let linieZFailuresSpecjalne = [];",
                      "if (linieZFailures.length > 0) {",
                      "    linieZFailuresSpecjalne = linieOdpowiedzi.filter(linia =>",
                      "        linia.includes('#') ||",
                      "        linia.includes('MAIN:') ||",
                      "        linia.includes('READER:') ||",
                      "        linia.includes('Caused by:') ||",
                      "        linia.includes('WRITER:')",
                      "    );",
                      "}",
                      "",
                      "// Główna logika 1:1 zgodna z Groovy (SoapUI)",
                      "if (liniaZsoon.length === 1) {",
                      "    console.warn(`Należy ponowić sprawdzenie statusu zadania ${kod}`);",
                      "    pm.test(\"Brak komunikatu 'try again soon'\", () => {",
                      "        pm.expect.fail(`Znaleziono 'try again soon' dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else if (linieZRunNew.length > 0) {",
                      "    console.warn(`Nie wszystkie kroki zostały zakończone dla zadania ${kod}`);",
                      "    pm.test(\"Wszystkie kroki zakończone\", () => {",
                      "        pm.expect.fail(`Znaleziono kroki RUNNING/NEW dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else if (linieZFailed.length > 0) {",
                      "    if (linieZFailed.length === 1) {",
                      "        console.error(`Wystąpił błąd 'FAILED' dla zadania ${kod}:`);",
                      "        console.error(`      ${linieZFailed[0]}`);",
                      "    } else {",
                      "        console.error(`Wystąpiły błędy 'FAILED' dla zadania ${kod}:`);",
                      "        linieZFailed.forEach(linia => console.error(`      ${linia}`));",
                      "    }",
                      "",
                      "    // Szczegóły  (Failures)",
                      "    if (linieZFailuresSpecjalne.length > 0) {",
                      "        console.error(\"Szczegóły:\");",
                      "        linieZFailuresSpecjalne.forEach(linia => console.error(`      ${linia}`));",
                      "    }",
                      "",
                      "    // Zgłoszenie szczegółowego błędu jako failed test",
                      "    pm.test(\"Brak błędów FAILED\", () => {",
                      "        pm.expect.fail(`Znaleziono linie FAILED dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else {",
                      "    console.log(`Nie wystąpił błąd 'FAILED' dla zadania ${kod}`);",
                      "    pm.test(\"Brak błędów FAILED\", () => {",
                      "        pm.expect(true).to.be.true;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "c5932503-417c-4bd8-873b-339df675fd01"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9fc38d97-3ac6-4b25-b099-6eb147aabb3c",
          "length": 3,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "ea7a2df6-6f64-479f-ac0a-5ffda8c576f1",
          "scriptId": "d789b2ea-582f-4219-8ae2-00fd41f9709e",
          "execution": "c5932503-417c-4bd8-873b-339df675fd01"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 7,
          "test": "Linia z kodem zadania istnieje",
          "message": "Brak linii z kodem zadania: zadanie_3",
          "stack": "AssertionError: Brak linii z kodem zadania: zadanie_3\n   at Object.eval sandbox-script.js:8:3)",
          "checksum": "29b3a03cb1cf3972207571bf645c6367",
          "id": "faa32f13-de08-4373-b56e-2ae58c914310",
          "timestamp": 1753867170554,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 8,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:7 in test-script",
        "source": {
          "id": "a02a0fe7-872f-4ae9-afb8-bceec80e8418",
          "name": "Odpowiedź-BRAK",
          "request": {
            "url": {
              "path": [
                "statusZadania"
              ],
              "host": [
                "{{BaseURL}}"
              ],
              "query": [
                {
                  "key": "kod",
                  "value": "zadanie_3"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d789b2ea-582f-4219-8ae2-00fd41f9709e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const body = pm.response.text().trim();",
                  "const kod = pm.request.url.query",
                  "    .find(p => p.key === \"kod\")?.value?.trim() || \"\";",
                  "",
                  "pm.test(\"Valid HTTP Status Codes\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Pierwsza linia\", () => pm.expect(body).to.include(\"Task summary Generated At\"));",
                  "pm.test(\"Naglowek\", () => pm.expect(body).to.include(\"|Kod                                                   |Status   |Cron                          |Start               |Koniec              |Ostatnie OK         |\"));",
                  "pm.test(\"Kod zadania\", () => pm.expect(body).to.include(\"|\" + kod));",
                  "pm.test(\"Podsumowanie\", () => pm.expect(body).to.include(\"Podsumowanie\"));",
                  "",
                  "// Ogólne asercje nieprzerywające dalszej logiki",
                  "if (body.includes(\"FAILED\")) {",
                  "    console.error(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                  "    pm.test(\"Brak \\\"FAILED\\\"\", () => {",
                  "        pm.expect.fail(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                  "    });",
                  "} else {",
                  "    pm.test(\"Brak \\\"FAILED\\\"\", () => pm.expect(true).to.be.true);",
                  "}",
                  "",
                  "if (body.includes(\"Failures\")) {",
                  "    console.error(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                  "    pm.test(\"Brak \\\"Failures\\\"\", () => {",
                  "        pm.expect.fail(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                  "    });",
                  "} else {",
                  "    pm.test(\"Brak \\\"Failures\\\"\", () => pm.expect(true).to.be.true);",
                  "}",
                  "",
                  "if (!body) {",
                  "    console.error(\"Odpowiedź serwera jest pusta. Przerywam wykonanie.\");",
                  "    pm.test(\"Brak treści w odpowiedzi serwera\", () => {",
                  "        pm.expect.fail(\"Brak treści w odpowiedzi serwera.\");",
                  "    });",
                  "    return;",
                  "}",
                  "",
                  "const linieOdpowiedzi = body.split('\\n');",
                  "",
                  "// Sprawdzenie linii z kodem zadania",
                  "const liniaZKodem = linieOdpowiedzi.find(linia => linia.includes(\"|\" + kod));",
                  "if (!liniaZKodem) {",
                  "    console.error(`Nie znaleziono linii zawierającej kod zadania: ${kod}`);",
                  "    pm.test(\"Linia z kodem zadania istnieje\", () => {",
                  "        pm.expect.fail(`Brak linii z kodem zadania: ${kod}`);",
                  "    });",
                  "    return;",
                  "}",
                  "",
                  "// Szczegółowe filtrowanie linii zgodnie z Groovy (SoapUI)",
                  "const liniaZsoon = linieOdpowiedzi.filter(linia => linia.includes('No information yet. Please try again soon!'));",
                  "const linieZFailed = linieOdpowiedzi.filter(linia => linia.includes('FAILED') && !linia.includes(kod));",
                  "const linieZFailures = linieOdpowiedzi.filter(linia => linia.includes('Failures'));",
                  "const linieZRunNew = linieOdpowiedzi.filter(linia => linia.includes('|RUNNING') || linia.includes('|NEW'));",
                  "",
                  "// Szczegóły błędów specjalnych",
                  "let linieZFailuresSpecjalne = [];",
                  "if (linieZFailures.length > 0) {",
                  "    linieZFailuresSpecjalne = linieOdpowiedzi.filter(linia =>",
                  "        linia.includes('#') ||",
                  "        linia.includes('MAIN:') ||",
                  "        linia.includes('READER:') ||",
                  "        linia.includes('Caused by:') ||",
                  "        linia.includes('WRITER:')",
                  "    );",
                  "}",
                  "",
                  "// Główna logika 1:1 zgodna z Groovy (SoapUI)",
                  "if (liniaZsoon.length === 1) {",
                  "    console.warn(`Należy ponowić sprawdzenie statusu zadania ${kod}`);",
                  "    pm.test(\"Brak komunikatu 'try again soon'\", () => {",
                  "        pm.expect.fail(`Znaleziono 'try again soon' dla zadania ${kod}`);",
                  "    });",
                  "",
                  "} else if (linieZRunNew.length > 0) {",
                  "    console.warn(`Nie wszystkie kroki zostały zakończone dla zadania ${kod}`);",
                  "    pm.test(\"Wszystkie kroki zakończone\", () => {",
                  "        pm.expect.fail(`Znaleziono kroki RUNNING/NEW dla zadania ${kod}`);",
                  "    });",
                  "",
                  "} else if (linieZFailed.length > 0) {",
                  "    if (linieZFailed.length === 1) {",
                  "        console.error(`Wystąpił błąd 'FAILED' dla zadania ${kod}:`);",
                  "        console.error(`      ${linieZFailed[0]}`);",
                  "    } else {",
                  "        console.error(`Wystąpiły błędy 'FAILED' dla zadania ${kod}:`);",
                  "        linieZFailed.forEach(linia => console.error(`      ${linia}`));",
                  "    }",
                  "",
                  "    // Szczegóły  (Failures)",
                  "    if (linieZFailuresSpecjalne.length > 0) {",
                  "        console.error(\"Szczegóły:\");",
                  "        linieZFailuresSpecjalne.forEach(linia => console.error(`      ${linia}`));",
                  "    }",
                  "",
                  "    // Zgłoszenie szczegółowego błędu jako failed test",
                  "    pm.test(\"Brak błędów FAILED\", () => {",
                  "        pm.expect.fail(`Znaleziono linie FAILED dla zadania ${kod}`);",
                  "    });",
                  "",
                  "} else {",
                  "    console.log(`Nie wystąpił błąd 'FAILED' dla zadania ${kod}`);",
                  "    pm.test(\"Brak błędów FAILED\", () => {",
                  "        pm.expect(true).to.be.true;",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "c5932503-417c-4bd8-873b-339df675fd01"
              }
            }
          ]
        },
        "parent": {
          "id": "a96c8136-f56e-4c0a-b6ce-56b642bf4d58",
          "name": "Test Steps",
          "item": [
            {
              "id": "e1c974ec-065f-4041-a31f-061a1f7c7395",
              "name": "Odpowiedź-OK",
              "request": {
                "url": {
                  "path": [
                    "statusZadania"
                  ],
                  "host": [
                    "{{BaseURL}}"
                  ],
                  "query": [
                    {
                      "key": "kod",
                      "value": "zadanie_1"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5822a058-c62f-4899-84cf-94858c4322b2",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const body = pm.response.text().trim();",
                      "const kod = pm.request.url.query",
                      "    .find(p => p.key === \"kod\")?.value?.trim() || \"\";",
                      "",
                      "pm.test(\"Valid HTTP Status Codes\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Pierwsza linia\", () => pm.expect(body).to.include(\"Task summary Generated At\"));",
                      "pm.test(\"Naglowek\", () => pm.expect(body).to.include(\"|Kod                                                   |Status   |Cron                          |Start               |Koniec              |Ostatnie OK         |\"));",
                      "pm.test(\"Kod zadania\", () => pm.expect(body).to.include(\"|\" + kod));",
                      "pm.test(\"Podsumowanie\", () => pm.expect(body).to.include(\"Podsumowanie\"));",
                      "",
                      "// Ogólne asercje nieprzerywające dalszej logiki",
                      "if (body.includes(\"FAILED\")) {",
                      "    console.error(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                      "    pm.test(\"Brak \\\"FAILED\\\"\", () => {",
                      "        pm.expect.fail(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                      "    });",
                      "} else {",
                      "    pm.test(\"Brak \\\"FAILED\\\"\", () => pm.expect(true).to.be.true);",
                      "}",
                      "",
                      "if (body.includes(\"Failures\")) {",
                      "    console.error(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                      "    pm.test(\"Brak \\\"Failures\\\"\", () => {",
                      "        pm.expect.fail(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                      "    });",
                      "} else {",
                      "    pm.test(\"Brak \\\"Failures\\\"\", () => pm.expect(true).to.be.true);",
                      "}",
                      "",
                      "if (!body) {",
                      "    console.error(\"Odpowiedź serwera jest pusta. Przerywam wykonanie.\");",
                      "    pm.test(\"Brak treści w odpowiedzi serwera\", () => {",
                      "        pm.expect.fail(\"Brak treści w odpowiedzi serwera.\");",
                      "    });",
                      "    return;",
                      "}",
                      "",
                      "const linieOdpowiedzi = body.split('\\n');",
                      "",
                      "// Sprawdzenie linii z kodem zadania",
                      "const liniaZKodem = linieOdpowiedzi.find(linia => linia.includes(\"|\" + kod));",
                      "if (!liniaZKodem) {",
                      "    console.error(`Nie znaleziono linii zawierającej kod zadania: ${kod}`);",
                      "    pm.test(\"Linia z kodem zadania istnieje\", () => {",
                      "        pm.expect.fail(`Brak linii z kodem zadania: ${kod}`);",
                      "    });",
                      "    return;",
                      "}",
                      "",
                      "// Szczegółowe filtrowanie linii zgodnie z Groovy (SoapUI)",
                      "const liniaZsoon = linieOdpowiedzi.filter(linia => linia.includes('No information yet. Please try again soon!'));",
                      "const linieZFailed = linieOdpowiedzi.filter(linia => linia.includes('FAILED') && !linia.includes(kod));",
                      "const linieZFailures = linieOdpowiedzi.filter(linia => linia.includes('Failures'));",
                      "const linieZRunNew = linieOdpowiedzi.filter(linia => linia.includes('|RUNNING') || linia.includes('|NEW'));",
                      "",
                      "// Szczegóły błędów specjalnych",
                      "let linieZFailuresSpecjalne = [];",
                      "if (linieZFailures.length > 0) {",
                      "    linieZFailuresSpecjalne = linieOdpowiedzi.filter(linia =>",
                      "        linia.includes('#') ||",
                      "        linia.includes('MAIN:') ||",
                      "        linia.includes('READER:') ||",
                      "        linia.includes('Caused by:') ||",
                      "        linia.includes('WRITER:')",
                      "    );",
                      "}",
                      "",
                      "// Główna logika 1:1 zgodna z Groovy (SoapUI)",
                      "if (liniaZsoon.length === 1) {",
                      "    console.warn(`Należy ponowić sprawdzenie statusu zadania ${kod}`);",
                      "    pm.test(\"Brak komunikatu 'try again soon'\", () => {",
                      "        pm.expect.fail(`Znaleziono 'try again soon' dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else if (linieZRunNew.length > 0) {",
                      "    console.warn(`Nie wszystkie kroki zostały zakończone dla zadania ${kod}`);",
                      "    pm.test(\"Wszystkie kroki zakończone\", () => {",
                      "        pm.expect.fail(`Znaleziono kroki RUNNING/NEW dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else if (linieZFailed.length > 0) {",
                      "    if (linieZFailed.length === 1) {",
                      "        console.error(`Wystąpił błąd 'FAILED' dla zadania ${kod}:`);",
                      "        console.error(`      ${linieZFailed[0]}`);",
                      "    } else {",
                      "        console.error(`Wystąpiły błędy 'FAILED' dla zadania ${kod}:`);",
                      "        linieZFailed.forEach(linia => console.error(`      ${linia}`));",
                      "    }",
                      "",
                      "    // Szczegóły  (Failures)",
                      "    if (linieZFailuresSpecjalne.length > 0) {",
                      "        console.error(\"Szczegóły:\");",
                      "        linieZFailuresSpecjalne.forEach(linia => console.error(`      ${linia}`));",
                      "    }",
                      "",
                      "    // Zgłoszenie szczegółowego błędu jako failed test",
                      "    pm.test(\"Brak błędów FAILED\", () => {",
                      "        pm.expect.fail(`Znaleziono linie FAILED dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else {",
                      "    console.log(`Nie wystąpił błąd 'FAILED' dla zadania ${kod}`);",
                      "    pm.test(\"Brak błędów FAILED\", () => {",
                      "        pm.expect(true).to.be.true;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "ac67f8ac-e3da-411a-bfec-228509dfcac8"
                  }
                }
              ]
            },
            {
              "id": "e93e4f3e-18b8-44fe-bd5b-fea9e0c846ad",
              "name": "Odpowiedź-BŁĄD",
              "request": {
                "url": {
                  "path": [
                    "statusZadania"
                  ],
                  "host": [
                    "{{BaseURL}}"
                  ],
                  "query": [
                    {
                      "key": "kod",
                      "value": "zadanie_2"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "60b88e7c-b62b-420a-8cc5-23626d08d919",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const body = pm.response.text().trim();",
                      "const kod = pm.request.url.query",
                      "    .find(p => p.key === \"kod\")?.value?.trim() || \"\";",
                      "",
                      "pm.test(\"Valid HTTP Status Codes\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Pierwsza linia\", () => pm.expect(body).to.include(\"Task summary Generated At\"));",
                      "pm.test(\"Naglowek\", () => pm.expect(body).to.include(\"|Kod                                                   |Status   |Cron                          |Start               |Koniec              |Ostatnie OK         |\"));",
                      "pm.test(\"Kod zadania\", () => pm.expect(body).to.include(\"|\" + kod));",
                      "pm.test(\"Podsumowanie\", () => pm.expect(body).to.include(\"Podsumowanie\"));",
                      "",
                      "// Ogólne asercje nieprzerywające dalszej logiki",
                      "if (body.includes(\"FAILED\")) {",
                      "    console.error(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                      "    pm.test(\"Brak \\\"FAILED\\\"\", () => {",
                      "        pm.expect.fail(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                      "    });",
                      "} else {",
                      "    pm.test(\"Brak \\\"FAILED\\\"\", () => pm.expect(true).to.be.true);",
                      "}",
                      "",
                      "if (body.includes(\"Failures\")) {",
                      "    console.error(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                      "    pm.test(\"Brak \\\"Failures\\\"\", () => {",
                      "        pm.expect.fail(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                      "    });",
                      "} else {",
                      "    pm.test(\"Brak \\\"Failures\\\"\", () => pm.expect(true).to.be.true);",
                      "}",
                      "",
                      "if (!body) {",
                      "    console.error(\"Odpowiedź serwera jest pusta. Przerywam wykonanie.\");",
                      "    pm.test(\"Brak treści w odpowiedzi serwera\", () => {",
                      "        pm.expect.fail(\"Brak treści w odpowiedzi serwera.\");",
                      "    });",
                      "    return;",
                      "}",
                      "",
                      "const linieOdpowiedzi = body.split('\\n');",
                      "",
                      "// Sprawdzenie linii z kodem zadania",
                      "const liniaZKodem = linieOdpowiedzi.find(linia => linia.includes(\"|\" + kod));",
                      "if (!liniaZKodem) {",
                      "    console.error(`Nie znaleziono linii zawierającej kod zadania: ${kod}`);",
                      "    pm.test(\"Linia z kodem zadania istnieje\", () => {",
                      "        pm.expect.fail(`Brak linii z kodem zadania: ${kod}`);",
                      "    });",
                      "    return;",
                      "}",
                      "",
                      "// Szczegółowe filtrowanie linii zgodnie z Groovy (SoapUI)",
                      "const liniaZsoon = linieOdpowiedzi.filter(linia => linia.includes('No information yet. Please try again soon!'));",
                      "const linieZFailed = linieOdpowiedzi.filter(linia => linia.includes('FAILED') && !linia.includes(kod));",
                      "const linieZFailures = linieOdpowiedzi.filter(linia => linia.includes('Failures'));",
                      "const linieZRunNew = linieOdpowiedzi.filter(linia => linia.includes('|RUNNING') || linia.includes('|NEW'));",
                      "",
                      "// Szczegóły błędów specjalnych",
                      "let linieZFailuresSpecjalne = [];",
                      "if (linieZFailures.length > 0) {",
                      "    linieZFailuresSpecjalne = linieOdpowiedzi.filter(linia =>",
                      "        linia.includes('#') ||",
                      "        linia.includes('MAIN:') ||",
                      "        linia.includes('READER:') ||",
                      "        linia.includes('Caused by:') ||",
                      "        linia.includes('WRITER:')",
                      "    );",
                      "}",
                      "",
                      "// Główna logika 1:1 zgodna z Groovy (SoapUI)",
                      "if (liniaZsoon.length === 1) {",
                      "    console.warn(`Należy ponowić sprawdzenie statusu zadania ${kod}`);",
                      "    pm.test(\"Brak komunikatu 'try again soon'\", () => {",
                      "        pm.expect.fail(`Znaleziono 'try again soon' dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else if (linieZRunNew.length > 0) {",
                      "    console.warn(`Nie wszystkie kroki zostały zakończone dla zadania ${kod}`);",
                      "    pm.test(\"Wszystkie kroki zakończone\", () => {",
                      "        pm.expect.fail(`Znaleziono kroki RUNNING/NEW dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else if (linieZFailed.length > 0) {",
                      "    if (linieZFailed.length === 1) {",
                      "        console.error(`Wystąpił błąd 'FAILED' dla zadania ${kod}:`);",
                      "        console.error(`      ${linieZFailed[0]}`);",
                      "    } else {",
                      "        console.error(`Wystąpiły błędy 'FAILED' dla zadania ${kod}:`);",
                      "        linieZFailed.forEach(linia => console.error(`      ${linia}`));",
                      "    }",
                      "",
                      "    // Szczegóły  (Failures)",
                      "    if (linieZFailuresSpecjalne.length > 0) {",
                      "        console.error(\"Szczegóły:\");",
                      "        linieZFailuresSpecjalne.forEach(linia => console.error(`      ${linia}`));",
                      "    }",
                      "",
                      "    // Zgłoszenie szczegółowego błędu jako failed test",
                      "    pm.test(\"Brak błędów FAILED\", () => {",
                      "        pm.expect.fail(`Znaleziono linie FAILED dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else {",
                      "    console.log(`Nie wystąpił błąd 'FAILED' dla zadania ${kod}`);",
                      "    pm.test(\"Brak błędów FAILED\", () => {",
                      "        pm.expect(true).to.be.true;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "08a014d5-2d49-4142-8016-2f8752fbf889"
                  }
                }
              ]
            },
            {
              "id": "a02a0fe7-872f-4ae9-afb8-bceec80e8418",
              "name": "Odpowiedź-BRAK",
              "request": {
                "url": {
                  "path": [
                    "statusZadania"
                  ],
                  "host": [
                    "{{BaseURL}}"
                  ],
                  "query": [
                    {
                      "key": "kod",
                      "value": "zadanie_3"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d789b2ea-582f-4219-8ae2-00fd41f9709e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const body = pm.response.text().trim();",
                      "const kod = pm.request.url.query",
                      "    .find(p => p.key === \"kod\")?.value?.trim() || \"\";",
                      "",
                      "pm.test(\"Valid HTTP Status Codes\", () => pm.response.to.have.status(200));",
                      "pm.test(\"Pierwsza linia\", () => pm.expect(body).to.include(\"Task summary Generated At\"));",
                      "pm.test(\"Naglowek\", () => pm.expect(body).to.include(\"|Kod                                                   |Status   |Cron                          |Start               |Koniec              |Ostatnie OK         |\"));",
                      "pm.test(\"Kod zadania\", () => pm.expect(body).to.include(\"|\" + kod));",
                      "pm.test(\"Podsumowanie\", () => pm.expect(body).to.include(\"Podsumowanie\"));",
                      "",
                      "// Ogólne asercje nieprzerywające dalszej logiki",
                      "if (body.includes(\"FAILED\")) {",
                      "    console.error(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                      "    pm.test(\"Brak \\\"FAILED\\\"\", () => {",
                      "        pm.expect.fail(\"Znaleziono słowo 'FAILED' w całej odpowiedzi.\");",
                      "    });",
                      "} else {",
                      "    pm.test(\"Brak \\\"FAILED\\\"\", () => pm.expect(true).to.be.true);",
                      "}",
                      "",
                      "if (body.includes(\"Failures\")) {",
                      "    console.error(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                      "    pm.test(\"Brak \\\"Failures\\\"\", () => {",
                      "        pm.expect.fail(\"Znaleziono słowo 'Failures' w całej odpowiedzi.\");",
                      "    });",
                      "} else {",
                      "    pm.test(\"Brak \\\"Failures\\\"\", () => pm.expect(true).to.be.true);",
                      "}",
                      "",
                      "if (!body) {",
                      "    console.error(\"Odpowiedź serwera jest pusta. Przerywam wykonanie.\");",
                      "    pm.test(\"Brak treści w odpowiedzi serwera\", () => {",
                      "        pm.expect.fail(\"Brak treści w odpowiedzi serwera.\");",
                      "    });",
                      "    return;",
                      "}",
                      "",
                      "const linieOdpowiedzi = body.split('\\n');",
                      "",
                      "// Sprawdzenie linii z kodem zadania",
                      "const liniaZKodem = linieOdpowiedzi.find(linia => linia.includes(\"|\" + kod));",
                      "if (!liniaZKodem) {",
                      "    console.error(`Nie znaleziono linii zawierającej kod zadania: ${kod}`);",
                      "    pm.test(\"Linia z kodem zadania istnieje\", () => {",
                      "        pm.expect.fail(`Brak linii z kodem zadania: ${kod}`);",
                      "    });",
                      "    return;",
                      "}",
                      "",
                      "// Szczegółowe filtrowanie linii zgodnie z Groovy (SoapUI)",
                      "const liniaZsoon = linieOdpowiedzi.filter(linia => linia.includes('No information yet. Please try again soon!'));",
                      "const linieZFailed = linieOdpowiedzi.filter(linia => linia.includes('FAILED') && !linia.includes(kod));",
                      "const linieZFailures = linieOdpowiedzi.filter(linia => linia.includes('Failures'));",
                      "const linieZRunNew = linieOdpowiedzi.filter(linia => linia.includes('|RUNNING') || linia.includes('|NEW'));",
                      "",
                      "// Szczegóły błędów specjalnych",
                      "let linieZFailuresSpecjalne = [];",
                      "if (linieZFailures.length > 0) {",
                      "    linieZFailuresSpecjalne = linieOdpowiedzi.filter(linia =>",
                      "        linia.includes('#') ||",
                      "        linia.includes('MAIN:') ||",
                      "        linia.includes('READER:') ||",
                      "        linia.includes('Caused by:') ||",
                      "        linia.includes('WRITER:')",
                      "    );",
                      "}",
                      "",
                      "// Główna logika 1:1 zgodna z Groovy (SoapUI)",
                      "if (liniaZsoon.length === 1) {",
                      "    console.warn(`Należy ponowić sprawdzenie statusu zadania ${kod}`);",
                      "    pm.test(\"Brak komunikatu 'try again soon'\", () => {",
                      "        pm.expect.fail(`Znaleziono 'try again soon' dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else if (linieZRunNew.length > 0) {",
                      "    console.warn(`Nie wszystkie kroki zostały zakończone dla zadania ${kod}`);",
                      "    pm.test(\"Wszystkie kroki zakończone\", () => {",
                      "        pm.expect.fail(`Znaleziono kroki RUNNING/NEW dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else if (linieZFailed.length > 0) {",
                      "    if (linieZFailed.length === 1) {",
                      "        console.error(`Wystąpił błąd 'FAILED' dla zadania ${kod}:`);",
                      "        console.error(`      ${linieZFailed[0]}`);",
                      "    } else {",
                      "        console.error(`Wystąpiły błędy 'FAILED' dla zadania ${kod}:`);",
                      "        linieZFailed.forEach(linia => console.error(`      ${linia}`));",
                      "    }",
                      "",
                      "    // Szczegóły  (Failures)",
                      "    if (linieZFailuresSpecjalne.length > 0) {",
                      "        console.error(\"Szczegóły:\");",
                      "        linieZFailuresSpecjalne.forEach(linia => console.error(`      ${linia}`));",
                      "    }",
                      "",
                      "    // Zgłoszenie szczegółowego błędu jako failed test",
                      "    pm.test(\"Brak błędów FAILED\", () => {",
                      "        pm.expect.fail(`Znaleziono linie FAILED dla zadania ${kod}`);",
                      "    });",
                      "",
                      "} else {",
                      "    console.log(`Nie wystąpił błąd 'FAILED' dla zadania ${kod}`);",
                      "    pm.test(\"Brak błędów FAILED\", () => {",
                      "        pm.expect(true).to.be.true;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "c5932503-417c-4bd8-873b-339df675fd01"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9fc38d97-3ac6-4b25-b099-6eb147aabb3c",
          "length": 3,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "ea7a2df6-6f64-479f-ac0a-5ffda8c576f1",
          "scriptId": "d789b2ea-582f-4219-8ae2-00fd41f9709e",
          "execution": "c5932503-417c-4bd8-873b-339df675fd01"
        }
      }
    ],
    "error": null
  }
}